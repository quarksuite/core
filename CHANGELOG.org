#+TITLE: Changelog

All notable changes to this project will be documented in this file.

The format is based on [[https://keepachangelog.com/en/1.0.0/][Keep a Changelog]] and this project adheres to [[https://semver.org/spec/v2.0.0.html][Semantic Versioning]].

* Table of Contents :TOC@3:
- [[#v130---2021-02-25][v1.3.0 - 2021-02-25]]
  - [[#added][Added]]
  - [[#changed][Changed]]
- [[#v121---2021-02-24][v1.2.1 - 2021-02-24]]
  - [[#fixed][Fixed]]
- [[#v120---2021-02-21][v1.2.0 - 2021-02-21]]
  - [[#changed-1][Changed]]
  - [[#fixed-1][Fixed]]
- [[#v110---2021-02-16][v1.1.0 - 2021-02-16]]
  - [[#added-1][Added]]
  - [[#changed-2][Changed]]
- [[#v101---2021-12-17][v1.0.1 - 2021-12-17]]
  - [[#added-2][Added]]
  - [[#fixed-2][Fixed]]
- [[#v100---2021-12-16][v1.0.0 - 2021-12-16]]
  - [[#added-3][Added]]
    - [[#revamped-workflow][revamped workflow]]
    - [[#explicit-naming-conventions][explicit naming conventions]]
    - [[#overhauled-api][overhauled API]]
- [[#v021---2020-06-07][v0.2.1 - 2020-06-07]]
  - [[#fixed-3][Fixed]]
    - [[#color-adjustment][color adjustment]]
- [[#v020---2020-05-27][v0.2.0 - 2020-05-27]]
  - [[#added-4][Added]]
    - [[#color-conversion][color conversion]]
  - [[#changed-3][Changed]]
    - [[#color-adjustment-1][color adjustment]]
    - [[#color-mixture][color mixture]]
    - [[#color-schemes][color schemes]]
    - [[#color-palette-color-scale][+color palette+ color scale]]
- [[#v011---2020-04-29][v0.1.1 - 2020-04-29]]
  - [[#changed-4][Changed]]
    - [[#color-conversion-1][color conversion]]
- [[#v010---2021-04-13][v0.1.0 - 2021-04-13]]
  - [[#added-5][Added]]
    - [[#functional-utilities][functional utilities]]
    - [[#color-conversion-2][color conversion]]
    - [[#scheme-functions][scheme functions]]
    - [[#color-accessibility][color accessibility]]
  - [[#changed-5][Changed]]
    - [[#scheme-functions-1][scheme functions]]
    - [[#output-functions][output functions]]
  - [[#removed][Removed]]
    - [[#functional-utilities-1][functional utilities]]

* v1.3.0 - 2021-02-25

This minor release updates the implementation of OKLab and OKLCH to [[https://www.w3.org/TR/css-color-4/#specifying-oklab-oklch][adhere to the currently defined spec]].

This means that Quarks System Core now supports the use of colors in most major current and emerging formats.

Specifically:

+ Named colors
+ RGB Hex
+ Functional RGB
+ Functional HSL
+ Functional device-cmyk
+ Functional HWB
+ Functional CIELAB
+ Functional CIELCH
+ Functional OKLab
+ Functional OKLCH

** Added

+ =color_to_oklab=

** Changed

+ renamed =color_to_oklab= to =color_to_oklch=
+ =color_to_oklab= output takes over =oklab= prefix
+ OKLCH color prefix now =oklch=

* v1.2.1 - 2021-02-24

Fixes =color_adjust= and =color_filter= and improves chromatic accuracy for color generation in general.

** Fixed

+ chromatic adjustment through the OKLab color space was /not/ bound to a range 0-0.5. This threw off chromatic accuracy
  and made chroma impossible to filter for

* v1.2.0 - 2021-02-21

This release updates the /object factory/ workflow with more consistent names and better propagation over values and
scales.

+ =$_= will cycle the execution over values (=object.$_adjust()=)
+ =$$_= will cycle the execution over scales (=object.$$_modify()=)

This change allows you even more control over your generated data.

In addition, the setup has changed:

#+BEGIN_SRC js
import * as Q from "https://x.nest.land/quarksuite:core@1.2.0/mod.js";

const { fn_compose, fn_curry fn_filter, fn_to_factory } = Q;

// Initialize a factory: fn_filter -> [fn] -> fn_to_factory -> (x) => object
const Color = fn_compose(fn_curry(fn_filter, "color") fn_to_factory);

// Create an instance
const swatch = Color("lime");

// Instance methods are encapsulated in its prototype, so you won't see the data
// until you invoke one
console.log(swatch) // {}
console.log(swatch.to_hex()) // { x: "#00ff00" }

// do stuff with it (now only strips the type in translation)
swatch.to_rgb();
swatch.to_scheme_triadic();

// factory methods are shadowed by $_ and $$_ equivalents that transform data recursively.
// $_ iterates over each value recursively and executes, $$_ iterates over scales of values and executes
// e.g.: $_material means ([a, b, c] -> [[50..900], [50..900], [50..900]])
swatch.to_rgb().to_scheme_triadic().$_material();

// Every instance has a data getter that extracts the result
const { data: palette } = swatch.to_rgb().to_scheme_triadic().$_material();

// Which can then be the initializer for another instance
const { data: secondaryPalette } = Color(swatch).$_adjust({ hue: 120 });
#+END_SRC

** Changed

+ `imports_to_module` renamed to `fn_filter`
+ `module_to_factory` renamed to `fn_to_factory`

** Fixed

+ errors with data propagation when the method expected a scale (now handled by =$$_= methods)

* v1.1.0 - 2021-02-16

This release adds support for a factory object workflow. It makes working with low level utilities a little easier by
allowing you to bind them as methods on discrete data types. You can set up this workflow with a few extra lines of
code:

#+BEGIN_SRC js
import * as qsc from "https://x.nest.land/quarksuite:core@1.1.0/mod.js";

const { imports_to_module, module_to_factory } = qsc;

// Initialize the factory
const Color = module_to_factory(imports_to_module("color", qsc));

// Create an instance
const swatch = Color("lime");

// do stuff with it

swatch.rgb();
swatch.rgb().triadic()

// factory methods are shadowed by $-prefixed equivalents that transform data recursively.
// e.g.: $material means ([a, b, c] -> [[50..900], [50..900], [50..900]])
swatch.rgb().triadic().$material();
#+END_SRC

** Added

Factory interface utilities

+ =imports_to_module(type, import)=
+ =module_to_factory(module)=

** Changed

+ =utility= type renamed to =fn= (=fn_compose=, =fn_curry=, =fn_pipe=) as they're not exclusively used by utilities
+ =color_to_scheme_split_complementary= renamed to =color_to_scheme_split=
+ =tokens_to_style_dictionary= renamed to =tokens_to_styledict=

* v1.0.1 - 2021-12-17

** Added

+ Examples for =utility_compose=, =utility_curry=, =utility_pipe=

** Fixed

+ Malformed TSDoc typing
+ Function documentation typos

* v1.0.0 - 2021-12-16

Quarks System Core v1 is here and it's another major rewrite. To begin, the workflow is a completely
different beast. The naming conventions are more deliberate, the design token spec is more or less
settled, and I've reinforced the library's web focus.

** Added

*** revamped workflow

+ Basic: automatic token generation via bootstrapper
+ Intermediate: manual token generation via formulas
+ Advanced: granular token generation via utilities

*** explicit naming conventions

+ =PascalCase= for bootstrapper/formulas
+ =snake_case= for utilities/exporters
+ conventional =camelCase= for internal functionality

*** overhauled API

+ too much to list, recommend [[https://observablehq.com/@cr-jr/qsc-api][reading it]]

* v0.2.1 - 2020-06-07

** Fixed

*** color adjustment

+ bug where the presence of alpha component was implemented in standard LCh(ab) instead of Oklab,
  which rendered the color adjustment achromatic

* v0.2.0 - 2020-05-27

** Added

*** color conversion

+ Added /non-standard/ Oklab (LCh) color format support

** Changed

*** color adjustment

+ All color adjustment functions are now implemented through the Oklab color space for better hue
  linearity and lightness/chroma predictions
+ Adjustments are perceptually uniform and blue hues no longer shift toward purple

*** color mixture

+ Color mixing now uses simpler interpolation formula through the Oklab color space

*** color schemes

+ All basic color schemes have their output explicitly slotted into a fixed scale. This means
  =custom()= is the only true dyanamic color scheme generator. Use it carefully

*** +color palette+ color scale

+ =color_palette.js= module renamed to =color_scale.js= (which is a better description of its purpose)
+ New interpolation formula makes =contrast= parameter slightly more sensitive (particularly with shades)

* v0.1.1 - 2020-04-29

** Changed

*** color conversion

+ refactored conversion logic to be simpler

* v0.1.0 - 2021-04-13

The initial release of Quarks System Core adds several improvements over QuarkSuite 1. For a full
overview of what's different from legacy, consult the [[https://github.com/quarksuite/legacy/blob/master/CHANGELOG.md#v500---2020-12-05][Changelog of QuarkSuite 1]].

This project no longer relies on Node or NPM and is instead served directly from the Arweave
permaweb via [[https://nest.land][nest.land]]. Use =https://x.nest.land/quarksuite:core/mod.js= in a browser console or in
your scripts to get started.

TypeScript is also gone to remove the compile step that would conflict with using the library in its
target environments. Basic type information is provided for development via TSDoc comments.

Top level source files are now modules by default, and the below modules should be preferred for importing:

+ =mod.js=: the entry point for the entire public API (aggregates the following)
  - =utilities.js=: contains advanced functional utilities
  - =color.js=: contains all color functions
  - =typography.js=: contains all typography functions
  - =modular_scale.js=: contains all functions for using modular scales
  - =design_tokens.js=: contains all build functions

Lastly, I've used literate programming through the development of Quarks System Core to clarify the
implementation details, so you'll find [[https://github.com/quarksuite/core/blob/main/README.org#source-code][the documentation is also the source]].

** Added

*** functional utilities

+ =compose= function for straightforward composition

*** color conversion

+ =device-cmyk=, =hwb=, =lab=, =lch= CSS formats now valid

*** scheme functions

+ simplified =analogous=, =splitComplementary=, =triadic=, =tetradic/dualComplementary=, =square=
  functions provided for basic schemes; no longer need to set modifiers

*** color accessibility

+ =contrast= function for validating or filtering palettes with WCAG color contrast ratios
  recommendations

** Changed

*** scheme functions

+ output of basic schemes slightly rearranged
+ =custom= color scheme generation modified to create colors around the input color symmetrically

*** output functions

+ =yaml= data export added
+ =tw= changed to =tailwind=
+ =sd= changed to =styledict=

** Removed

*** functional utilities

+ =bind= scrapped in favor of JavaScript's native =Function.bind=
