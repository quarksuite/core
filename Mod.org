#+TITLE: Quarks System Core (v.1.0.0) Annotated Source
#+AUTHOR: Chatman R. Jr
#+PROPERTY: header-args :mkdirp yes

* Table of Contents :TOC@4:
- [[#introduction][Introduction]]
- [[#overview-of-system-design][Overview of System Design]]
- [[#formatters][Formatters]]
  - [[#css-formats][CSS Formats]]
    - [[#custom-properties][Custom Properties]]
    - [[#sass-scsslessstylus][Sass (SCSS)/Less/Stylus]]
  - [[#data-exports][Data Exports]]
  - [[#desktop-support][Desktop Support]]
  - [[#helpers][Helpers]]
    - [[#css-format-structure][CSS Format Structure]]
    - [[#undefined-project-metadata-error][Undefined Project Metadata Error]]
    - [[#metadata-emitter][Metadata Emitter]]
    - [[#token-string-constructor][Token String Constructor]]
    - [[#css-token-emitter][CSS Token Emitter]]
    - [[#css-token-assembler][CSS Token Assembler]]
    - [[#token-string-identifier][Token String Identifier]]
    - [[#automatic-versioning][Automatic Versioning]]
    - [[#timestamp-emitter][Timestamp Emitter]]
    - [[#yaml-assemblers][YAML Assemblers]]
- [[#utilities][Utilities]]
- [[#internals][Internals]]
  - [[#functional-programming][Functional Programming]]
    - [[#currying][Currying]]
    - [[#composition][Composition]]
    - [[#pipelining][Pipelining]]
  - [[#error-handling][Error Handling]]
- [[#data][Data]]
    - [[#named-color-keywords][Named Color Keywords]]
    - [[#colors-project-web-defaults][Colors Project Web Defaults]]
    - [[#system-font-stacks][System Font Stacks]]

* Introduction

Quarks System Core is written as a literate program in a top-down structure. Following this document
requires you understand the core concepts of the library, so I'll introduce those first.

You can access the test suite from =index.html=.

* Overview of System Design

From output to the  lowest level math, the system design is as follows:

+ Formatters: format a custom or bootstrapped Quarks System Dictionary as a file-ready set of design
  tokens for the web or other environmennts
+ Bootstrappers: outputs a complete dictionary from a configuration object
+ Transformers: convert entire Quarks System Dictionaries to other data formats (especially for interop)
+ Quarks System Dictionary: standard data schema consumed by transformers, returned by
  bootstrappers, and formatted by emitters
+ Formulas: features that represent data boilerplatesfor a bootstrapped or custom Quarks System Dictionary
+ Configurations: generic abstractions intended to streamline the assembly of formulas
+ Utilities: the functional toolbox used to create the higher abstractions
+ Internals: lower level utilities and helpers inaccessible to the user
+ Data: Hardcoded objects needed by some utilities

My hope is that this explicit outlining of the design will aid you in advanced use and extension of
Quarks System Core. Now, let's dive in.

* Formatters
:PROPERTIES:
:header-args:js: :tangle "./formatters.js" :comments link
:END:

At the top layer sit the formatters. Their only purpose is to format Quarks System Dictionaries into
file-ready design tokens. The available targets are named by their file extensions and include:

=css=: CSS custom properties
=scss/less/styl=: Variables for the respective preprocessor
=raw/yaml=: exports the raw dictionary (as JSON or YAML)
=gpl=: extracts the color dictionary for use in GIMP/Inkscape
=sketchpalette=: extracts the color dictionary as a Sketch palette

All of the formatters will /refuse/ to process a QSD that doesn't include =project= metadata. *This is by
design* as formatters are endpoints. The project metadata indicates that a dictionary needs no
additional processing and is ready for output.

The console will helpfully yell an error at you if you forget.

Crucial to note: Quarks System Core *assumes no read/write access* to your filesystem. The formatters
merely prepare your tokens for passalong to the filesystem library of your choice or your
environment's native filesystem API.

** CSS Formats

*** Custom Properties

Quarks System Core provides the most complete support for its CSS formats by virtue of being a
web-driven, web-focused kit. The first formatter preps your design tokens as CSS custom
properties wrapped in a root selector.

#+BEGIN_SRC js
export function css(dict) {
  return cssFormatStructure({}, dict);
}
#+END_SRC

*** Sass (SCSS)/Less/Stylus

The preprocessor formats require some minor adjustments.

#+BEGIN_SRC js
export function scss(dict) {
  return cssFormatStructure(
    {
      doc: ["\n/*!", " */\n"],
      metadata: ["", "// ", "\n\n"],
      wrapper: ["", "\n"],
      opts: { padding: "", prefix: "$" },
    },
    dict,
  );
}
#+END_SRC

#+BEGIN_SRC js
export function less(dict) {
  return cssFormatStructure(
    {
      doc: ["\n/*", " */\n"],
      metadata: ["", "// ", "\n\n"],
      wrapper: ["", "\n"],
      opts: { padding: "", prefix: "@" },
    },
    dict,
  );
}
#+END_SRC

#+BEGIN_SRC js
export function styl(dict) {
  return cssFormatStructure(
    {
      doc: ["\n/*!", " */\n"],
      metadata: ["", "// ", "\n\n"],
      wrapper: ["", "\n"],
      opts: { padding: "", prefix: "", assignment: " = ", suffix: "" },
    },
    dict,
  );
}
#+END_SRC

** Data Exports

Quarks System Core also allows direct data export to JSON and YAML for maximum portability.

#+BEGIN_SRC js
export function raw(dict) {
  const { project, ...tokens } = dict;
  const { bump = "manual" } = project || MissingProjectMetadataError();

  // Check if bump matches an automation keyword
  const autobump = ["major", "minor", "patch", "pre", "build"].some(
    (keyword) => keyword === bump,
  );

  // Then bump the version
  autobump && bumpVersion(project);

  return JSON.stringify({ project, tokens }, null, 2);
}
#+END_SRC

#+BEGIN_SRC js
export function yaml(dict) {
  const { project, ...tokens } = dict;
  const { bump = "manual" } = project || MissingProjectMetadataError();

  // Check if bump matches an automation keyword
  const autobump = ["major", "minor", "patch", "pre", "build"].some(
    (keyword) => keyword === bump,
  );

  // Then bump the version
  autobump && bumpVersion(project);

  const assemble = (level, tree) =>
    Object.entries(tree).reduce((str, [key, data]) => {
      if (typeof data === "string") return yamlDictValue(level, str, key, data);
      if (Array.isArray(data)) return yamlDictScale(level, str, key, data);
      if (key === "base") return yamlDictSubcategory(level, data);
      return str.concat(
        "".padStart(level),
        key,
        ":\n",
        assemble(level + 2, data),
      );
    }, "");

  return `
# ${timestampEmitter()}
${
    Object.entries({ project, tokens })
      .reduce((str, [key, data]) => {
        if (typeof data === "string") return yamlDictValue(0, str, key, data);
        if (Array.isArray(data)) return yamlDictScale(0, str, key, data);
        if (key === "base") return yamlDictSubcategory(0, data);
        return str.concat("\n", key, ":\n", assemble(2, data));
      }, "")
      .trimEnd()
  }
`;
}
#+END_SRC

** Desktop Support

Quarks System Core supports GIMP/Inkscape and Sketch palette formatting as of v1. The Inkscape
support was added because I occasionally create logos for stuff, and Sketch was added because it's
a popular app and I didn't realize the Sketch palette plugin schema was so light.

There are several reasons I won't support Adobe apps, but this isn't the place for that.

** Helpers

*** CSS Format Structure

The differences between the CSS formatters are trivial, so I abstracted the similarities into the
below helper function.

#+BEGIN_SRC js
function cssFormatStructure(
  {
    doc: [DOC_OPEN, DOC_CLOSE] = ["\n/**", " **/\n"],
    metadata: [OPEN, DELIM, CLOSE] = ["\n  /**", "   * ", "\n   **/\n\n"],
    wrapper: [TOKENS_OPEN, TOKENS_CLOSE] = ["\n:root {", "\n}\n"],
    opts = { padding: "  " },
  } = {},
  { project, ...tokens },
) {
  let {
    name,
    author,
    version,
    license,
    bump = "manual",
    metadata: { description = "N/A", comments = "N/A" } = {},
  } = project || MissingProjectMetadataError(project);

  // Attach a dynamic property initializing the autorelease version
  const autobump = ["major", "minor", "patch", "pre", "build"].some(
    (keyword) => keyword === bump,
  );

  return "".concat(
    DOC_OPEN,
    `
 * Project: ${name} (v${autobump ? bumpVersion(project) : version})
 * Owned by: ${author}
 * License: ${license}
 * ${"=".repeat(64)}
${
      metadataEmitter(
        { commentDelim: [" *", " * ", ""] },
        {
          description,
          comments,
        },
      )
    }
 * ${"-".repeat(64)}
 * ${timestampEmitter()}
`,
    DOC_CLOSE,
    TOKENS_OPEN,
    tokenStringConstructor(
      { ...opts, commentDelim: [OPEN, DELIM, CLOSE] },
      tokens,
    ),
    TOKENS_CLOSE,
  );
}
#+END_SRC

*** Undefined Project Metadata Error

A handy error to throw when the Quarks System Dictionary passed in to the formatters is
/incomplete/. As I stated further up, the formatters will not process any dictionary that's missing
project metadata.

#+BEGIN_SRC js
function MissingProjectMetadataError() {
  throw new QSCError({
    name: "Missing Project Metadata",
    reason: `
Formatters will not process a Quarks System Dictionary that's missing project
metadata. Its absence indicates that the current dictionary is still open
for modification.
`,
    suggestion: `
Be sure to include project metadata when you're ready to export your tokens.
Here's an example of the proper schema.

const finishedDict = {
  project: {
    name: "My Project",
    author: "Anonymous",
    version: "0.0.0",
    license: "Unlicense",
    // OPTIONAL can also be one of "major", "minor", "patch", "pre", "build" for automatic versioning
    bump: "manual",
    // OPTIONAL
    metadata: {
      description: "N/A",
      comments: "N/A"
    }
  },
  ...tokens
};

The first four properties are all required. Up to you if you want to include
a description or comments with your project.
`,
  });
}
#+END_SRC

*** Metadata Emitter

This helper provides a convenient way to assemble metadata as a comment block or line depending on
the format. It's used for both dictionary metadata and project metadata.

#+BEGIN_SRC js
function metadataEmitter(
  {
    commentDelim: [OPEN, DELIM, CLOSE] = ["\n  /**", "   * ", "\n   **/\n\n"],
    str = "",
  },
  meta,
) {
  return str.concat(
    [
      OPEN,
      Object.entries(meta).reduce((str, [key, value]) => {
        const lines = value.split("\n");

        if (lines.length > 1) {
          return str
            .concat(
              "\n",
              DELIM,
              key.toUpperCase(),
              ":",
              "\n",
              DELIM.trimEnd(),
              lines.join(`\n${DELIM}`),
            )
            .trimEnd();
        }

        return str.concat("\n", DELIM, key.toUpperCase(), ": ", lines);
      }, ""),
      CLOSE,
    ].join(""),
  );
}
#+END_SRC

*** Token String Constructor

The following construction helper is shared by all formatters in which the token identifier must be
created by traversing the dictionary. It uses recursion to walk branch by branch, combining keys with
a given delimiter until it reaches the end of the chain.

If it finds internal metadata, it will use a special function to process it

#+BEGIN_SRC js
function tokenStringConstructor(opts, dict) {
  return "".concat("\n", cssTokenEmitter(opts, "", dict));
}
#+END_SRC

*** CSS Token Emitter

This helper is responsible for actually walking the tree and emitting a complete collection of
tokens; formatting metadata as it finds it.

#+BEGIN_SRC js
function cssTokenEmitter(opts, head, node) {
  function assemble(head, node) {
    const { metadata, ...tokens } = node;
    return "".concat(
      (metadata && metadataEmitter(opts, metadata)) || "", // prepend metadata if defined
      Object.entries(tokens).reduce((str, [key, value]) => {
        const format = cssTokenAssembler(opts);
        if (typeof value === "object") {
          return str.concat(
            assemble(tokenStringIdentifier(head, key, "-"), value),
          );
        }

        return format(str, tokenStringIdentifier(head, key, "-"), value, "\n");
      }, ""),
    );
  }

  return assemble(head, node);
}
#+END_SRC

*** CSS Token Assembler

This helper is responsible for creating a string that the target format will actually recognize as a
variable or identifier.

#+BEGIN_SRC js
function cssTokenAssembler({
  padding = "",
  prefix = "--",
  assignment = ": ",
  suffix = ";",
  terminator = "\n",
}) {
  return function (str, key, value) {
    return str.concat(
      padding,
      prefix,
      key,
      assignment,
      value,
      suffix,
      terminator,
    );
  };
}
#+END_SRC

*** Token String Identifier

This helper is used when =*TokenEmitter= functions walk through the dictionary. It collects the
keys and joins them with a delimiter. However, it also /ignores/ any keys named base. Simply passing
through what it's already collected.

So =color.main.base= becomes =--color-main= in CSS for example.

#+BEGIN_SRC js
function tokenStringIdentifier(collected, current, delimiter) {
  return current === "base"
    ? collected
    : collected
    ? [collected, current].join(delimiter)
    : current;
}
#+END_SRC

*** Automatic Versioning

The following helper handles automatic versioning whenever project metadata defines =bump= as a
keyword other than ="manual"=.

#+BEGIN_SRC js
function bumpVersion(project) {
  let [major, minor, patch, pre] = Array.from(
    project.version.split(/[.-]/g),
  ).map((n) => parseFloat(n));

  function next(keyword) {
    const bumped = new Map([
      ["major", [major + 1, 0, 0]],
      ["minor", [major, minor + 1, 0]],
      ["patch", [major, minor, patch + 1]],
      ["pre", [major, minor, patch, pre + 1 || 0]],
      ["build", [major, minor, patch, pre, Date.now()]],
    ]).get(keyword);

    return bumped;
  }

  const releaseConditions = (release) =>
    Array.from(
      new Map([
        [release.length === 3, release.join(".")],
        [
          release.length === 4,
          [release.slice(0, 3).join("."), release[3]].join("-"),
        ],
        [
          release.length === 5,
          [
            release.slice(0, 3).join("."),
            [release[3] ?? 0, release[4]].join("+"),
          ].join("-"),
        ],
      ]),
    )
      .filter(([condition]) => condition)
      .flatMap(([, release]) => release)
      .toString();

  project["version"] = releaseConditions(next(project.bump));

  return project.version;
}
#+END_SRC

*** Timestamp Emitter

#+BEGIN_SRC js
function timestampEmitter() {
  const TIMESTAMP = new Date(Date.now());
  return `Updated on ${TIMESTAMP.toLocaleDateString()} at ${TIMESTAMP.toLocaleTimeString()}`;
}
#+END_SRC

*** YAML Assemblers

The following helpers format YAML by the three main structures of the Quarks System Dictionary
schema: values, scales, and subcategories. The value function helpfully handles the multiline
metadata strings as well.

#+BEGIN_SRC js
function yamlDictSubcategory(level, data) {
  return Object.entries(data).reduce((str, [key, v]) => {
    if (Array.isArray(v)) return yamlDictScale(level, str, key, v);
    return yamlDictValue(level, str, key, v);
  }, "");
}

function yamlDictValue(level, str, key, value) {
  const isMultiline = value.split("\n").length > 1;
  if (isMultiline) {
    return str.concat(
      "".padStart(level),
      `${key}: |\n`,
      value
        .split("\n")
        .reduce((s, line) => s.concat("".padStart(level + 2), line, "\n"), ""),
    );
  }
  return str.concat("".padStart(level), key, ": ", value, "\n");
}

function yamlDictScale(level, str, key, value) {
  return str.concat(
    "".padStart(level),
    key,
    ":\n",
    value.reduce((s, v) => s.concat("".padStart(level + 2), "- ", v, "\n"), ""),
  );
}
#+END_SRC

* Utilities
:PROPERTIES:
:header-args:js: :tangle "./utilities.js" :comments link
:END:
* Internals
:PROPERTIES:
:header-args:js: :tangle "./internals.js" :comments link
:END:
** Functional Programming

My first set of internals are used throughout the codebase and contribute to its
composable and expressive design.

*** Currying

Currying is a powerful higher-order transformation where a function of =n= arguments is morphed into
a sequence of calls with one argument. So this: =fn(z, y, x)= becomes =fn(z)(y)(x)=.

This utility really shines in a data-last architectures like this project. Since the final argument
is /always/ data, currying allows you to preload its modifiers and leave the data operation =fn(x)=
for composition and pipelining.

The implementation is an advanced curry that allows partial application and uncurried functionality.

#+BEGIN_SRC js
export function curry(fn) {
  return (...initial) =>
    initial.length >= fn.length
      ? fn.apply(this, initial)
      : (...remaining) => fn.apply(this, initial.concat(remaining));
}
#+END_SRC

*** Composition

Functional composition is a higher-order operation that combines functions in sequence into a brand
new function queued for data. It's an excellent way to reuse tiny utilities for more complex
behavior.

Currying and composition are the chocolate and caramel of Quarks System Core.

#+BEGIN_SRC js
export function compose(...fns) {
  return (x) => fns.reduce((g, f) => f(g), x);
}
#+END_SRC

*** Pipelining

Pipelining is a powerful pattern that drives this project, because its main purpose is to generate
and manipulate data. Excepting the error handlers and formatters, data is *both the input and output*
of every function.

As the name implies, pipelining is a higher-order function where data is transformed by being piped
through a series of data operations. These operations can themselves include compositions and
pipelines.

Another way to think of it: composition combines data /operations/, pipelining applies data
/transformations/.

#+BEGIN_SRC js
function pipe(x, ...fns) {
  return compose(...fns)(x);
}
#+END_SRC

** Error Handling

For v1, I wanted to create better custom errors. So I decided to directly extend the =Error= class
with my own general =QSCError= class. This will allow me to throw any number of errors I need
/within/ the context they're triggered and gives me a free stack trace back to what broke.

#+BEGIN_SRC js
class QSCError extends Error {
  constructor({
    name = "Unknown Error",
    reason = "here's why",
    suggestion = "try this",
  } = {}) {
    super();
    this.name = name;
    this.message = `
${reason}
${suggestion}
${"=".repeat(80)}
`;
  }
}
#+END_SRC

* Data
:PROPERTIES:
:header-args:js: :tangle "./data.js"
:END:

At the bottom rung sits collections of hardcoded data required for processing named color keywords,
Colors project defined web defaults, and system font stacks.

*** Named Color Keywords

#+BEGIN_SRC js
const NAMED_COLOR_KEYWORDS = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflower: "#6495ed",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  gold: "#ffd700",
  goldenrod: "#daa520",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  laserlemon: "#ffff54",
  lavender: "#e6e6fa",
  lavenderblush: "#fff0f5",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrod: "#fafad2",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  maroon2: "#7f0000",
  maroon3: "#b03060",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  purple2: "#7f007f",
  purple3: "#a020f0",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
#+END_SRC

*** Colors Project Web Defaults

#+BEGIN_SRC js
const A11Y_PALETTE = {
  navy: "#001f3f",
  blue: "#0074d9",
  aqua: "#7fdbff",
  teal: "#39cccc",
  olive: "#3d9970",
  green: "#2ecc40",
  lime: "#01ff70",
  yellow: "#ffdc00",
  orange: "#ff851b",
  red: "#ff4136",
  maroon: "#85144b",
  fuchsia: "#f012be",
  purple: "#b10dc9",
  black: "#111111",
  gray: "#aaaaaa",
  grey: "#aaaaaa",
  silver: "#dddddd",
  white: "#ffffff"
};
#+END_SRC

*** System Font Stacks

#+BEGIN_SRC js
const SYSTEM_FONT_STACKS = {
  sans:
    "-apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif",
  serif:
    "Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol",
  monospace:
    "Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace"
};
#+END_SRC
