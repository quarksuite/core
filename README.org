#+TITLE: QuarkSuite Core (v2.1.0)

* Table of Contents :TOC@4:
- [[#introduction][Introduction]]
- [[#features][Features]]
- [[#packages][Packages]]
- [[#getting-started][Getting Started]]
  - [[#live][Live]]
  - [[#local-development][Local Development]]
    - [[#browserdeno][Browser/Deno]]
    - [[#node][Node]]
  - [[#offline][Offline]]
- [[#handbook][Handbook]]
- [[#api][API]]
- [[#demos][Demos]]
- [[#contributing][Contributing]]
- [[#concept][Concept]]
- [[#project-objectives][Project Objectives]]
  - [[#availability][Availability]]
  - [[#adaptability][Adaptability]]
  - [[#invisibility][Invisibility]]
  - [[#interoperability][Interoperability]]
  - [[#stability][Stability]]
- [[#credit][Credit]]

* Introduction

QuarkSuite Core is the engine of the [[https://github.com/quarksuite][emerging QuarkSuite toolkit]] which is focused around using the web platform as a
[[https://css-tricks.com/what-are-design-tokens/][design token]] development environment.

The core in particular is responsible for generating, assembling, and exporting token collections and dictionaries.

QuarkSuite Core is written in vanilla JavaScript (ES2017+).

* Features

+ Generate practical color palettes for apps and sites
  * Color adjustment and blending
  * Built-in colorblindness, contrast sensitivity, and illuminant simulations
  * Material-esque and artistic configurations
  * WCAG-based and colorimetic color accessibility filtering
+ Enforce compositional balance with modular scales
+ Export tokens to take with you
  * Graphic design palettes (GIMP/Inkscape, Sketch)
  * Stylesheet formats (CSS custom properties, Sass, Less, Stylus)
  * Data formats (JSON, YAML)
+ Interop with TailwindCSS and Style Dictionary
+ Scales with your needs
  * from basic generation and assembly
  * to advanced rules and processes
  * to modular configurations
+ Independent modules
  * =color.js= for color features
  * =content.js= for content features
  * =exporter.js= for exporting features
  * =workflow.js= for advanced features

* Packages

+ [[https://jsdelivr.com][JSDelivr]]: =https://cdn.jsdelivr.net/gh/quarksuite/core@2.1.0/[module]=
+ [[https://statically.io][Statically]]: =https://cdn.statically.io/gh/quarksuite/core/v2.1.0/[module]=
+ [[https://nest.land][Nest.land]]: =https://x.nest.land/quarksuite:core@2.1.0/[module]=
+ [[https://nodejs.org/][Node]] (NPM): =@quarksuite-two/core@2.1.0=
  + [[https://skypack.dev][Skypack]]: =https://cdn.skypack.dev/@quarksuite-two/core@2.1.0/[module]=
  + [[https://esm.sh][esm.sh]]: =https://esm.sh/@quarksuite-two/core@2.1.0/[module]=

In general, prefer the JSDelivr/Statically CDN for availability, features, and speed. The Nest.land package is a
failsafe for the repo disappearing or GitHub going down.

* Getting Started

** Live

If you want to try the library live, load up your console in a modern browser or run a =deno repl= and copy/paste:

#+BEGIN_SRC js
const {
  color,
  content,
  exporter,
  workflow
} = await import("https://cdn.jsdelivr.net/gh/quarksuite/core@2.1.0/mod.js");
#+END_SRC

** Local Development

For local dev, it's recommended that you [[https://buildless.site/][use a buildless stack]] or work in the browser. QuarkSuite Core is designed
especially for that.

*** Browser/Deno

#+BEGIN_SRC js
import {
  color,
  content,
  exporter,
  workflow
} from "https://cdn.jsdelivr.net/gh/quarksuite/core@2.1.0/mod.js";
#+END_SRC

*** Node

#+BEGIN_QUOTE
The now defunct =@quarksuite/core= was originally published on NPM, but I started the project over and unpublished the
package. The core is now in a state where I feel comfortable putting it back on NPM and exposing it to the wider
JavaScript ecosystem.
#+END_QUOTE

Ensure that =type: module= is set in your =package.json= so that Node is set for ES Modules. Then install the package.

#+BEGIN_SRC shell
npm install @quarksuite-two/core@2.1.0

# OR

yarn add @quarksuite-two/core@2.1.0
#+END_SRC

And then in your source files:

#+BEGIN_SRC js
import {
  color,
  content,
  exporter,
  workflow
} from "@quarksuite-two/core";
#+END_SRC

** Offline

Some engines (like QuickJS) support ES Modules but don't allow importing from URLs. For those, you can =curl/wget=
the modules you need directly.

#+BEGIN_SRC shell
curl -o [module] https://cdn.jsdelivr.net/gh/quarksuite/core@2.1.0/[module]

# OR

wget https://cdn.jsdelivr.net/gh/quarksuite/core@2.1.0/[module]
#+END_SRC

* Handbook

The [[https://github.com/quarksuite/core/blob/main/HANDBOOK.org][QuarkSuite Core Handbook]] introduces the features of the library from a user perspective. It's recommended you read
that next.

* API

The [[https://github.com/quarksuite/core/blob/main/API.org][QuarkSuite Core API]] is a technical overview of the library that also serves as documentation of its functions. It
may make more sense after reading the handbook, but some of you may get more out of reading it beforehand.

* Demos

I maintain a [[https://glitch.com/@quarksuite][growing collection of demos]] for QuarkSuite at various stages of development on Glitch. It includes rough
experiments, workflow samples, and practical usage examples, so be sure to check it out.

* Contributing

First, clone the repo to your local machine.

#+BEGIN_SRC shell
git clone https://github.com/quarksuite/core.git
#+END_SRC

Then make sure you [[https://github.com/quarksuite/core/blob/main/CONTRIBUTING.md][read the contribution guidelines]].

* Concept

QuarkSuite is a project built around the idea that authoring design tokens shouldn't be limited to a particular
environment or web stack. Many design tools build entire systems around themselves.

I wanted a workflow where I could open a blank page in a browser and start experimenting. I wanted tools with mobility
across environments. I wanted something that could grow seamlessly with my needs and allow me to automate my
requirements.

QuarkSuite aims to be that toolkit.

* Project Objectives

The following objectives guide the ongoing development of QuarkSuite.

** Availability

This project focuses on the overall availability of web technologies over the popularity of particular web stacks. Its
independent modules, relatively small size, and simple output all work to make the kit extremely portable.

** Adaptability

QuarkSuite Core aims to grow or shrink according to your needs. Its functional nature makes it straightforward to use
and extend as you see fit.

** Invisibility

This project is a means to an end: creating design tokens. I don't want its processes to call attention to themselves or
its design to get in your way. Use what you need and leave the rest.

** Interoperability

QuarkSuite Core is built to work with what already exists in the design token and UI theming space. It can be used on
its own, but its schema is nothing but a plain object.

This makes it particularly suited for integration with design tools that use their /own/ schemas (such as [[https://tailwindcss.com/][TailwindCSS]]
and [[https://amzn.github.io/style-dictionary/][Style Dictionary]]).

** Stability

Where applicable, this project aims to adhere as closely as possible to current and emerging web standards. From its use
of standard CSS color formats to its avoidance of bleeding-edge syntax.

* Credit

+ Color conversion math and formulas
  - hex, rgb, hsl: [[https://www.rapidtables.com/convert/color/index.html][RapidTables]]
  - cmyk, hwb: [[https://drafts.csswg.org/css-color-4/][W3C CSS Color Module 4]] (though, as of this writing, =device-cmyk()= is bumped to Color Module 5)
  - lab, lch: [[http://www.brucelindbloom.com/index.html?Math.html][Bruce Lindbloom]]
  - oklab, oklch: [[https://bottosson.github.io/posts/oklab/][Bj√∂rn Ottosson]] (the creator of the Oklab color space)
+ Color perception simulators
  - color vision deficiency: [[https://github.com/DaltonLens/libDaltonLens][libDaltonLens]]
  - correlated color temperature (CCT): [[https://github.com/m-lima/temperagb][temperargb]]
+ Built-in datasets:
  - Named colors: [[https://www.w3.org/wiki/CSS/Properties/color/keywords][W3C Wiki]]
  - System font stacks: [[https://systemfontstack.com][System Font Stack]]
+ design token schema: [[https://styled-system.com/theme-specification/][Styled System]] and [[https://amzn.github.io/style-dictionary/#/tokens][Style Dictionary]]
