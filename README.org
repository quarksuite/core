#+TITLE: Quarks System Core
#+AUTHOR: Chatman R. Jr
#+DATE: <2021-02-15 Mon>
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:deno :results output none
#+PROPERTY: header-args:shell :results output code

* Intro :noexport:

This repository is part of a of toolkit for creating, assembling, and distributing design systems under
the collective name of QuarkSuite.

Other arms of the project include:

+ Quarks System Language: A domain-specific language for codify design language into design systems
+ Quarks System UI: A UI kit for design system documentation and visual development
+ Quarks System Development Environment: A complete development environment integrating all of the
  above and some extras

If you're interested in how this project evolved, feel free to browse the repository for QuarkSuite 1.

* Summary :noexport:

The Quarks System Core is the oldest and most mature part of QuarkSuite. It's been refined from
QuarkSuite 1 to serve as an engine powering the rest of the kit.

That said, it can still be used as a standalone library if your needs are simple, you require
absolute control, or you want to develop your own design system workflow from QSC.

* Installation :noexport:
* Features :noexport:
* API

The API is organized by the kind of data each of the functions accepts.

This means you can jump right to the section for what you need to do. The literate style isn't for
everyone, so headings are appropriately marked with their source location in the repo if you prefer
to get right into code.

** How to Read the API :noexport:

Each section is broken down into:

+ functions: the actual function definitions with developer commentary
+ Tests: proving each function does its job and doesn't choke on the unexpected
+ Scenarios: demonstrating use and applicable design patterns

** Index                                                             :TOC@3:
- [[#api][API]]
  - [[#utilities-srcutilitiesindexjs][Utilities (=src/utilities/index.js=)]]
    - [[#compose-srcutilitiescomposejs][compose (=src/utilities/compose.js=)]]
    - [[#pipe-srcutilitiespipejs][pipe (=src/utilities/pipe.js=)]]
    - [[#bind-srcutilitiesbindjs][bind (=src/utilities/bind.js=)]]
    - [[#tests][Tests]]
    - [[#scenarios][Scenarios]]

** Utilities (=src/utilities/index.js=)

#+BEGIN_SRC deno :tangle "./src/utilities/index.js" :comments link
/** Functional Utilities */
export * from "./compose.js";
export * from "./pipe.js";
export * from "./bind.js";

#+END_SRC

The Quarks System Core rests on a functional foundation. It uses a data-last architecture and the following
utilities are designed to take full advantage of this decision.

*** compose (=src/utilities/compose.js=)

+ =compose: (...operators) => (data) => unknown=
+ =operators: Array<(data: unknown) => unknown>=: a sequence of data operators
+ =data: unknown=: the data to process

#+BEGIN_SRC deno :tangle "./src/utilities/compose.js" :comments link
import { ErrorTemplate } from "../internals/error.js";

// Error handling
const isFunction = (x) => typeof x === "function";
const hasArity1 = (x) => x.length === 1;

/** Error thrown when value is not a function. */
const FuncError = (output) =>
  ErrorTemplate({
    message: "not a function",
    reason: `
This error indicates that one or more of the values is not a
function, so it can't be composed.
`,
    suggestion: `
Check that every value in your composition chain is a function.
`,
    output,
  });

/** A predicate for stating that x has a single argument. */
const ArityError = (output) =>
  ErrorTemplate({
    message: "not a data operator",
    reason: `
This error indicates that one or more of the functions is
not a data operator. That is, not a single argument function.
`,
    suggestion: `
Check that every function in your composition chain has an arity of 1.
Ex: (data: any) => any
`,
    output,
  });

/** A variadic functional composition */
export function compose(...operators) {
  return (data) =>
    operators.reduce((value, func) => {
      if (!isFunction(func)) return FuncError(func);
      if (!hasArity1(func)) return ArityError(func);
      return func(value);
    }, data);
}
#+END_SRC

Two conditions must be met for compose to work:

+ all operators must be functions
+ all operations must have a signature of =(x: unknown) â†’ unknown=

*** pipe (=src/utilities/pipe.js=)

+ =(data, ...operators) => unknown=
+ =data: unknown=: the data to pass through the pipeline
+ =...operators: Array<(data: unknown) => unknown>=: a sequence of data operators

#+BEGIN_SRC deno :tangle "./src/utilities/pipe.js" :comments link
import { compose } from "./compose.js";

/** A data transformation utility */
export function pipe(data, ...operators) {
  return compose(...operators)(data);
}
#+END_SRC

=pipe= inverts the relationship between data and its operators. This is crucial: data pipelines,
because of the way they're defined can /themselves/ be bound. Data, rather than being the remaining
argument, becomes the /initial/ argument and its operators can be applied freely after.

As you can see, it's a reimplementation of =compose= but with the data as the initial argument and
immediately executes on call.

*** bind (=src/utilities/bind.js=)

+ =(func, ...initial) => (...remaining) => unknown=
+ =func: (...args: unknown) => unknown=: the function to initialize
+ =initial: unknown[]=: the initial arguments to bind
+ =remaining: unknown[]=: the remaining arguments to bind

#+BEGIN_SRC deno :tangle "./src/utilities/bind.js" :comments link
/** A function decomposition utility */
export function bind(func, ...initial) {
  return (func.length === initial.length)
    ? func(...initial)
    : ((...remaining) => func(...initial, ...remaining));
}
#+END_SRC

Composition and data piping work out of the box for simple unary functions, but what about
functions with more than one argument?

In a data-last architecture, the final argument of a function is /always/ its data.

Any preceding arguments are *data modifiers*.

Using the =bind= utility, a function with a signature of =(z, y, x) => any= will break down to: =(z,
y) => (x) => any= or =(z) => (y) => (x) => any=.

The remaining data operation satisfies the =parity = 1= clause for composition.

*** Tests

**** assertions

#+BEGIN_SRC deno :tangle "./src/utilities/index_test.js" :comments link
import { bind, compose, pipe } from "./index.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

const isString = (x) => typeof x === "string";
const isArray = (x) => Array.isArray(x);

const upper = (x) => isString(x) && x.toUpperCase();
const lower = (x) => isString(x) && x.toLowerCase();

const trim = (x) => isString(x) && x.trim();

const split = (x) => isString(x) && x.split("");

const box = (x) => [x];
const unbox = (x) => isArray(x) && x.toString();

Deno.test("SPEC compose: combines two data operators", function () {
  const splitSafe = compose(split, unbox);
  assertEquals(splitSafe("hello"), "h,e,l,l,o");
});

Deno.test("SPEC compose: can combine a chain of data operators", function () {
  const upperSplitSafe = compose(trim, upper, split);
  assertEquals(upperSplitSafe("   hello      "), ["H", "E", "L", "L", "O"]);
});

Deno.test("EDGE compose: rejects values that are not functions", function () {
  const failsFuncClause = compose(split, 5);
  assertThrows(
    () => {
      throw failsFuncClause("hello");
    },
    undefined,
    "not a function",
  );
});

Deno.test(
  "EDGE compose: rejects functions that are not data operators",
  function () {
    const add = (y, x) => x + y;
    const failsUnaryClause = compose(split, upper, add);
    assertThrows(
      () => {
        throw failsUnaryClause("hello");
      },
      undefined,
      "not a data operator",
    );
  },
);

Deno.test("SPEC pipe: can transform data", function () {
  assertEquals(pipe("hello", upper), "HELLO");
});

Deno.test("SPEC pipe: can chain operators", function () {
  assertEquals(
    pipe(
      "hello",
      split,
      (x) => x.map((xs) => xs.charCodeAt(0)),
      (x) => x.map((xs) => xs + 16),
      (x) => x.map((xs) => String.fromCharCode(xs)),
      (x) => x.join(""),
    ),
    "xu||\x7f",
  );
});

const splitWith = (delimiter, x) => isString(x) && x.split(delimiter);
const filterAs = (condition, x) => isArray(x) && x.filter(condition);
const map = (transform, x) => box(x).map(transform);

const normalize = (b, a, x) => Math.round(Math.min(Math.max(x, a), b));

Deno.test("SPEC bind: can initialize arguments and wait for remaining", function () {
  const filterEven = bind(filterAs, (x) => x % 2 === 0);
  assertEquals(filterEven([1, 2, 3, 4, 5, 6, 7, 8, 9]), [2, 4, 6, 8]);
});

Deno.test("SPEC bind: initialize arguments in sequence for a full curry", function () {
  const limit = bind(normalize, 240);
  const threshold = bind(limit, 160);
  assertEquals(threshold(320), 240);
});

Deno.test("SPEC bind: when initial arguments match function arity, simply execute", function () {
  const boundMap = bind(map, (x, i) => `mapped ${x} at ${i}`, [
    ...Array(8).fill("hi"),
  ]);
  const standardMap = map((x, i) => `mapped ${x} at ${i}`, [
    ...Array(8).fill("hi"),
  ]);
  assertEquals(boundMap, standardMap);
});
#+END_SRC

**** results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./src/utilities/index_test.js)
#+END_SRC

#+begin_src shell
running 9 tests
test SPEC compose: combines two data operators ... ok (4ms)
test SPEC compose: can combine a chain of data operators ... ok (1ms)
test EDGE compose: rejects values that are not functions ... ok (2ms)
test EDGE compose: rejects functions that are not data operators ... ok (2ms)
test SPEC pipe: can transform data ... ok (2ms)
test SPEC pipe: can chain operators ... ok (1ms)
test SPEC bind: can initialize arguments and wait for remaining ... ok (2ms)
test SPEC bind: initialize arguments in sequence for a full curry ... ok (1ms)
test SPEC bind: when initial arguments match function arity, simply execute ... ok (2ms)

test result: ok. 9 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (20ms)

#+end_src

*** Scenarios
* Internals                                                        :noexport:

This section documents and implements useful internal functions that aid in developing the core
itself. They are not publicly accessible. The only reason you'd want to read this section is if
you're interested in the nuts and bolts of this project.

** error (=src/internals/error.js=)

#+BEGIN_SRC deno :tangle "./src/internals/error.js" :comments link
/** Error message template */
export function ErrorTemplate(
  { message, reason, suggestion, output } = {
    message: "something went wrong",
    reason: "here's why",
    suggestion: "try this",
    output: undefined,
  },
) {
  throw new Error(`
ERROR: ${message.trimEnd()}
${"=".repeat(60)}
REASON: ${reason.trimEnd()}
TRY: ${suggestion.trimEnd()}
${"-".repeat(60)}
OUTPUT: ${output};
`);
}
#+END_SRC

I believe in the power of good error messages in helping developers solve their own problems. Human-readable errors also decrease the likelihood that you'll need to consult documentation during your workflow.

The format of error messages thrown by the core is straightforward.

#+BEGIN_SRC text

ERROR: something went wrong
============================================================
REASON: here's why
TRY: troubleshooting suggestions
------------------------------------------------------------
OUTPUT: "and what actually happened";

#+END_SRC

* Data :noexport:

This section documents lookup tables and other hardcoded bits of data used by the core modules.

** Color

*** W3C X11 Color Definitions (=src/data/color/w3c-x11.js=)

This is a lookup table for [[http://www.w3.org/TR/css3-color/#svg-color][all named CSS colors]] as of the CSS4 module updates.

#+BEGIN_SRC deno :tangle "./src/data/color/w3c-x11.js" :comments link
/** X11 color names: https://www.w3.org/TR/css3-color/#svg-color */
export const X11Colors = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflower: "#6495ed",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  gold: "#ffd700",
  goldenrod: "#daa520",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  laserlemon: "#ffff54",
  lavender: "#e6e6fa",
  lavenderblush: "#fff0f5",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrod: "#fafad2",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  maroon2: "#7f0000",
  maroon3: "#b03060",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  purple2: "#7f007f",
  purple3: "#a020f0",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32",
};
#+END_SRC

*** Accesible Web Defaults (=src/data/color/a11y.js=)

This is a lookup table for [[http://clrs.cc][better web defaults]] optimized for accessibility.

#+BEGIN_SRC deno :tangle "./src/data/color/a11y.js" :comments link
/** Better web default colors: http://clrs.cc */
export const A11yColors = {
  navy: "#001f3f",
  blue: "#0074d9",
  aqua: "#7fdbff",
  teal: "#39cccc",
  olive: "#3d9970",
  green: "#2ecc40",
  lime: "#01ff70",
  yellow: "#ffdc00",
  orange: "#ff851b",
  red: "#ff4136",
  maroon: "#85144b",
  fuchsia: "#f012be",
  purple: "#b10dc9",
  black: "#111111",
  gray: "#aaaaaa",
  grey: "#aaaaaa",
  silver: "#dddddd",
  white: "#ffffff",
};
#+END_SRC

** Typography

*** System Font Stacks (=src/data/typography/system.js=)

This is a lookup table for [[https://systemfontstack.com][system font stacks]] for use by themselves or attached to the end of a font
stack to provide better fallbacks than =sans-serif=, =serif=, or =monospace=.

#+BEGIN_SRC deno :tangle "./src/data/typography/system.js" :comments link
/** System font stacks: https://systemfontstack.com */
const SystemFontStacks = {
  "sans-serif":
    "-apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif",
  serif:
    "Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol",
  monospace:
    "Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace",
};
#+END_SRC
