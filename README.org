#+TITLE: Quarks System Core (QSC)
#+AUTHOR: Chatman R. Jr
#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:deno :results output none
#+PROPERTY: header-args:shell :results output code

This repository is part of a toolkit for creating, assembling, and distributing design systems. The
whole kit lives under the umbrella of the QuarkSuite name.

It's built for modern JavaScript environments and slots neatly into [[https://buildless.site/ ][buildless project workflows]].

Other appendages of QuarkSuite include:

+ Quarks System Language (QSL): A domain-specific language for codifying design language into design
  tokens (TBD)
+ Quarks System User Interface (QSUI): A UI kit for design token documentation and visual
  development (WIP)
+ Quarks System Development Environment (QSDE): A complete development environment for design system
  authoring and management (TBD)

If you're interested in how this project evolved, feel free to [[https://github.com/quarksuite/legacy][browse the repository for Quarksuite 1]].

* Table of Contents                                                   :TOC@6:
- [[#summary][Summary]]
- [[#features][Features]]
  - [[#color-palettes][Color Palettes]]
  - [[#modular-scales][Modular Scales]]
  - [[#token-formats][Token Formats]]
  - [[#workflow][Workflow]]
- [[#getting-started][Getting Started]]
- [[#installation][Installation]]
  - [[#kitchen-sink][Kitchen Sink]]
  - [[#modular][Modular]]
  - [[#webpackrollup][Webpack/Rollup]]
- [[#examples][Examples]]
  - [[#bleeding-edge-chromium-87][Bleeding Edge (Chromium 87+)]]
    - [[#indexhtml][index.html]]
  - [[#deno-160][Deno (1.6.0+)]]
    - [[#buildjs][build.js]]
    - [[#deno-run][deno run]]
  - [[#node-14160][Node (14.16.0+)]]
    - [[#setup][Setup]]
    - [[#indexjs][index.js]]
    - [[#build][Build]]
  - [[#output][Output]]
- [[#user-guide][User Guide]]
  - [[#basics][Basics]]
    - [[#requirements][Requirements]]
    - [[#color][Color]]
      - [[#1-set-a-base-color][1. set a base color]]
      - [[#2-generate-a-color-scheme][2. generate a color scheme]]
      - [[#3-complete-the-palette][3. complete the palette]]
    - [[#typography][Typography]]
      - [[#1-set-fonts-and-styles][1. set fonts and styles]]
      - [[#2-creating-a-text-size-scale][2. creating a text size scale]]
    - [[#layout][Layout]]
      - [[#1-create-a-measureline-length-scale][1. create a measure/line length scale]]
      - [[#2-create-vertical-rhythmspacing-scale][2. create vertical rhythm/spacing scale]]
  - [[#design-tokens][Design Tokens]]
    - [[#interlude-quarks-system-dictionary][Interlude: Quarks System Dictionary]]
      - [[#value][Value]]
      - [[#scale][Scale]]
      - [[#subcategory][Subcategory]]
      - [[#hierarchy][Hierarchy]]
        - [[#context][Context]]
        - [[#namespace][Namespace]]
    - [[#assemble][Assemble]]
    - [[#build-1][Build]]
    - [[#output-1][Output]]
      - [[#tokenscss][tokens.css]]
      - [[#tokensjson][tokens.json]]
  - [[#recap][Recap]]
  - [[#introduction-to-advanced-concepts][Introduction to Advanced Concepts]]
    - [[#bound-utilities][Bound Utilities]]
    - [[#data-pipelines][Data Pipelines]]
    - [[#configurationsformulas][Configurations/Formulas]]
  - [[#applying-advanced-concepts][Applying Advanced Concepts]]
    - [[#formulasjs][formulas.js]]
      - [[#requirements-1][Requirements]]
      - [[#color-1][Color]]
        - [[#1-create-a-palette-formula][1. create a =Palette= formula]]
      - [[#typography-1][Typography]]
        - [[#1-create-a-stack-formula][1. create a =Stack= formula]]
        - [[#2-create-a-content-configuration][2. create a =Content= configuration]]
        - [[#3-use-the-content-configuration-to-create-a-size-formula][3. use the =Content= configuration to create a =Size= formula]]
      - [[#layout-1][Layout]]
        - [[#1-create-a-measure-formula][1. create a =Measure= formula]]
        - [[#2-use-the-content-configuration-to-create-a-spacing-formula][2. use the =Content= configuration to create a =Spacing= formula]]
    - [[#dictjs][dict.js]]
      - [[#1-import-the-formulas-and-define-settings][1. import the formulas and define settings]]
      - [[#2-construct-the-dictionary][2. construct the dictionary]]
    - [[#buildjs-1][build.js]]
      - [[#1-import-token-functions-and-dictionary][1. import token functions and dictionary]]
      - [[#2-build-tokens][2. build tokens]]
    - [[#run][run]]
- [[#source-code][Source Code]]
  - [[#module-api][Module API]]
    - [[#utilities-utilitiesjs][Utilities (=utilities.js=)]]
      - [[#compose][compose]]
      - [[#pipe][pipe]]
      - [[#tests][Tests]]
        - [[#utilities-assertions][Utilities Assertions]]
        - [[#utilities-results][Utilities Results]]
    - [[#color-colorjs][Color (=color.js=)]]
      - [[#format-conversion-color_convertjs][Format Conversion (=color_convert.js=)]]
        - [[#hex][hex]]
        - [[#rgb][rgb]]
        - [[#hsl][hsl]]
        - [[#cmyk][cmyk]]
        - [[#hwb][hwb]]
        - [[#lab][lab]]
        - [[#lch][lch]]
        - [[#oklab][oklab]]
        - [[#tests-1][Tests]]
          - [[#color-format-conversion-assertions][Color Format Conversion Assertions]]
          - [[#color-format-conversion-results][Color Format Conversion Results]]
      - [[#properties-adjustment-color_adjustjs][Properties Adjustment (=color_adjust.js=)]]
        - [[#hue][hue]]
        - [[#saturation][saturation]]
        - [[#lightness][lightness]]
        - [[#alpha][alpha]]
        - [[#tests-2][Tests]]
          - [[#color-adjustment-assertions][Color Adjustment Assertions]]
          - [[#color-adjustment-results][Color Adjustment Results]]
      - [[#mixing-color_mixjs][Mixing (=color_mix.js=)]]
        - [[#mix][mix]]
        - [[#tests-3][Tests]]
          - [[#color-mixing-assertions][Color Mixing Assertions]]
          - [[#color-mixing-results][Color Mixing Results]]
      - [[#scheme-generation-color_schemejs][Scheme Generation (=color_scheme.js=)]]
        - [[#complementary][complementary]]
        - [[#analogous][analogous]]
        - [[#splitcomplementary][splitComplementary]]
        - [[#triadic][triadic]]
        - [[#tetradic][tetradic]]
        - [[#square][square]]
        - [[#custom][custom]]
        - [[#tests-4][Tests]]
          - [[#color-scheme-generation-assertions][Color Scheme Generation Assertions]]
          - [[#color-scheme-generation-results][Color Scheme Generation Results]]
      - [[#palette-creation-color_palettejs][Palette Creation (=color_palette.js=)]]
        - [[#tints][tints]]
        - [[#tones][tones]]
        - [[#shades][shades]]
        - [[#tests-5][Tests]]
          - [[#color-palette-assertions][Color Palette Assertions]]
          - [[#color-palette-results][Color Palette Results]]
      - [[#accessibility-color_a11yjs][Accessibility (=color_a11y.js=)]]
        - [[#clrs][clrs]]
        - [[#contrast][contrast]]
        - [[#tests-6][Tests]]
          - [[#color-accessibility-assertions][Color Accessibility Assertions]]
          - [[#color-accessibility-results][Color Accessibility Results]]
    - [[#typography-typographyjs][Typography (=typography.js=)]]
      - [[#systemfonts][systemfonts]]
      - [[#tests-7][Tests]]
        - [[#typography-assertions][Typography Assertions]]
        - [[#typography-results][Typography Results]]
    - [[#modular-scale-modular_scalejs][Modular Scale (=modular_scale.js=)]]
      - [[#create][create]]
      - [[#update][update]]
      - [[#merge][merge]]
      - [[#chunk][chunk]]
      - [[#units][units]]
      - [[#tests-8][Tests]]
        - [[#modular-scale-assertions][Modular Scale Assertions]]
        - [[#modular-scale-results][Modular Scale Results]]
    - [[#design-token-output-formats-design_tokensjs][Design Token Output Formats (=design_tokens.js=)]]
      - [[#css-output_cssjs][CSS (=output_css.js=)]]
        - [[#css][css]]
        - [[#sass][sass]]
        - [[#less][less]]
        - [[#styl][styl]]
        - [[#tests-9][Tests]]
          - [[#css-format-assertions][CSS Format Assertions]]
          - [[#css-format-results][CSS Format Results]]
      - [[#data-export-export_datajs][Data Export (=export_data.js=)]]
        - [[#raw][raw]]
        - [[#yaml][yaml]]
        - [[#tests-10][Tests]]
          - [[#data-export-assertions][Data Export Assertions]]
          - [[#data-export-results][Data Export Results]]
      - [[#data-transforms-transform_datajs][Data Transforms (=transform_data.js=)]]
        - [[#tailwind][tailwind]]
        - [[#styledict][styledict]]
        - [[#tests-11][Tests]]
          - [[#data-transform-assertions][Data Transform Assertions]]
          - [[#data-transform-results][Data Transform Results]]
  - [[#internals][Internals]]
    - [[#error-handling-internalserrorjs][Error Handling (=internals/error.js=)]]
    - [[#color-2][Color]]
      - [[#formats-internalscolorformatindexjs][Formats (=internals/color/format/index.js=)]]
        - [[#rgb-hex-internalscolorformathexjs][RGB Hex (=internals/color/format/hex.js=)]]
          - [[#hex-validator][Hex Validator]]
          - [[#hex-value-extractor][Hex Value Extractor]]
        - [[#w3c-x11-internalscolorformatnamedjs][W3C-X11 (=internals/color/format/named.js=)]]
        - [[#functional-rgb-internalscolorformatrgbjs][Functional RGB (=internals/color/format/rgb.js=)]]
          - [[#rgb-validator][RGB Validator]]
          - [[#rgb-extractor][RGB Extractor]]
        - [[#functional-hsl-internalscolorformathsljs][Functional HSL (=internals/color/format/hsl.js=)]]
          - [[#hsl-validator][HSL Validator]]
          - [[#hsl-extractor][HSL Extractor]]
        - [[#device-cmyk-internalscolorformatdevice-cmykjs][Device CMYK (=internals/color/format/device-cmyk.js=)]]
          - [[#cmyk-validator][CMYK Validator]]
          - [[#cmyk-extractor][CMYK Extractor]]
        - [[#functional-hwb-internalscolorformathwbjs][Functional HWB (=internals/color/format/hwb.js=)]]
          - [[#hwb-validator][HWB Validator]]
          - [[#hwb-extractor][HWB Extractor]]
        - [[#functional-cielab-internalscolorformatlabjs][Functional CIELAB (=internals/color/format/lab.js=)]]
          - [[#cielab-validator][CIELAB Validator]]
          - [[#cielab-extractor][CIELAB Extractor]]
        - [[#functional-cielchab-internalscolorformatlchjs][Functional CIELCh(ab) (=internals/color/format/lch.js=)]]
          - [[#cielchab-validator][CIELCh(ab) Validator]]
          - [[#cielchab-extractor][CIELCh(ab) Extractor]]
        - [[#oklab-lch-internalscolorformatoklabjs][Oklab (LCh) (=internals/color/format/oklab.js=)]]
          - [[#oklab-lch-validator][Oklab (LCh) Validator]]
          - [[#oklab-lch-extractor][Oklab (LCh) Extractor]]
      - [[#conversion-internalscolorconvertindexjs][Conversion (=internals/color/convert/index.js=)]]
        - [[#setup-internalscolorconvertsetupjs][Setup (=internals/color/convert/setup.js=)]]
          - [[#hex-rgb-fragments][Hex RGB Fragments]]
          - [[#math][Math]]
        - [[#rgb-hex-conversion-internalscolorconverthexjs][RGB Hex Conversion (=internals/color/convert/hex.js=)]]
          - [[#rgb-hex---functional-rgb-hexrgb][RGB Hex -> Functional RGB (=hex.rgb=)]]
        - [[#w3c-x11-conversion-internalscolorconvertnamedjs][W3C-X11 Conversion (=internals/color/convert/named.js=)]]
          - [[#rgb-hex---w3c-x11][RGB Hex <- W3C-X11]]
        - [[#functional-rgb-conversion-internalscolorconvertrgbjs][Functional RGB Conversion (=internals/color/convert/rgb.js=)]]
          - [[#rgb-conversion-setup][RGB Conversion Setup]]
          - [[#rgb-hex---functional-rgb-rgbhex][RGB Hex <- Functional RGB (=rgb.hex=)]]
          - [[#functional-rgb---functional-hsl-rgbhsl][Functional RGB -> Functional HSL (=rgb.hsl=)]]
          - [[#functional-rgb---device-cmyk-rgbcmyk][Functional RGB -> Device CMYK (=rgb.cmyk=)]]
          - [[#functional-rgb---functional-hwb-rgbhwb][Functional RGB -> Functional HWB (=rgb.hwb=)]]
          - [[#functional-rgb---functional-cielab-rgblab][Functional RGB -> Functional CIELAB (=rgb.lab=)]]
          - [[#functional-rgb---oklab-lch-rgboklab][Functional RGB -> Oklab (LCh) (=rgb.oklab=)]]
        - [[#functional-hsl-conversion-internalscolorconverthsljs][Functional HSL Conversion (=internals/color/convert/hsl.js=)]]
          - [[#functional-rgb---functional-hsl-hslrgb][Functional RGB <- Functional HSL (=hsl.rgb=)]]
        - [[#device-cmyk-conversion-internalscolorconvertdevice-cmykjs][Device CMYK Conversion (=internals/color/convert/device-cmyk.js=)]]
          - [[#functional-rgb---device-cmyk-cmykrgb][Functional RGB <- Device CMYK (=cmyk.rgb=)]]
        - [[#functional-hwb-conversion-internalscolorconverthwbjs][Functional HWB Conversion (=internals/color/convert/hwb.js=)]]
          - [[#functional-rgb---functional-hwb-hwbrgb][Functional RGB <- Functional HWB (=hwb.rgb=)]]
        - [[#functional-cielab-conversion-internalscolorconvertlabjs][Functional CIELAB Conversion (=internals/color/convert/lab.js=)]]
          - [[#cielab-conversion-setup][CIELAB Conversion Setup]]
          - [[#functional-rgb---functional-cielab-labrgb][Functional RGB <- Functional CIELAB (=lab.rgb=)]]
          - [[#functional-cielab---functional-cielchab-lablch][Functional CIELAB -> Functional CIELCh(ab) (=lab.lch=)]]
        - [[#functional-cielch-conversion-internalscolorconvertlchjs][Functional CIELCh Conversion (=internals/color/convert/lch.js=)]]
          - [[#functional-cielab---functional-cielchab-lchlab][Functional CIELAB <- Functional CIELCh(ab) (=lch.lab=)]]
        - [[#oklab-lch-conversion-internalscolorconvertoklabjs][Oklab (LCh) Conversion (=internals/color/convert/oklab.js=)]]
  - [[#data][Data]]
    - [[#color-3][Color]]
      - [[#w3c-x11-color-definitions-datacolorw3c-x11js][W3C X11 Color Definitions (=data/color/w3c-x11.js=)]]
      - [[#accesible-web-defaults-datacolora11yjs][Accesible Web Defaults (=data/color/a11y.js=)]]
    - [[#typography-2][Typography]]
      - [[#system-font-stacks-datatypographysystemjs][System Font Stacks (=data/typography/system.js=)]]

* Summary

Quarks System Core is the oldest and most mature part of QuarkSuite. It's been refined from
QuarkSuite 1 to serve as the engine of the kit.

That said, it can still be used as a standalone library if your needs are simple, you require
absolute control, or you want to develop a custom design system workflow from a QSC baseline.

Keep in mind that the core is /not/ bundled or minified. I leave that to your own needs.

* Features

** Color Palettes

+ Convert to/from any valid CSS color format (current and upcoming)
+ Adjust properties and create mixtures
+ Generate basic and advanced schemes
+ Create tints, tones, and shades
+ Use accessible default colors from the Colors project
+ Ensure accessible palettes by comparing contrast ratios against WCAG recommendations

** Modular Scales

+ Create modular scales
+ Update values with desired calculation formulas
+ Merge and split modular scales
+ Attach any valid CSS units

** Token Formats

+ Stylesheet formats (vanilla CSS custom properties, Sass/Less/Stylus preprocessor
  variables)
+ General data as raw JSON/YAML
+ Tool integrations (TailwindCSS themes, Style Dictionary properties)

** Workflow

+ Supports and encourages function composition and data pipelines
+ Construct data through simple types: values (strings) and scales (array of values)
+ Assemble nestable dictionary objects to use as-is or export as design tokens
+ Create axiomatic configurations and formulas to use across projects

* Getting Started

If you only want to try things out, paste the following line in the console of your preferred development browser.

#+BEGIN_SRC js
const quarks = await import("https://x.nest.land/quarksuite:core@0.1.1/mod.js");
#+END_SRC

Execute it, and now you have access to every bit of the core to play with once it loads.

* Installation

For modern v8 environments, there's nothing to install. All you need is the package URL.

** Kitchen Sink

You can import the whole library under a namespace or pick out the functions you need.

#+BEGIN_SRC js
import * as quarks from "https://x.nest.land/quarksuite:core@0.1.1/mod.js";
#+END_SRC

** Modular

You can also import just the parts of the library you need from any of its module entry points.

#+BEGIN_SRC js
import {
  hex,
  triadic
  tints,
  shades
} from "https://x.nest.land/quarksuite:core@0.1.1/color.js";
#+END_SRC

** Webpack/Rollup

If you're still not quite convinced that buildless is the way forward, the ever awesome @egoist
created a [[https://github.com/egoist/import-http][Webpack/Rollup plugin]] to allow package imports from source code URLs. This allows the
above code to work without any additional steps.

* Examples

** Bleeding Edge (Chromium 87+)

If you're using Quarks System Core in Chromium 87+ with HTTPS, you have everything you need to
create a basic set of design tokens right in the browser thanks to the experimental [[https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API ][File System
Access API]].

*** index.html

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="Starter Snowpack App" />
    <title>Quarks System Core Bleeding Edge Example</title>
    <style>
      label,
      textarea,
      button {
        display: block;
        margin: 1rem 0;
      }
    </style>
  </head>
  <body>
    <h1>Quarks System Core Example (Chromium 87+)</h1>
    <form action="">
      <label for="dict">Input Dictionary</label>
      <textarea id="dict" name="dict" rows="24" cols="80" readonly></textarea>
      <label for="css-data">Output CSS</label>
      <textarea
        id="css-data"
        name="css-data"
        rows="24"
        cols="80"
        readonly
      ></textarea>
      <button type="button" id="save-data">Save Data</button>
    </form>
    <script type="module">
      import {
        create,
        css,
        hex,
        raw,
        shades,
        systemfonts,
        tints,
        units,
      } from "https://x.nest.land/quarksuite:core@0.1.1/mod.js";

      // Palette
      const main = hex("gainsboro");
      const tint = tints(4, 100, main);
      const shade = shades(4, 100, main);

      // Fonts
      const [sans, mono] = systemfonts("sans-serif", "monospace");

      // Size
      const init = create(8, 1.618, 1);
      const [base, ...scale] = units("rem", init);

      // Quarks System Dictionary
      const dict = {
        color: { main: { base: main, tint, shade } },
        text: { family: { sans, mono }, size: { base, x: scale } },
      };

      // Display input
      document.querySelector("#dict").value = raw(dict);
      const output = css(dict);

      // Display output
      document.querySelector("#css-data").value = output.trimStart();

      // Save output to disk
      document
        .querySelector("#save-data")
        .addEventListener("click", async function (event) {
          // Write to disc. Adapted from: https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API#writing_to_files
          // ---
          // STATUS: draft - supported in bleeding edge Chromium (87+)
          // Requires https

          const data = new Blob([output]);

          // create new handle
          const newHandle = await window.showSaveFilePicker();

          // create a FileSystemWriteableFileStream to write to
          const writeableStream = await newHandle.createWritable();

          // write file
          await writeableStream.write(data);

          // close the file and write contents to disk
          await writeableStream.close();
        });
    </script>
  </body>
</html>
#+END_SRC

If you paste this HTML to a file and open it in a supporting browser, you can choose where to save a
simple collection of design tokens as CSS custom properties and then use them with any web project.

** Deno (1.6.0+)

Using Quarks System Core with Deno isn't much different than using it on the web. The output code
uses Deno's own Filesystem API instead.

*** build.js

#+BEGIN_SRC js
import {
  create,
  css,
  hex,
  raw,
  shades,
  systemfonts,
  tints,
  units,
} from "https://x.nest.land/quarksuite:core@0.1.1/mod.js";

// Palette
const main = hex("gainsboro");
const tint = tints(4, 100, main);
const shade = shades(4, 100, main);

// Fonts
const [sans, mono] = systemfonts("sans-serif", "monospace");

// Size
const init = create(8, 1.618, 1);
const [base, ...scale] = units("rem", init);

// Quarks System Dictionary
const dict = {
  color: { main: { base: main, tint, shade } },
  text: { family: { sans, mono }, size: { base, x: scale } },
};

// Write to disk
const encoder = new TextEncoder();
const data = encoder.encode(css(dict));

await Deno.writeFile("./tokens.css", data);
#+END_SRC

*** deno run

Next, we run the file with write access.

#+BEGIN_SRC shell
deno run --allow-write ./build.js
#+END_SRC

** Node (14.16.0+)

You'll need Webpack/Rollup as mentioned above.

I'm going to use Rollup for the example.

*** Setup

First, need to set  =type: module= in package.json and declare dependencies.

#+BEGIN_SRC json
{
  "type": "module",
  "devDependencies": {
    "import-http": "^0.3.1",
    "rollup": "^2.42.4"
  }
}
#+END_SRC

Now, install the packages.

#+BEGIN_SRC shell
yarn add rollup import-http --dev
#+END_SRC

Next, setting up the Rollup (=rollup.config.js=) configuration.

#+BEGIN_SRC js
import import_http from "import-http/rollup";

export default {
  input: "index.js",
  output: {
    file: "build.js",
    format: "es",
  },
  plugins: [import_http()],
};
#+END_SRC

*** index.js

From here, the code to build the example mostly mirrors the other environments, with the exception
of using Node's native filesystem API.

#+BEGIN_SRC js
import {
  create,
  css,
  hex,
  raw,
  shades,
  systemfonts,
  tints,
  units,
} from "https://x.nest.land/quarksuite:core@0.1.1/mod.js";

// Palette
const main = hex("gainsboro");
const tint = tints(4, 100, main);
const shade = shades(4, 100, main);

// Fonts
const [sans, mono] = systemfonts("sans-serif", "monospace");

// Size
const init = create(8, 1.618, 1);
const [base, ...scale] = units("rem", init);

// Quarks System Dictionary
const dict = {
  color: { main: { base: main, tint, shade } },
  text: { family: { sans, mono }, size: { base, x: scale } },
};

// Write to disk
import { writeFile } from "node:fs/promises";
await writeFile("./tokens.css", css(dict));
#+END_SRC

*** Build

Now we run Rollup and execute the generated =build.js= script.

#+BEGIN_SRC shell
npx rollup -c && node ./build.js
#+END_SRC

** Output

Regardless of the approach used, we end up with a stylesheet on our file system that looks like the
following:

#+BEGIN_SRC css

:root {
  --color-main: #dcdcdc;
  --color-main-tint-0: #e5e5e5;
  --color-main-tint-1: #eeeeee;
  --color-main-tint-2: #f7f7f7;
  --color-main-tint-3: #ffffff;
  --color-main-shade-0: #bfbfbf;
  --color-main-shade-1: #9c9c9c;
  --color-main-shade-2: #6e6e6e;
  --color-main-shade-3: #000000;
  --text-family-sans: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif;
  --text-family-mono: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;
  --text-size: 1rem;
  --text-size-x-0: 1.618rem;
  --text-size-x-1: 2.618rem;
  --text-size-x-2: 4.236rem;
  --text-size-x-3: 6.854rem;
  --text-size-x-4: 11.09rem;
  --text-size-x-5: 17.94rem;
  --text-size-x-6: 29.03rem;
}
#+END_SRC

Now, you can use the tokens as you wish. Be sure to read the user guide to learn more about what you
can do with Quarks System Core.

* User Guide

This section is meant to demonstrate, step-by-step, the process of creating a set of design tokens
with the Quarks System Core. The tokens we'll create are enough for a basic project.

After that, I'll introduce advanced concepts that allow you to scale your data and make it portable.

** Basics

Every web design project is different, but every design language begins with conversations about
three key concerns: color, typography, and layout.

These are the minimum requirements. Your unique details won't hold up under shoddy scaffolding.

First, create a new JS file and name it =system.js=. We'll put all of our code here.

*** Requirements

#+BEGIN_SRC js
import {
  // Color
  rgb,
  triadic,
  tints,
  shades,

  // Typography
  systemfonts,

  // Layout
  create,
  update,
  units,

  // Tokens
  css,
  raw
} from "https://x.nest.land/quarksuite:core@0.1.1/mod.js";
#+END_SRC

*** Color

Quarks System Core provides a bevy of utilities to help you use the colors and palettes you
want. You'll want to inspect the =color.js= module in a console to see what's available.

Color values are treated as a data type in QSC. It will process /any/ valid CSS color and
includes the following modules:

+ =color.js=: aggregates the below submodules
  - =color_convert.js=: color conversion functions
  - =color_adjust.js=: color property adjustment functions
  - =color_mix.js=: color mixing function
  - =color_scheme.js=: color scheme creation functions
  - =color_palette.js=: color palette variant functions
  - =color_a11y.js=: color accessibility functions

Let's set up our palette.

**** 1. set a base color

First, define a base color. This is typically a brand or identity color.

#+BEGIN_SRC js
const color = rgb("#348ec9");
#+END_SRC

Conversion is accounted for in every function that consumes a color, so you only need to
convert the /base/ color to your desired format to carry it through the palette.

**** 2. generate a color scheme

Now, generate a color scheme from the base.

For our example, we're going to create a triadic color scheme.

#+BEGIN_SRC js
const scheme = triadic(color);
#+END_SRC

**** 3. complete the palette

To complete the palette, generate some tints and shades and then wrap it all in a Quarks System Dictionary.

In this case, we want tints and shades of the main color but only shades of the

#+BEGIN_SRC js
const palette = {
  main: {
    base: scheme[0],
    light: tints(3, 99, scheme[0]),
    dark: shades(2, 99, scheme[0])
  },
  accent: {
    base: scheme[1],
    dark: shades(2, 99, scheme[1])
  },
  highlight: {
    base: scheme[2],
    dark: shades(2, 99, scheme[2])
  },
};
#+END_SRC

*** Typography

Quarks System Core isn't worried about the fonts you use or how you serve them. Instead it provides
a utility for attaching system font stacks under the =typography.js= module.

Most of this section will make use of the =modular_scale.js= module.

Functions under this module:

+ =create()=: create a new scale
+ =update()=: update a scale with a calculation
+ =merge()=: merge two or more scales
+ =chunk()=: split a scale into smaller scales of =n= values
+ =units()=: attach valid CSS units to complete a scale for output

Modular scales are the bread and butter of any robust design system. They define and enforce
consistent values and measurements. The base and ratio ought to remain constant.

The general flow of creating modular scales you can use in real projects:

1) Create a basic, global scale
2) Manipulate the scale as needed by merging or chunking
3) Perform calculations to create additional scales based on context
4) Attach the appropriate units before output

Every following scale adheres to this procedure.

**** 1. set fonts and styles

Create the font dictionary for holding typography data.

For our example, we're using Zilla Slab and Rubik from Google Fonts and attaching appropriate system
fonts as fallbacks. We'll also set a system monospace stack as the code font.

In addition, we'll pass in some raw values for leading and style.

#+BEGIN_SRC js
const font = {
  body: "Zilla Slab".concat(", ", systemfonts("serif")),
  headings: "Rubik".concat(", ", systemfonts("sans-serif")),
  code: systemfonts("monospace"),
  leading: { base: 1.5, tight: 1.25, loose: 1.75 },
  style: { extralight: 100, regular: 400, bold: 700, black: 900 }
};
#+END_SRC

**** 2. creating a text size scale

 Now create the global scale and use it to set a text size subcategory.

Font sizes are derived directly from the global scale. They serve as a logical anchor for derivative
scales. And this is because content is the *base value* informing all layout decisions.

#+BEGIN_SRC js
const values = 8;
const ratio = 1.5;
const base = 1;

const scale = create(values, ratio, base);
const rem = units("rem", scale);
const inversion = update((n) => base / n, scale);
const [b, ...x] = rem;
const [, ...d] = units("em", inversion);

const size = { base: b, x, d };
#+END_SRC

*** Layout

This section is the most opinionated in the whole user guide, because it promotes an approach to
layout based on font-dependent units (ch and ex for width and height respectively).

**** 1. create a measure/line length scale

Layout based on content requires that we define a minimum and maximum measure.

When combined with CSS Grid, this will allow the layout to reflow around the content it contains and
ensure readability.

The [[https://developer.mozilla.org/en-US/docs/Web/CSS/length][=ch= unit in CSS]]:

#+BEGIN_QUOTE
Represents the width, or more precisely the advance measure, of the glyph "0" (zero, the Unicode character U+0030) in the element's font.
#+END_QUOTE

The =ch= unit responds directly to the *current size* of an element's font.

Our example has a minimum measure of =48ch= and a maximum of =72ch=. We'll also generate some
intermediate lengths for special purposes.

#+BEGIN_SRC js
const min = 48;
const max = 72;

const fragment = units(
  "ch",
  update((v) => Math.trunc(min + v - ratio), scale).filter(
    (v) => v > min && v < max
  )
);

const measure = {
  min: units("ch", [min]).toString(),
  fragment,
  max: units("ch", [max]).toString(),
};
#+END_SRC

**** 2. create vertical rhythm/spacing scale

The vertical dimension of layout based on content requires a measurement of its approximate
x-height.

This scale is used for both setting vertical rhythm and whitespace (margins and padding).

The [[https://developer.mozilla.org/en-US/docs/Web/CSS/length][=ex= unit in CSS]]:

#+BEGIN_QUOTE
Represents the x-height of the element's font. On fonts with the "x" letter, this is generally the height of lowercase letters in the font; 1ex ≈ 0.5em in many fonts.
#+END_QUOTE

Whitespace using the =ex= unit will adjust with the size and attributes of the font in use.

We'll generate from the global scale, this time attaching =ex= units.

#+BEGIN_SRC js
const ex = units("ex", scale);
const [sp, ...spx] = ex;
const [, ...spd] = units("ex", inversion);

const spacing = { base: sp, x: spx, d: spd };
#+END_SRC

** Design Tokens

Finally, all the data must be assembled and then exported as design tokens.

For modular use, Quarks System Core provides the =design_tokens.js= module which contains:

+ Stylesheet formats
  - =css=: outputs tokens as CSS custom properties wrapped in a =:root= selector
  - =sass=: outputs tokens as Sass variables
  - =less=: outputs tokens as Less variables
  - =styl=: outputs tokens as Stylus variables
+ Data exports
  - =raw=: exports data as a raw JSON
  - =yaml=: exports data as YAML
+ Data transforms
  - =tailwind=: transforms data into Tailwind CSS theme data
  - =styledict=: transforms data into Style Dictionary properties

*** Interlude: Quarks System Dictionary

Before building design tokens, all data must be assembled into a standard Quarks System
dictionary object. It's an ordinary JavaScript object with a particular structure for properties.

If you've used Styled System before, the data structure [[https://styled-system.com/theme-specification/][takes heavy inspiration from its spec]].

Quarks System dictionaries also draw their hierachical ideas from [[https://amzn.github.io/style-dictionary/#/properties
][Style Dictionary properties]].

**** Value

A string will be treated as a value and directly translated to a design token.

#+BEGIN_SRC js
const color = { main: "red" };
#+END_SRC

**** Scale

An array will be treated as a scale of values.

#+BEGIN_SRC js
const color = { main: ["red", "crimson", "firebrick"] };
#+END_SRC

**** Subcategory

An object with an internal =base= property defines a subcategory. The base is treated as the
default value of that subcategory with any additional properties as variants or states.

#+BEGIN_SRC js
const color = {
  main: {
    base: "red",
    shade: ["crimson", "firebrick"]
  }
};
#+END_SRC

**** Hierarchy

Every design token function recursively consumes a Quarks System dictionary. Transformations are
performed based on the /kind/ of data found. This frees you to structure dictionaries any way you like.

***** Context

One way is to define a context. Such as having dark and light palettes.

#+BEGIN_SRC js
const color = {
  light: {
    main: {
      base: "red",
      shade: ["crimson", "firebrick"]
    }
  },
  dark: {
    main: {
      base: "lime",
      shade: ["forestgreen", "darkgreen"]
    }
  }
};
#+END_SRC

***** Namespace

You may also want to create an aggregate dictionary that wraps all of your data under a project
namespace.

#+BEGIN_SRC js
const dict = {
  quarks: {
    color: {
      main: "red",
      accent: "cyan",
      highlight: "lime"
    },
    font: {
      body: "sans-serif",
      heading: "serif",
      code: "monospace"
    }
  }
};
#+END_SRC

*** Assemble

Continuing on, we'll wrap all of our data under a namespace of =quarks= with =color=, =text=, and
=content= serving as contexts.

#+BEGIN_SRC js
const dict = {
  quarks: {
    color: palette,
    text: { ...font, size },
    content: { measure, spacing }
  }
};
#+END_SRC

*** Build

For the data we've created, let's export a collection of CSS custom properties as well as some
JSON. This example uses Deno, but you can use the environment and API you prefer.

#+BEGIN_SRC js
const encoder = new TextEncoder();

[
  [css, "./tokens.css"],
  [raw, "./tokens.json"],
].forEach(([fn, file]) => Deno.writeFile(file, encoder.encode(fn(dict))));
#+END_SRC

*** Output

Finally, we execute the file.

#+BEGIN_SRC shell
deno run --allow-write ./system.js
#+END_SRC

This should leave us with the following files:

**** tokens.css

#+BEGIN_SRC css

:root {
  --quarks-color-main: rgb(52, 141, 201);
  --quarks-color-main-light-0: rgb(153, 187, 220);
  --quarks-color-main-light-1: rgb(209, 223, 238);
  --quarks-color-main-light-2: rgb(254, 254, 255);
  --quarks-color-main-dark-0: rgb(37, 100, 142);
  --quarks-color-main-dark-1: rgb(5, 14, 20);
  --quarks-color-accent: rgb(141, 201, 52);
  --quarks-color-accent-dark-0: rgb(100, 142, 37);
  --quarks-color-accent-dark-1: rgb(14, 20, 5);
  --quarks-color-highlight: rgb(201, 52, 141);
  --quarks-color-highlight-dark-0: rgb(142, 37, 100);
  --quarks-color-highlight-dark-1: rgb(20, 5, 14);
  --quarks-text-body: Zilla Slab, Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;
  --quarks-text-headings: Rubik, -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif;
  --quarks-text-code-0: Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace;
  --quarks-text-leading: 1.5;
  --quarks-text-leading-tight: 1.25;
  --quarks-text-leading-loose: 1.75;
  --quarks-text-style-extralight: 100;
  --quarks-text-style-regular: 400;
  --quarks-text-style-bold: 700;
  --quarks-text-style-black: 900;
  --quarks-text-size: 1rem;
  --quarks-text-size-x-0: 1.5rem;
  --quarks-text-size-x-1: 2.25rem;
  --quarks-text-size-x-2: 3.375rem;
  --quarks-text-size-x-3: 5.063rem;
  --quarks-text-size-x-4: 7.594rem;
  --quarks-text-size-x-5: 11.39rem;
  --quarks-text-size-x-6: 17.09rem;
  --quarks-text-size-d-0: 0.6667em;
  --quarks-text-size-d-1: 0.4444em;
  --quarks-text-size-d-2: 0.2963em;
  --quarks-text-size-d-3: 0.1975em;
  --quarks-text-size-d-4: 0.1317em;
  --quarks-text-size-d-5: 0.08779em;
  --quarks-text-size-d-6: 0.05853em;
  --quarks-content-measure-min: 48ch;
  --quarks-content-measure-fragment-0: 49ch;
  --quarks-content-measure-fragment-1: 51ch;
  --quarks-content-measure-fragment-2: 54ch;
  --quarks-content-measure-fragment-3: 57ch;
  --quarks-content-measure-fragment-4: 63ch;
  --quarks-content-measure-max: 72ch;
  --quarks-content-spacing: 1ex;
  --quarks-content-spacing-x-0: 1.5ex;
  --quarks-content-spacing-x-1: 2.25ex;
  --quarks-content-spacing-x-2: 3.375ex;
  --quarks-content-spacing-x-3: 5.063ex;
  --quarks-content-spacing-x-4: 7.594ex;
  --quarks-content-spacing-x-5: 11.39ex;
  --quarks-content-spacing-x-6: 17.09ex;
  --quarks-content-spacing-d-0: 0.6667ex;
  --quarks-content-spacing-d-1: 0.4444ex;
  --quarks-content-spacing-d-2: 0.2963ex;
  --quarks-content-spacing-d-3: 0.1975ex;
  --quarks-content-spacing-d-4: 0.1317ex;
  --quarks-content-spacing-d-5: 0.08779ex;
  --quarks-content-spacing-d-6: 0.05853ex;
}
#+END_SRC

**** tokens.json

#+BEGIN_SRC json
{
  "quarks": {
    "color": {
      "main": {
        "base": "rgb(52, 141, 201)",
        "light": [
          "rgb(153, 187, 220)",
          "rgb(209, 223, 238)",
          "rgb(254, 254, 255)"
        ],
        "dark": [
          "rgb(37, 100, 142)",
          "rgb(5, 14, 20)"
        ]
      },
      "accent": {
        "base": "rgb(141, 201, 52)",
        "dark": [
          "rgb(100, 142, 37)",
          "rgb(14, 20, 5)"
        ]
      },
      "highlight": {
        "base": "rgb(201, 52, 141)",
        "dark": [
          "rgb(142, 37, 100)",
          "rgb(20, 5, 14)"
        ]
      }
    },
    "text": {
      "body": "Zilla Slab, Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol",
      "headings": "Rubik, -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif",
      "code": [
        "Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace"
      ],
      "leading": {
        "base": 1.5,
        "tight": 1.25,
        "loose": 1.75
      },
      "style": {
        "extralight": 100,
        "regular": 400,
        "bold": 700,
        "black": 900
      },
      "size": {
        "base": "1rem",
        "x": [
          "1.5rem",
          "2.25rem",
          "3.375rem",
          "5.063rem",
          "7.594rem",
          "11.39rem",
          "17.09rem"
        ],
        "d": [
          "0.6667em",
          "0.4444em",
          "0.2963em",
          "0.1975em",
          "0.1317em",
          "0.08779em",
          "0.05853em"
        ]
      }
    },
    "content": {
      "measure": {
        "min": "48ch",
        "fragment": [
          "49ch",
          "51ch",
          "54ch",
          "57ch",
          "63ch"
        ],
        "max": "72ch"
      },
      "spacing": {
        "base": "1ex",
        "x": [
          "1.5ex",
          "2.25ex",
          "3.375ex",
          "5.063ex",
          "7.594ex",
          "11.39ex",
          "17.09ex"
        ],
        "d": [
          "0.6667ex",
          "0.4444ex",
          "0.2963ex",
          "0.1975ex",
          "0.1317ex",
          "0.08779ex",
          "0.05853ex"
        ]
      }
    }
  }
}
#+END_SRC

** Recap

Before demonstrating advanced patterns and features, let's see what we have so far.

#+BEGIN_SRC js
import {
  rgb,
  triadic,
  tints,
  shades,
  systemfonts,
  create,
  update,
  units,
  css,
  raw,
} from "https://x.nest.land/quarksuite:core@0.1.1/mod.js";

// Color

const color = rgb("#348ec9");
const scheme = triadic(color);
const palette = {
  main: {
    base: scheme[0],
    light: tints(3, 99, scheme[0]),
    dark: shades(2, 99, scheme[0]),
  },
  accent: {
    base: scheme[1],
    dark: shades(2, 99, scheme[1]),
  },
  highlight: {
    base: scheme[2],
    dark: shades(2, 99, scheme[2]),
  },
};

// Typography

const font = {
  body: "Zilla Slab".concat(", ", systemfonts("serif")),
  headings: "Rubik".concat(", ", systemfonts("sans-serif")),
  code: systemfonts("monospace"),
  leading: { base: 1.5, tight: 1.25, loose: 1.75 },
  style: { extralight: 100, regular: 400, bold: 700, black: 900 },
};

const values = 8;
const ratio = 1.5;
const base = 1;

const scale = create(values, ratio, base);
const rem = units("rem", scale);
const inversion = update((n) => base / n, scale);
const [b, ...x] = rem;
const [, ...d] = units("em", inversion);

const size = { base: b, x, d };

// Layout

const min = 48;
const max = 72;

const fragment = units(
  "ch",
  update((v) => Math.trunc(min + v - ratio), scale).filter(
    (v) => v > min && v < max
  )
);

const measure = {
  min: units("ch", [min]).toString(),
  fragment,
  max: units("ch", [max]).toString(),
};

const ex = units("ex", scale);
const [sp, ...spx] = ex;
const [, ...spd] = units("ex", inversion);

const spacing = { base: sp, x: spx, d: spd };

// Design Tokens

const dict = {
  quarks: {
    color: palette,
    text: { ...font, size },
    content: { spacing, measure },
  },
};

const encoder = new TextEncoder();

[
  [css, "./tokens.css"],
  [raw, "./tokens.json"],
].forEach(([fn, file]) => Deno.writeFile(file, encoder.encode(fn(dict))));
#+END_SRC

** Introduction to Advanced Concepts

The following sections introduce advanced patterns you can use to refactor the system logic.

*** Bound Utilities

JavaScript provides a built-in way (=Function.bind=) to bind a variadic function's arguments and
return a new *unary function* from the remaining data argument: =f(z, y, x)= to =f(z, y) => g(x)=
for example.

Quarks System Core uses an architecture for its modules where the last argument of a function is
always the data it transforms (=x=). This allows the preceding arguments to be /modifiers/ and once
bound, sets the groundwork for the remaining patterns.

*** Data Pipelines

Data pipelines represent a chain of complex operations performed on a data value. Its main purpose
is providing a generic method of transforming values into scales, but it can also be used to
programmatically assemble dictionaries.

*** Configurations/Formulas

Combining data pipelines with complex data structures and conditional logic gives rise to
configurations and formulas. These are ideal for situations where you have approaches to building
your dictionaries that you want to use across projects or you're otherwise building a framework
around your process.

Think of it as a way of embedding your axioms into code.

** Applying Advanced Concepts

Now, it's time to refactor =system.js= section by section with the above patterns. Without any
changes to the output, the code splits into the following files.

+ =formulas.js=: contains all the system logic embedded into reusable formulas
+ =dict.js=: assembles a Quarks System dictionary from our formulas
+ =build.js=: executed by the runtime environment

*** formulas.js

**** Requirements

First, at the top of the file, import the advanced utilities.

#+BEGIN_SRC js
import {
  compose,
  pipe,
  rgb,
  triadic,
  tints,
  shades,
  systemfonts,
  update,
  units,
} from "https://x.nest.land/quarksuite:core@0.1.1/mod.js";
#+END_SRC

**** Color

***** 1. create a =Palette= formula

The =Palette= formula is a function composition that converts a valid color into its RGB format,
creates a set of triadic base hues, and then slots each color into its own subcategory.

#+BEGIN_SRC js
const light = tints.bind(null, 3, 99);
const dark = shades.bind(null, 2, 99);
export const Palette = compose(rgb, triadic, (scheme) =>
  scheme.reduce((acc, base, index) => {
    const categories = ["main", "accent", "highlight"];
    return {
      ...acc,
      [categories[index]]: {
        base,
        ...(index === 0
            ? { light: light(base), dark: dark(base) }
            : { dark: dark(base) }),
      },
    };
  }, {})
);
#+END_SRC

**** Typography

***** 1. create a =Stack= formula

The =Stack= formula does nothing but set different behavior based on whether the font is explicitly
set to =null=. If it is, only the system stack returns, otherwise the font is prepended to the
system stack as the main font.

#+BEGIN_SRC js
export const Stack = (font, fallback = "sans-serif") =>
font === null
  ? systemfonts(fallback).toString()
  : font.concat(", ", systemfonts(fallback));
#+END_SRC

***** 2. create a =Content= configuration

The =Content= configuration sets up a general abstraction for content-based numeric scales. It
defines them with a subcategory dictionary structure covering scale values and their inversions.

In situations where the inversion units are different from the scale units, it uses that unit instead.

#+BEGIN_SRC js
const toString = (value) => value.toString();
const Content = (unit, inversionUnit, scale) => {
  const [base, ...remaining] = scale;
  return {
    base: pipe([base], unit, toString),
    x: pipe(remaining, unit),
    d: pipe(
      remaining,
      update.bind(null, (n) => base / n),
      inversionUnit !== unit ? inversionUnit : unit
    ),
  };
};
#+END_SRC

***** 3. use the =Content= configuration to create a =Size= formula

#+BEGIN_SRC js
const rem = units.bind(null, "rem");
const em = units.bind(null, "em");
export const Size = Content.bind(null, rem, em);
#+END_SRC

**** Layout

***** 1. create a =Measure= formula

The =Measure= formula accepts a mininum CPL (characters per line), maximum CPL, and a scale to
derive a collection of line fragments from.

#+BEGIN_SRC js
const ch = units.bind(null, "ch");
export const Measure = (min, max, scale) =>
[max, scale, min].reduce((acc, value, index) => {
  const categories = ["base", "fragment", "min"];
  if (Array.isArray(value)) {
    const [, ratio] = value;
    return {
      ...acc,
      [categories[index]]: pipe(
        value.reverse(),
        update.bind(null, (n) => Math.trunc(min + n - ratio)),
        (cpl) => cpl.filter((n) => n > min && n < max),
        ch
      ),
    };
  }

  return { ...acc, [categories[index]]: pipe([value], ch, toString) };
}, {});
#+END_SRC

***** 2. use the =Content= configuration to create a =Spacing= formula

#+BEGIN_SRC js
const ex = units.bind(null, "ex");
export const Spacing = Content.bind(null, ex, ex);
#+END_SRC

*** dict.js

**** 1. import the formulas and define settings

#+BEGIN_SRC js
import { create } from "https://x.nest.land/quarksuite:core@0.1.1/modular_scale.js";
import { Palette, Stack, Size, Measure, Spacing } from "./config.js";

// Settings
const color = "#348ec9";
const scale = create(8, 1.5, 1);
#+END_SRC

**** 2. construct the dictionary

#+BEGIN_SRC js
export default {
  quarks: {
    color: Palette(color),
    text: {
      body: Stack("Zilla Slab", "serif"),
      headings: Stack("Rubik"),
      code: Stack(null, "monospace"),
      leading: { base: 1.5, tight: 1.25, loose: 1.75 },
      style: { extralight: 100, regular: 400, bold: 700, black: 900 },
      size: Size(scale),
    },
    content: { line: Measure(48, 72, scale), spacing: Spacing(scale) },
  },
};
#+END_SRC

*** build.js

**** 1. import token functions and dictionary

#+BEGIN_SRC js
import { exists } from "https://deno.land/std@0.92.0/fs/exists.ts";
import {
  css,
  raw,
} from "https://x.nest.land/quarksuite:core@0.1.1/design_tokens.js";
import { default as dict } from "./dict.js";
#+END_SRC

**** 2. build tokens

#+BEGIN_SRC js
async function main() {
  const encoder = new TextEncoder();
  const path = "tokens";
  const build = () => [
    [css, "index.css"],
    [raw, "index.json"]
  ].forEach(([format, target]) =>
    Deno.writeFile(`${path}/${target}`, encoder.encode(format(dict))));

  if (await exists(path)) {
    build();
  } else {
    await Deno.mkdir(path);
    build();
  }
}

main();
#+END_SRC

*** run

#+BEGIN_SRC shell
deno run --allow-read --allow-write ./build.js
#+END_SRC

* Source Code
** Module API

The API is organized by the kind of data each function accepts.

This means you can jump right to the section for what you need to do. The literate style isn't for
everyone, so headings are appropriately marked with their source location in the repo if you prefer
to leap right into code.

Each section is broken down into:

+ functions: the actual function definitions with developer commentary
+ Tests: proving each function does its job and doesn't choke on the unexpected

As a rule, any files in the project root are public modules while any files in directories are
internal.

Before anything, the package registry expects an entry point:

#+BEGIN_SRC js :tangle "./mod.js" :comments link
export * from "./utilities.js";
export * from "./color.js";
export * from "./typography.js";
export * from "./modular_scale.js";
export * from "./design_tokens.js";
#+END_SRC

*** Utilities (=utilities.js=)

The Quarks System Core rests on a functional foundation. It uses a data-last architecture and the following
utilities are designed to take full advantage of this decision.

**** compose

+ =compose: (...operators: Array<(data: any) => any>) => (data: any) => any=
+ =operators: Array<(data: any) ==> any>=: a sequence of data operators


Two conditions must be met for composition:

+ all operators must be functions
+ all functions must be monadic ( =(data: any) => any=)

#+BEGIN_SRC js :tangle "./utilities.js" :comments link
import { ErrorTemplate } from "./internals/error.js";

// Error handling
const isFunction = (x) => typeof x === "function";

/** Error thrown when value is not a function. */
const FuncError = (output) =>
  ErrorTemplate({
    message: "not a function",
    reason: `
This error indicates that one or more of the values is not a
function, so it can't be composed.
`,
    suggestion: `
Check that every value in your composition chain is a function.
`,
    output,
  });

/**
 * A higher order function that accepts a sequence of data operators and combines them
 * into a new function waiting for data.
 *
 * @example Splitting a string after upcasing it.
 *
 * ```ts
 *  const upper = (data) => data.toUpperCase();
 *  const split = (data) => data.split("");
 *
 *  const splitCapitalLetters = compose(upper, split);
 *
 *  splitCapitalLetters("hello"); // ["H", "E", "L", "L", "O"]
 * ```
 *
 * @remark
 * A data operator is also called a unary function. These are both ways of saying a function
 * takes a single argument.
 *
 * @param {((data: any) => any)[]} operators - a sequence of functions to combine
 * @returns {(data: any) => any} the composed function waiting for data  */
export function compose(...operators) {
  return (data) =>
    operators.reduce((value, func) => {
      if (!isFunction(func)) return FuncError(func);
      return func(value);
    }, data);
}
#+END_SRC

**** pipe

+ =(data: any, ...operators: Array<(data: any) => any>) => unknown=
+ =data: unknown=: the data to pass through the pipeline
+ =...operators: Array<(data: any) => any>=: a sequence of data operators

=pipe= inverts the relationship between data and its operators. This is crucial because data
pipelines can be bound (with =Function.bind=)which allows the construction of /queued/ data
transformers.

As you can see, it's a reimplementation of =compose= but with the data as the initial argument and
immediately executes on call.

#+BEGIN_SRC js :tangle "./utilities.js" :comments link
/**
 * A higher order function that pipes data through a sequence of functions and
 * outputs the result.
 *
 * @example Transforming a string into an upcased array.

 * ```ts
 * const upper = (data) => data.toUpperCase();
 * const split = (data) => data.split("");
 *
 * pipe("hello", upper, split); // ["H", "E", "L", "L", "O"]
 * ```
 *
 * @remarks
 * This function simply inverts `compose` so that the data is immediately transformed
 * instead of combining the functions.
 *
 * @param {any} data - the data to pass through the pipeline
 * @param {((data: any) => any)[]} operators - the sequence of functions to transform data
 * @returns {any} The transformed data
 */
export function pipe(data, ...operators) {
  return compose(...operators)(data);
}
#+END_SRC

**** Tests

***** Utilities Assertions

#+BEGIN_SRC js :tangle "./tests/utilities_test.js" :comments link
import { compose, pipe } from "../utilities.js";

import {
  assertEquals,
  assertThrows,

} from "https://deno.land/std@0.86.0/testing/asserts.ts";

const isString = (x) => typeof x === "string";
const isArray = (x) => Array.isArray(x);

const upper = (x) => isString(x) && x.toUpperCase();
const lower = (x) => isString(x) && x.toLowerCase();

const trim = (x) => isString(x) && x.trim();

const split = (x) => isString(x) && x.split("");

const box = (x) => [x];
const unbox = (x) => isArray(x) && x.toString();

Deno.test("SPEC compose: combines two data operators", function () {
  const splitSafe = compose(split, unbox);
    assertEquals(splitSafe("hello"), "h,e,l,l,o");
});

Deno.test("SPEC compose: can combine a chain of data operators", function () {
  const upperSplitSafe = compose(trim, upper, split);
  assertEquals(upperSplitSafe("   hello      "), ["H", "E", "L", "L", "O"]);
});

Deno.test("EDGE compose: rejects values that are not functions", function () {
  const failsFuncClause = compose(split, 5);
  assertThrows(
    () => {
      throw failsFuncClause("hello");
    },
    undefined,
    "not a function",
  );
});

Deno.test("SPEC pipe: can transform data", function () {
  assertEquals(pipe("hello", upper), "HELLO");
});

Deno.test("SPEC pipe: can chain operators", function () {
  assertEquals(
    pipe(
      "hello",
      split,
      (x) => x.map((xs) => xs.charCodeAt(0)),
      (x) => x.map((xs) => xs + 16),
      (x) => x.map((xs) => String.fromCharCode(xs)),
      (x) => x.join(""),
    ),
    "xu||\x7f",
  );
});
#+END_SRC

***** Utilities Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/utilities_test.js)
#+END_SRC

#+NAME: utilities-test
#+begin_src shell
running 5 tests
test SPEC compose: combines two data operators ... ok (5ms)
test SPEC compose: can combine a chain of data operators ... ok (2ms)
test EDGE compose: rejects values that are not functions ... ok (3ms)
test SPEC pipe: can transform data ... ok (1ms)
test SPEC pipe: can chain operators ... ok (2ms)

test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (14ms)

#+end_src

*** Color (=color.js=)

Quarks System Core is designed to work with all valid CSS color formats (current and future). The
color module provides utilities for conversion, modification, mixing, generating schemes, and
creating palettes.

#+BEGIN_SRC js :tangle "./color.js" :comments link
export * from "./color_convert.js";
export * from "./color_adjust.js";
export * from "./color_mix.js";
export * from "./color_scheme.js";
export * from "./color_palette.js";
export * from "./color_a11y.js";
#+END_SRC

**** Format Conversion (=color_convert.js=)

The public conversion API is designed to abstract the internal =inputFormat.outputFormat= conversion
utilities into a simple =outputFormat:: inputColor -> outputColor= conversion.

For example: =hex("rgb(255, 0, 0)")= will yield =#ff0000=.

Each utility checks the validity of the input color before doing anything with it, and will throw a
helpful error message if something goes wrong.

To streamline the conversion process, I pass each format in the chain through as a sequence of keys.

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
import * as format from "./internals/color/format/index.js";
import * as convert from "./internals/color/convert/index.js";
import { ErrorTemplate } from "./internals/error.js";
import { pipe } from "./utilities.js";

const ColorError = (output) =>
  ErrorTemplate({
    message: "not a valid CSS color format",
    reason: `
This error indicates that the input for conversion is not actually a color.
`,
    suggestion: `
Ensure that the input is a valid CSS color.

Examples:

#deaded
#bea
#face
#abcdef68

aliceblue
rebeccapurple

rgb(110, 33, 229)
rgba(139, 110, 19, 0.5)

hsl(300, 89%, 38%)
hsla(3.4rad, 100%, 25%, 0.99)

device-cmyk(0 1 1 0)
device-cmyk(78% 39% 0 0)

hwb(190 39% 3%)

lab(64% 19 -47)

lch(38% 78 147)
`,
    output,
  });

const parseColor = (color, input, ...chain) =>
  input.validate(color) && pipe(color, ...chain);

// Conversion
function convertColor(color, ...chain) {
  return parseColor(
    color,
    format[chain[0]],
    ...chain.reduce((acc, _, index, array) => {
      if (index === array.length - 1) return acc; // end of sequence
      if (array[index] === "named" && array[index + 1] === "hex") {
        // implicit named color conversion
        return [convert.named.hex];
      }
      return [
        ...acc,
        format[array[index]].extract,
        convert[array[index]][array[index + 1]],
      ];
    }, []),
  );
}

const checkConversion = (color, formats) =>
  formats.filter((found) => !!found).toString() || ColorError(color);
#+END_SRC

Conversion is a two step process: first =convertColor= reads the keys and executes the chain based
on what it finds. It allows both progressive and regressive conversions.

Finally, to return the color, =checkConversion= filters the formats and returns the color it finds
at the end of the chain. If it exists. Otherwise, it throws an error.

***** hex

+ =hex: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to RGB hex.
 *
 * @example Converting RGB to RGB Hex
 *
 * ```ts
 * hex("rgb(0, 0, 0)");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to RGB hex
 */
export function hex(color) {
  return format.hex.validate(color) ? color : checkConversion(color, [
    convertColor(color, "named", "hex"),
    convertColor(color, "rgb", "hex"),
    convertColor(color, "hsl", "rgb", "hex"),
    convertColor(color, "cmyk", "rgb", "hex"),
    convertColor(color, "hwb", "rgb", "hex"),
    convertColor(color, "lab", "rgb", "hex"),
    convertColor(color, "lch", "lab", "rgb", "hex"),
    convertColor(color, "oklab", "rgb", "hex"),
  ]);
}
#+END_SRC

***** rgb

+ =rgb: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to RGB.
 *
 * @example Converting RGB Hex to RGB
 *
 * ```ts
 * rgb("#deaded");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to RGB
 */
export function rgb(color) {
  return format.rgb.validate(color) ? color : checkConversion(color, [
    convertColor(color, "hex", "rgb"),
    convertColor(color, "named", "hex", "rgb"),
    convertColor(color, "hsl", "rgb"),
    convertColor(color, "cmyk", "rgb"),
    convertColor(color, "hwb", "rgb"),
    convertColor(color, "lab", "rgb"),
    convertColor(color, "lch", "lab", "rgb"),
    convertColor(color, "oklab", "rgb"),
  ]);
}
#+END_SRC

***** hsl

+ =hsl: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to HSL.
 *
 * @example Converting Device CMYK to HSL
 *
 * ```ts
 * hsl("device-cmyk(30% 0 60% 0)");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to HSL
 */
export function hsl(color) {
  return format.hsl.validate(color) ? color : checkConversion(color, [
    convertColor(color, "hex", "rgb", "hsl"),
    convertColor(color, "named", "hex", "rgb", "hsl"),
    convertColor(color, "rgb", "hsl"),
    convertColor(color, "cmyk", "rgb", "hsl"),
    convertColor(color, "hwb", "rgb", "hsl"),
    convertColor(color, "lab", "rgb", "hsl"),
    convertColor(color, "lch", "lab", "rgb", "hsl"),
    convertColor(color, "oklab", "rgb", "hsl"),
  ]);
}
#+END_SRC

***** cmyk

+ =cmyk: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to CMYK
 *
 * @example Converting HSL to Device CMYK
 *
 * ```ts
 * cmyk("hsl(97, 63%, 81%)");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to CMYK
 */
export function cmyk(color) {
  return format.cmyk.validate(color) ? color : checkConversion(color, [
    convertColor(color, "hex", "rgb", "cmyk"),
    convertColor(color, "named", "hex", "rgb", "cmyk"),
    convertColor(color, "rgb", "cmyk"),
    convertColor(color, "hsl", "rgb", "cmyk"),
    convertColor(color, "hwb", "rgb", "cmyk"),
    convertColor(color, "lab", "rgb", "cmyk"),
    convertColor(color, "lch", "lab", "rgb", "cmyk"),
    convertColor(color, "oklab", "rgb", "cmyk"),
  ]);
}
#+END_SRC

***** hwb

+ =hwb: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to HWB.
 *
 * @example Converting CIELCH to HWB
 *
 * ```ts
 * hwb("lch(78% 83 210)");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to HWB
 */
export function hwb(color) {
  return format.hwb.validate(color) ? color : checkConversion(color, [
    convertColor(color, "hex", "rgb", "hwb"),
    convertColor(color, "named", "hex", "rgb", "hwb"),
    convertColor(color, "rgb", "hwb"),
    convertColor(color, "hsl", "rgb", "hwb"),
    convertColor(color, "cmyk", "rgb", "hwb"),
    convertColor(color, "lab", "rgb", "hwb"),
    convertColor(color, "lch", "lab", "rgb", "hwb"),
    convertColor(color, "oklab", "rgb", "hwb"),
  ]);
}
#+END_SRC

***** lab

+ =lab: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to CIELAB.
 *
 * @example Convert HWB to CIELAB
 *
 * ```ts
 * lab("hwb(90 25% 10%)");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to CIELAB
 */
export function lab(color) {
  return format.lab.validate(color) ? color : checkConversion(color, [
    convertColor(color, "hex", "rgb", "lab"),
    convertColor(color, "named", "hex", "rgb", "lab"),
    convertColor(color, "rgb", "lab"),
    convertColor(color, "hsl", "rgb", "lab"),
    convertColor(color, "cmyk", "rgb", "lab"),
    convertColor(color, "hwb", "rgb", "lab"),
    convertColor(color, "lch", "lab"),
    convertColor(color, "oklab", "rgb", "lab"),
  ]);
}
#+END_SRC

***** lch

+ =lch: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to CIELCh(ab).
 *
 * @example Convert CIELCh(ab) to RGB Hex
 *
 * ```ts
 * lch("#face");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to CIELCh(ab)
 */
export function lch(color) {
  return format.lch.validate(color) ? color : checkConversion(color, [
    convertColor(color, "hex", "rgb", "lab", "lch"),
    convertColor(color, "named", "hex", "rgb", "lab", "lch"),
    convertColor(color, "rgb", "lab", "lch"),
    convertColor(color, "hsl", "rgb", "lab", "lch"),
    convertColor(color, "cmyk", "rgb", "lab", "lch"),
    convertColor(color, "hwb", "rgb", "lab", "lch"),
    convertColor(color, "lab", "lch"),
    convertColor(color, "oklab", "rgb", "lab", "lch"),
  ]);
}
#+END_SRC

***** oklab

+ =oklab: (color: string) => string=
+ =color: string=: the input color to convert

#+BEGIN_SRC js :tangle "./color_convert.js" :comments link
/**
 * A function that converts any valid CSS color to _non-standard_ Oklab (LCh).
 *
 * @example Convert Oklab (LCh) to RGB Hex
 *
 * ```ts
 * oklab("#face");
 * ```
 *
 * @param {string} color - the input color to convert
 * @returns {string} the input color converted to Oklab (LCh)
 */
export function oklab(color) {
  return format.oklab.validate(color) ? color : checkConversion(color, [
    convertColor(color, "hex", "rgb", "oklab"),
    convertColor(color, "named", "hex", "rgb", "oklab"),
    convertColor(color, "rgb", "oklab"),
    convertColor(color, "hsl", "rgb", "oklab"),
    convertColor(color, "cmyk", "rgb", "oklab"),
    convertColor(color, "hwb", "rgb", "oklab"),
    convertColor(color, "lab", "rgb", "oklab"),
    convertColor(color, "lch", "lab", "rgb", "oklab"),
  ]);
}
#+END_SRC

***** Tests

Catching color errors before they show up in someone else's interface is crucial because *color is
hard*.

Since I've included extensive conversion examples in the internal conversion documentation, I'll be
plugging some values to test the conversion chaining and error reporting.

****** Color Format Conversion Assertions

#+BEGIN_SRC js :tangle "./tests/color_convert_test.js" :comments link
import { cmyk, hex, hsl, hwb, lab, lch, oklab, rgb } from "../color_convert.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

const conversions = { hex, rgb, hsl, cmyk, hwb, lab, lch, oklab };

const samples = {
  hex: "#348ec9",
  rgb: "rgb(30, 119, 200)",
  hsl: "hsl(300, 78%, 69%)",
  cmyk: "device-cmyk(49% 2% 10% 0%)",
  hwb: "hwb(145 30% 5%)",
  lab: "lab(43.319% -42 -8)",
  lch: "lch(85.19% 73.81 67.142)",
  oklab: "oklab(67.39% 0.3418 42)",
};

const colors = [
  "midnightblue",
  "gainsboro",
  "cornsilk",
  "crimson",
  "springgreen",
  "rebeccapurple",
];

colors.forEach((color) => {
  Object.entries(conversions).forEach(([format, fn]) =>
    Deno.test(
      `SPEC try ${color} ${format.toUpperCase()}: "${fn(color)}"`,
      function () {
        assertEquals(fn(color), fn(color));
      },
    )
  );
});

Deno.test(
  `EDGE: does nothing when input is the same format as target conversion`,
  function () {
    Object.entries(conversions).forEach(([format, fn]) =>
      assertEquals(fn(samples[format]), samples[format])
    );
  },
);

Deno.test(`EDGE: rejects invalid or unsupported color formats`, function () {
  Object.values(conversions).forEach((fn) =>
    assertThrows(
      () => {
        throw fn("invalid");
      },
      undefined,
      "not a valid CSS color",
    )
  );
});
#+END_SRC

****** Color Format Conversion Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/color_convert_test.js)
#+END_SRC

#+NAME: conversion-test
#+begin_src shell
running 50 tests
test SPEC try midnightblue HEX: "#191970" ... ok (4ms)
test SPEC try midnightblue RGB: "rgb(25, 25, 112)" ... ok (2ms)
test SPEC try midnightblue HSL: "hsl(240, 63.504%, 26.863%)" ... ok (2ms)
test SPEC try midnightblue CMYK: "device-cmyk(77.679% 77.679% 0% 56.078%)" ... ok (2ms)
test SPEC try midnightblue HWB: "hwb(240 9.8039% 56.078%)" ... ok (2ms)
test SPEC try midnightblue LAB: "lab(14.928% 25.96 -50.904)" ... ok (2ms)
test SPEC try midnightblue LCH: "lch(14.928% 57.141 297.021)" ... ok (2ms)
test SPEC try midnightblue OKLAB: "oklab(28.812% 0.14363 272.765)" ... ok (2ms)
test SPEC try gainsboro HEX: "#dcdcdc" ... ok (2ms)
test SPEC try gainsboro RGB: "rgb(220, 220, 220)" ... ok (2ms)
test SPEC try gainsboro HSL: "hsl(0, 0%, 86.275%)" ... ok (2ms)
test SPEC try gainsboro CMYK: "device-cmyk(0% 0% 0% 13.726%)" ... ok (2ms)
test SPEC try gainsboro HWB: "hwb(0 86.275% 13.726%)" ... ok (2ms)
test SPEC try gainsboro LAB: "lab(87.761% 0 0)" ... ok (2ms)
test SPEC try gainsboro LCH: "lch(87.761% 0 0)" ... ok (2ms)
test SPEC try gainsboro OKLAB: "oklab(89.449% 0 89.876)" ... ok (2ms)
test SPEC try cornsilk HEX: "#fff8dc" ... ok (2ms)
test SPEC try cornsilk RGB: "rgb(255, 248, 220)" ... ok (2ms)
test SPEC try cornsilk HSL: "hsl(48, 100%, 93.137%)" ... ok (2ms)
test SPEC try cornsilk CMYK: "device-cmyk(0% 2.7451% 13.726% 0%)" ... ok (2ms)
test SPEC try cornsilk HWB: "hwb(48 86.275% 0%)" ... ok (2ms)
test SPEC try cornsilk LAB: "lab(97.584% -0.95546 14.387)" ... ok (2ms)
test SPEC try cornsilk LCH: "lch(97.584% 14.419 93.8)" ... ok (2ms)
test SPEC try cornsilk OKLAB: "oklab(97.73% 0.03726 95.439)" ... ok (2ms)
test SPEC try crimson HEX: "#dc143c" ... ok (2ms)
test SPEC try crimson RGB: "rgb(220, 20, 60)" ... ok (2ms)
test SPEC try crimson HSL: "hsl(348, 83.333%, 47.059%)" ... ok (2ms)
test SPEC try crimson CMYK: "device-cmyk(0% 90.909% 72.727% 13.726%)" ... ok (2ms)
test SPEC try crimson HWB: "hwb(348 7.8431% 13.726%)" ... ok (3ms)
test SPEC try crimson LAB: "lab(47.88% 71.283 35.481)" ... ok (2ms)
test SPEC try crimson LCH: "lch(47.88% 79.625 26.462)" ... ok (3ms)
test SPEC try crimson OKLAB: "oklab(57.119% 0.22194 20.087)" ... ok (2ms)
test SPEC try springgreen HEX: "#00ff7f" ... ok (3ms)
test SPEC try springgreen RGB: "rgb(0, 255, 127)" ... ok (2ms)
test SPEC try springgreen HSL: "hsl(150, 100%, 50%)" ... ok (3ms)
test SPEC try springgreen CMYK: "device-cmyk(100% 0% 50.196% 0%)" ... ok (2ms)
test SPEC try springgreen HWB: "hwb(150 0% 0%)" ... ok (3ms)
test SPEC try springgreen LAB: "lab(88.435% -72.513 45.975)" ... ok (3ms)
test SPEC try springgreen LCH: "lch(88.435% 85.859 147.62)" ... ok (3ms)
test SPEC try springgreen OKLAB: "oklab(87.493% 0.23526 151.02)" ... ok (1ms)
test SPEC try rebeccapurple HEX: "#663399" ... ok (2ms)
test SPEC try rebeccapurple RGB: "rgb(102, 51, 153)" ... ok (2ms)
test SPEC try rebeccapurple HSL: "hsl(270, 50%, 40%)" ... ok (3ms)
test SPEC try rebeccapurple CMYK: "device-cmyk(33.333% 66.667% 0% 40%)" ... ok (1ms)
test SPEC try rebeccapurple HWB: "hwb(270 20% 40%)" ... ok (2ms)
test SPEC try rebeccapurple LAB: "lab(32.393% 38.428 -47.69)" ... ok (2ms)
test SPEC try rebeccapurple LCH: "lch(32.393% 61.246 308.861)" ... ok (3ms)
test SPEC try rebeccapurple OKLAB: "oklab(44.027% 0.1603 303.373)" ... ok (2ms)
test EDGE: does nothing when input is the same format as target conversion ... ok (3ms)
test EDGE: rejects invalid or unsupported color formats ... ok (5ms)

test result: ok. 50 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (115ms)

#+end_src

**** Properties Adjustment (=color_adjust.js=)

After ensuring that color conversion is rock solid, the possibilities for adjustment open up. The
main ways to adjust a color include:

+ Hue: the perceptual identity of a color. Hue is the way we perceive a color. The qualitative
  difference between red and cyan.
+ Saturation/Chroma: the given amount of a color. Saturation represents color /intensity/.
+ Lightness/Luminance: the amount of light a color reflects or absorbs. An indication of whether a
  a color is pure, a shade, or  a tint/pastel.
+ Alpha/Transparency: the opacity of a color. Whether a color is solid or lets light through.

Quark System Core used to adjust through the HSL color space, but then I realized it would be far
more accurate to handle them through CIELCh(ab). As a perceptually uniform space, it allows explicit
adjustment of color properties whereas HSL would usually implicitly adjust some other property.

However, I ran into some hue shifting issues and wasn't satisfied with the way CIELAB handles chroma
and lightness predictions which led me to implement Oklab as the color space for property adjustments.

I also want to be able to preserve the input format of a color after adjustment so /you/ won't have to
think about it when you use these functions.

#+BEGIN_SRC js :tangle "./color_adjust.js" :comments link
import * as format from "./internals/color/format/index.js";
import * as revert from "./color_convert.js";

// Secondary format validation
export const preserve = (target, color) =>
  Object.values({
    hex: format.hex.validate(color) && revert.hex(target),
    named: format.named.validate(color) && revert.hex(target),
    rgb: format.rgb.validate(color) && revert.rgb(target),
    hsl: format.hsl.validate(color) && revert.hsl(target),
    cmyk: format.cmyk.validate(color) && revert.cmyk(target),
    hwb: format.hwb.validate(color) && revert.hwb(target),
    lab: format.lab.validate(color) && revert.lab(target),
    lch: format.lch.validate(color) && revert.lch(target),
    oklab: format.oklab.validate(color) && revert.oklab(target),
  })
    .filter((matched) => !!matched)
    .toString();
#+END_SRC

The simple method performs a /secondary/ color validation for the input and passes the resulting
Oklab (LCh) color after adjustment along to its conversion function.

***** hue

+ =hue/h: (offset: number, color: string) => string=
+ =offset: number=: the rotational offset from current hue (positive or negative)
+ =color: string=: the color to adjust

Each of the adjustment functions follow a similar pattern.

First the input color is converted to Oklab (LCh) and its values are extracted. The relevant property is
changed, and the color is reverted to its original format.

#+BEGIN_SRC js :tangle "./color_adjust.js" :comments link
import { extract } from "./internals/color/format/lch.js";
import {
  correctHueClockwise,
  correctHueCounterClockwise,
} from "./internals/color/convert/setup.js";
import { lch, oklab } from "./color_convert.js";
import { pipe } from "./utilities.js";

/**
 * A function that allows hue adjustment of any valid CSS color.
 *
 * @example Positive values adjust clockwise
 *
 * ```ts
 * hue(30, "red");
 * ```
 *
 * @example Negative values adjust counterclockwise
 *
 * ```ts
 * // negative vallues adjust counterclockwise
 * hue(-45, "lime");
 * ```
 *
 * @remarks
 * The hue is bound to one full revolution (360°) and automatically
 * corrects an adjustment value to the expected output if out of range.
 *
 * It corrects clockwise if value after calculation is < 0;
 * counterclockwise if value after calculation is > 360.
 *
 * As of v0.2.0, hue adjustment is done in the Oklab color space instead of HSL.
 *
 * @param {number} offset - the rotational offset from current hue
 * @param {string} color - the color to adjust
 * @returns {string} The adjusted color
 */
export function hue(offset, color) {
  const [L, C, h, alpha] = pipe(color, oklab, extract);
  const hue = parseFloat(h) + offset;

  // Hue correction
  let H;
  if (hue > 360) {
    H = correctHueClockwise(hue);
  } else if (Math.sign(hue) === -1) {
    H = pipe(hue, correctHueClockwise, correctHueCounterClockwise);
  } else {
    H = hue;
  }

  const A = (alpha && (alpha ?? 1)) || 1;

  return preserve(
    A === 1 ? `oklab(${L} ${C} ${H})` : `lch(${L} ${C} ${H} / ${A})`,
    color,
  );
}

/** Shorthand for `hue()` */
export const h = hue;
#+END_SRC

I added a hue correction step so that any adjustment values are acceptable.

***** saturation

+ =saturation/sat/s: (amount: number, color: string) => string=
+ =amount: number=: the amount to adjust saturation (as a percentage)
+ =color: string=: the color to adjust

Saturation, lightness, and alpha are bound by a linear range of  =0-100%=.

#+BEGIN_SRC js :tangle "./color_adjust.js" :comments link
import {
  calcFractionFromPercent,
  calcPercentFromFraction,
  normalize,
} from "./internals/color/convert/setup.js";

/**
 * A function that allows saturation adjustment of any valid CSS color.
 *
 * @example Positive values increase
 *
 * ```ts
 * saturation(15, "red");
 * ```
 *
 * @example Negative values decrease
 *
 * ```ts
 * saturation(-30, "lime");
 * ```
 *
 * @remarks
 * As a value, amount is locked to a range of 0-100%. If
 * the calculation would yield a value out of bounds, the minimum or
 * maximum is returned.
 *
 * At 0%, a color is achromatic (gray). At 100%, a color is fully saturated.
 *
 * As of v0.2.0, saturation adjustment is done in the Oklab color space instead of HSL.
 *
 * @param {number} amount - the amount to adjust saturation (as a percentage)
 * @param {string} color - the color to adjust
 * @returns {string} The adjusted color
 */
export function saturation(amount, color) {
  const [L, c, H, alpha] = pipe(color, oklab, extract);

  const chroma = parseFloat(c) + calcFractionFromPercent(amount * 0.5);

  // Chroma should be >0 and <=0.5
  let C;
  if (Math.sign(chroma) === -1) {
    C = 0;
  } else if (chroma > 0.5) {
    C = 0.5;
  } else {
    C = chroma;
  }

  const A = (alpha && (alpha ?? 1)) || 1;

  return preserve(
    A === 1 ? `oklab(${L} ${C} ${H})` : `oklab(${L} ${C} ${H} / ${A})`,
    color,
  );
}

/** An alias for `saturation()` */
export const sat = saturation;

/** Shorthand for `saturation()` */
export const s = saturation;
#+END_SRC

***** lightness

+ =lightness/luminance/l: (amount: number, color: string) => string=
+ =amount: number=: the amount to adjust lightness (as a percentage)
+ =color: string=: the color to adjust

#+BEGIN_SRC js :tangle "./color_adjust.js" :comments link
/**
 * A function that allows lightness/luminance adjustment of any valid CSS color.
 *
 * @example Positive values increase
 *
 * ```ts
 * lightness(15, "red");
 * ```
 *
 * @example Negative values decrease
 *
 * ```ts
 * lightness(-30, "lime");
 * ```
 *
 * @remarks
 * As a percentage value, amount is locked to a range of 0-100%. If
 * the calculation would yield a value out of bounds, the minimum or
 * maximum is returned.
 *
 * At 0%, sits pure black. At 100%, pure white.
 *
 * As of v0.2.0, lightness adjustment is done in the Oklab color space instead of HSL.
 *
 * @param {number} amount - the amount to adjust lightness (as a percentage)
 * @param {string} color - the color to adjust
 * @returns {string} The adjusted color
 */
export function lightness(amount, color) {
  const [l, C, H, alpha] = pipe(color, oklab, extract);

  const lightness = parseFloat(l) + calcFractionFromPercent(amount * 100);

  let L;
  if (Math.sign(lightness) === -1) {
    L = 0;
  } else if (lightness > 100) {
    L = 100;
  } else {
    L = lightness;
  }

  const A = (alpha && (alpha ?? 1)) || 1;

  return preserve(
    A === 1 ? `oklab(${L}% ${C} ${H})` : `oklab(${L}% ${C} ${H} / ${A})`,
    color,
  );
}

/** An alias for `lightness()` */
export const luminance = lightness;

/** Shorthand for `lightness()` */
export const l = lightness;
#+END_SRC

***** alpha

+ =alpha/transparency/a: (amount: number, color: string) => string=
+ =amount: number=: the amount to adjust transparency (as a percentage)
+ =color: string=: the color to adjust

#+BEGIN_SRC js :tangle "./color_adjust.js" :comments link
/**
 * A function that allows alpha/transparency adjustment of any valid CSS color.
 *
 * @example Positive values increase
 *
 * ```ts
 * alpha(12, "rgba(255, 0, 0, 0.48)");
 * ```
 *
 * @example Negative values decrease
 *
 * ```ts
 * alpha(-30, "lime");
 * ```
 *
 * @remarks
 * As a percentage value, amount is locked to a range of 0-100%. If
 * the calculation would yield a value out of bounds, the minimum or
 * maximum is returned.
 *
 * At 0%, a color is fully transparent. At 100%, fully opaque.
 *
 * As of v0.2.0, alpha adjustment is done in the Oklab color space instead of HSL.
 *
 * @param {number} amount - the amount to adjust transparency (as a percentage)
 * @param {string} color - the color to adjust
 * @returns {string} The adjusted color
 */
export function alpha(amount, color) {
  const [L, C, H, a] = pipe(color, oklab, extract);

  const alpha = parseFloat(a ?? 1) + calcFractionFromPercent(amount);

  let A;
  if (Math.sign(alpha) === -1) {
    A = 0;
  } else if (alpha > 1) {
    A = 1;
  } else {
    A = alpha;
  }

  return preserve(
    A === 1 ? `oklab(${L} ${C} ${H})` : `oklab(${L} ${C} ${H} / ${A})`,
    color,
  );
}

/** An alias for `alpha()` */
export const transparency = alpha;

/** Shorthand for `alpha()` */
export const a = alpha;
#+END_SRC

***** Tests

****** Color Adjustment Assertions

#+BEGIN_SRC js :tangle "./tests/color_adjust_test.js" :comments link
import {
  a,
  alpha,
  h,
  hue,
  l,
  lightness,
  luminance,
  s,
  sat,
  saturation,
  transparency,
} from "../color_adjust.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

Deno.test("SPEC hue: can adjust clockwise", function () {
  const color = "red";

  assertEquals(hue(15, color), "#fa2a00");
  assertEquals(hue(30, color), "#ef4600");
  assertEquals(hue(45, color), "#de5f00");
  assertEquals(hue(60, color), "#c57500");
  assertEquals(hue(75, color), "#a58900");
  assertEquals(hue(90, color), "#7b9900");
});

Deno.test("SPEC hue: can adjust counterclockwise", function () {
  const color = "lime";

  assertEquals(hue(-15, color), "#9bf200");
  assertEquals(hue(-30, color), "#dbe100");
  assertEquals(hue(-45, color), "#ffcc00");
  assertEquals(hue(-60, color), "#ffb400");
  assertEquals(hue(-75, color), "#ff9b00");
  assertEquals(hue(-90, color), "#ff8300");
});

Deno.test("SPEC hue: can adjust all supported formats", function () {
  const colors = [
    ["#c0ffee", "#ffdef1"],
    ["midnightblue", "#432300"],
    ["rgb(255, 133, 30)", "rgb(0, 186, 255)"],
    ["hsl(300, 40%, 70%)", "hsl(125, 34.021%, 61.961%)"],
    ["device-cmyk(90% 0% 70% 0%)", "device-cmyk(0% 46.667% 0% 0%)"],
    ["hwb(120 30% 20%)", "hwb(294 47.843% 3.9216%)"],
    ["lab(36.44% 30 -79)", "lab(39.711% 31.523 49.911)"],
    ["lch(63.198% 36 135)", "lch(60.635% 35.048 318.44)"],
    ["oklab(56% 0.25 240)", "oklab(56% 0.25 60)"],
  ];

  colors.forEach(([input, target]) => assertEquals(hue(180, input), target));
});

Deno.test("EDGE hue: rejects invalid color", function () {
  assertThrows(
    () => {
      throw hue(16, "invalid");
    },
    undefined,
    "not a valid CSS color",
  );
});

Deno.test("ALIAS h of hue", function () {
  assertEquals(h(33, "hwb(60 38% 0%)"), "hwb(114 64.314% 0%)");
});

Deno.test("SPEC saturation: can saturate a color", function () {
  const color = "cadetblue";

  assertEquals(saturation(4, color), "#48a1a4");
  assertEquals(saturation(8, color), "#22a5a9");
  assertEquals(saturation(16, color), "#00abb2");
  assertEquals(saturation(32, color), "#00b5c3");
  assertEquals(saturation(64, color), "#00c5e6");
});

Deno.test("SPEC saturation: can desaturate a color", function () {
  const color = "chartreuse";

  assertEquals(saturation(-4, color), "#88fd39");
  assertEquals(saturation(-8, color), "#91fb51");
  assertEquals(saturation(-16, color), "#a0f673");
  assertEquals(saturation(-32, color), "#bceba6");
  assertEquals(saturation(-64, color), "#dbdbdb");
});

Deno.test("SPEC saturation: can adjust all supported formats", function () {
  const colors = [
    ["#c0ffee", "#efefef"],
    ["midnightblue", "#2b2b2b"],
    ["rgb(255, 133, 30)", "rgb(171, 171, 171)"],
    ["hsl(300, 40%, 70%)", "hsl(0, 0%, 67.451%)"],
    ["device-cmyk(90% 0% 70% 0%)", "device-cmyk(7.7982% 0% 7.7982% 14.51%)"],
    ["hwb(120 30% 20%)", "hwb(0 67.843% 32.157%)"],
    ["lab(36.44% 30 -79)", "lab(39.49% 0 0)"],
    ["lch(63.198% 36 135)", "lch(62.082% 0 0)"],
    ["oklab(56% 0.25 240)", "oklab(56% 0.010000000000000009 240)"],
  ];

  colors.forEach(([input, target]) =>
    assertEquals(saturation(-48, input), target)
  );
});

Deno.test("EDGE saturation: rejects invalid color", function () {
  assertThrows(
    () => {
      throw saturation(16, "invalid");
    },
    undefined,
    "not a valid CSS color",
  );
});

Deno.test("ALIAS sat of saturation", function () {
  assertEquals(sat(-16, "chocolate"), "#b07d61");
});

Deno.test("ALIAS s of saturation", function () {
  assertEquals(s(-8, "burlywood"), "#cebca5");
});

Deno.test("SPEC lightness: can lighten a color", function () {
  const color = "midnightblue";

  assertEquals(lightness(4, color), "#21267d");
  assertEquals(lightness(8, color), "#293289");
  assertEquals(lightness(16, color), "#3c4aa3");
  assertEquals(lightness(32, color), "#677ad8");
  assertEquals(lightness(64, color), "#c7e0ff");
});

Deno.test("SPEC lightness: can darken a color", function () {
  const color = "cornsilk";

  assertEquals(lightness(-4, color), "#f2ebcf");
  assertEquals(lightness(-8, color), "#e4ddc2");
  assertEquals(lightness(-16, color), "#cac4a9");
  assertEquals(lightness(-32, color), "#989278");
  assertEquals(lightness(-64, color), "#3d3721");
});

Deno.test("SPEC lightness: can adjust all supported formats", function () {
  const colors = [
    ["#c0ffee", "#cffffe"],
    ["midnightblue", "#95acff"],
    ["rgb(255, 133, 30)", "rgb(255, 219, 131)"],
    ["hsl(300, 40%, 70%)", "hsl(300, 100%, 95.098%)"],
    ["device-cmyk(90% 0% 70% 0%)", "device-cmyk(59.608% 0% 50.98% 0%)"],
    ["hwb(120 30% 20%)", "hwb(117 62.745% 0%)"],
    ["lab(36.44% 30 -79)", "lab(88.646% -18.579 -17.461)"],
    ["lch(63.198% 36 135)", "lch(96.589% 25.863 133.94)"],
    ["oklab(56% 0.25 240)", "oklab(100% 0.25 240)"],
  ];

  colors.forEach(([input, target]) =>
    assertEquals(lightness(48, input), target)
  );
});

Deno.test("EDGE lightness: rejects invalid color", function () {
  assertThrows(
    () => {
      throw lightness(16, "invalid");
    },
    undefined,
    "not a valid CSS color",
  );
});

Deno.test("ALIAS luminance of lightness", function () {
  assertEquals(
    luminance(12, "lab(38.1993% -39 -147.39)"),
    "lab(63.564% -4.8385 -56.459)",
  );
});

Deno.test("ALIAS l of lightness", function () {
  assertEquals(l(30, "slategray"), "#ccdef0");
});

Deno.test("SPEC alpha: can increase", function () {
  const color = "#abcdef68";

  assertEquals(alpha(4, color), "#abcdef72");
  assertEquals(alpha(8, color), "#abcdef7c");
  assertEquals(alpha(16, color), "#abcdef91");
  assertEquals(alpha(32, color), "#abcdefba");
  assertEquals(alpha(64, color), "#abcdef");
});

Deno.test("SPEC alpha: can decrease", function () {
  const color = "#abcdef";

  assertEquals(alpha(-4, color), "#abcdeff5");
  assertEquals(alpha(-8, color), "#abcdefeb");
  assertEquals(alpha(-16, color), "#abcdefd6");
  assertEquals(alpha(-32, color), "#abcdefad");
  assertEquals(alpha(-64, color), "#abcdef5c");
});

Deno.test("SPEC alpha: can adjust all supported formats", function () {
  const colors = [
    ["#c0ffee", "#c0ffeebf"],
    ["midnightblue", "#191970bf"],
    ["rgb(255, 133, 30)", "rgba(255, 133, 30, 0.75)"],
    ["hsl(300, 40%, 70%)", "hsla(300, 39.869%, 70%, 0.75)"],
    ["device-cmyk(90% 0% 70% 0%)", "device-cmyk(89.804% 0% 69.804% 0% / 0.75)"],
    ["hwb(120 30% 20%)", "hwb(120 30.196% 20% / 0.75)"],
    ["lab(36.44% 30 -79)", "lab(36.39% 30.198 -79.154 / 0.75)"],
    ["lch(63.198% 36 135)", "lch(63.182% 35.872 135.17 / 0.75)"],
    ["oklab(56% 0.25 240)", "oklab(56% 0.25 240 / 0.75)"],
  ];

  colors.forEach(([input, target]) => assertEquals(alpha(-25, input), target));
});

Deno.test("ALIAS transparency of alpha", function () {
  assertEquals(transparency(-25, "#deaded"), "#deadedbf");
});

Deno.test("ALIAS a of alpha", function () {
  assertEquals(a(-64, "#deaded"), "#deaded5c");
});
#+END_SRC

****** Color Adjustment Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/color_adjust_test.js)
#+END_SRC

#+NAME: adjustment-test
#+begin_src shell
running 22 tests
test SPEC hue: can adjust clockwise ... ok (18ms)
test SPEC hue: can adjust counterclockwise ... ok (5ms)
test SPEC hue: can adjust all supported formats ... ok (11ms)
test EDGE hue: rejects invalid color ... ok (3ms)
test ALIAS h of hue ... ok (2ms)
test SPEC saturation: can saturate a color ... ok (4ms)
test SPEC saturation: can desaturate a color ... ok (3ms)
test SPEC saturation: can adjust all supported formats ... ok (6ms)
test EDGE saturation: rejects invalid color ... ok (2ms)
test ALIAS sat of saturation ... ok (2ms)
test ALIAS s of saturation ... ok (2ms)
test SPEC lightness: can lighten a color ... ok (4ms)
test SPEC lightness: can darken a color ... ok (3ms)
test SPEC lightness: can adjust all supported formats ... ok (5ms)
test EDGE lightness: rejects invalid color ... ok (2ms)
test ALIAS luminance of lightness ... ok (2ms)
test ALIAS l of lightness ... ok (3ms)
test SPEC alpha: can increase ... ok (2ms)
test SPEC alpha: can decrease ... ok (4ms)
test SPEC alpha: can adjust all supported formats ... ok (6ms)
test ALIAS transparency of alpha ... ok (2ms)
test ALIAS a of alpha ... ok (2ms)

test result: ok. 22 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (94ms)

#+end_src

**** Mixing (=color_mix.js=)

***** mix

+ =mix: (amount: number, target: string, color: string) => string=
+ =amount: number=: the amount to mix with target (as a percentage)
+ =target: string=: the blending target to mix with input color
+ =color: string=: the input color

The color mixing implementation works similar to the color adjustment functions in that the result
will have the same format as the /input/ color. This means the target color to mix with can be /any/
valid CSS format.

First, I import some helpers from other modules.

#+BEGIN_SRC js :tangle "./color_mix.js" :comments link
import {
  calcFractionFromPercent,
  calcPercentFromFraction,
  significant,
} from "./internals/color/convert/setup.js";
import { extract } from "./internals/color/format/oklab.js";
import { parseOklab } from "./internals/color/convert/oklab.js";
import { oklab } from "./color_convert.js";
import { preserve } from "./color_adjust.js";
import { pipe } from "./utilities.js";

const precision = significant.bind(null, 5);
#+END_SRC

=calcMixture()= was updated in v0.2.0 to use a linear interpolation formula with raw Oklab
values. Not only is the math less complex, the mixtures are more accurate and account for the
presence of an alpha component without additional operations.

#+BEGIN_SRC js :tangle "./color_mix.js" :comments link
function calcMixture(original, target, amount) {
  const [OL, Oa, Ob, Oalpha] = original;
  const [TL, Ta, Tb, Talpha] = target;

  const OA = parseFloat(Oalpha ?? 1);
  const TA = parseFloat(Talpha ?? 1);

  return [
    [OL, TL],
    [Oa, Ta],
    [Ob, Tb],
    [OA, TA],
  ].map(([X, Y]) => X + (Y - X) * amount);
}
#+END_SRC

Finally, the public function executes the mix. You can see here that the Oklab (LCh) is converted
back to rectangular coordinates to apply the mixture formula and then reverted to its string data form.

#+BEGIN_SRC js :tangle "./color_mix.js" :comments link
/**
 * A function for mixing colors of any valid CSS format.
 *
 *
 * @example Even mixture
 *
 * ```ts
 * mix(50, 'red', 'blue');
 * ```
 *
 * @example Farther from target
 *
 * ```ts
 * mix(34, 'green', 'blue');
 * ```
 *
 * @example Closer to target
 *
 * ```ts
 * mix(75, 'blue', 'white');
 * ```
 *
 * @remarks
 * As a percentage, the amount is bound to a range of 0-100%. At 0%
 * it yields the input color. And at 100%, it yields the target color
 *
 * @param {number} amount - the amount to mix with target (as a percentage)
 * @param {string} target - the mixture target
 * @param {string} color - the input color
 * @returns {string} The mixture result
 */
export function mix(amount, target, color) {
  // Convert both colors to raw Oklab
  const c1 = pipe(color, oklab, extract, parseOklab);
  const c2 = pipe(target, oklab, extract, parseOklab);

  // calculate the mixture
  const [l, a, b, alpha] = calcMixture(c1, c2, calcFractionFromPercent(amount));

  // Convert result back to Oklab (LCh)
  const [L, C, h] = [
    calcPercentFromFraction(l),
    Math.sqrt(a ** 2 + b ** 2),
    Math.atan2(b, a) * (180 / Math.PI),
  ];

  // Hue correction
  let H = Math.sign(h) === -1 ? h + 360 : h;

  return preserve(
    alpha === 1
      ? `oklab(${L}% ${C} ${H})`
      : `oklab(${L}% ${C} ${H} / ${alpha})`,
    color,
  );
}
#+END_SRC

***** Tests

****** Color Mixing Assertions

#+BEGIN_SRC js :tangle "./tests/color_mix_test.js" :comments link
import { mix } from "../color_mix.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

Deno.test("SPEC mix: can mix colors freely", function () {
  const red = "#f00";
  const yellow = "#ff0";
  const green = "#0f0";
  const cyan = "#0ff";
  const blue = "#00f";
  const magenta = "#f0f";
  const white = "#fff";
  const gray = "#808080";
  const black = "#000";

  const colors = [
    [red, "#ff6a00", "#ffa000", "#ffd100", "#ffff00", yellow],
    [red, "#ed7300", "#d0a801", "#a0d500", "#00ff00", green],
    [red, "#ee745b", "#d2a993", "#a3d6c9", "#00ffff", cyan],
    [red, "#c6496d", "#8c53a2", "#5147d2", "#0000ff", blue],
    [red, "#fe2464", "#fd2d9b", "#fe28ce", "#ff00ff", magenta],
    [red, "#ff6b59", "#ffa191", "#ffd1c8", "#ffffff", white],
    [red, "#e3493a", "#c66356", "#a5746c", "#808080", gray],
    [red, "#ae0000", "#630000", "#220000", "#000000", black],
    [yellow, "#daff00", "#b0ff00", "#7cff00", "#00ff00", green],
    [yellow, "#daff7c", "#b0ffb0", "#7cffda", "#00ffff", cyan],
    [yellow, "#b5d797", "#6cabc7", "#1d77e7", "#0000ff", blue],
    [yellow, "#ffd88a", "#ffadbc", "#ff79e1", "#ff00ff", magenta],
    [yellow, "#feff78", "#feffac", "#feffd7", "#ffffff", white],
    [yellow, "#dddf54", "#bdbf6c", "#9e9f79", "#808080", gray],
    [yellow, "#aeae00", "#636300", "#222200", "#000000", black],
    [green, "#00ff74", "#00ffa9", "#00ffd6", "#00ffff", cyan],
    [green, "#00d68d", "#00aabf", "#0075e2", "#0000ff", blue],
    [green, "#95dc81", "#c6b4b4", "#e780dc", "#ff00ff", magenta],
    [green, "#79ff71", "#adffa6", "#d8ffd4", "#ffffff", white],
    [green, "#54df4e", "#6dc067", "#7aa076", "#808080", gray],
    [green, "#00ae00", "#006300", "#002200", "#000000", black],
    [cyan, "#00d1ff", "#00a0ff", "#006aff", "#0000ff", blue],
    [cyan, "#9bd8ff", "#ccacff", "#ea78ff", "#ff00ff", magenta],
    [cyan, "#7dffff", "#b1ffff", "#daffff", "#ffffff", white],
    [cyan, "#58dede", "#70bebe", "#7c9f9e", "#808080", gray],
    [cyan, "#00aeae", "#006363", "#002222", "#000000", black],
    [blue, "#572dff", "#9038ff", "#c732ff", "#ff00ff", magenta],
    [blue, "#306dff", "#73a3ff", "#b8d2ff", "#ffffff", white],
    [blue, "#144ae2", "#3b64c4", "#5e75a4", "#808080", gray],
    [blue, "#0000ae", "#000063", "#000022", "#000000", black],
    [magenta, "#ff71ff", "#ffa6ff", "#ffd4ff", "#ffffff", white],
    [magenta, "#e14edf", "#c367c0", "#a376a0", "#808080", gray],
    [magenta, "#ae00ae", "#630063", "#220022", "#000000", black],
    [white, "#dedede", "#bdbdbd", "#9e9e9e", "#808080", gray],
    [white, "#aeaeae", "#636363", "#222222", "#000000", black],
    [gray, "#555555", "#2e2e2e", "#0b0b0b", "#000000", black],
  ];

  colors.forEach(([color, slightly, evenly, heavily, fully, target]) => {
    assertEquals(mix(25, target, color), slightly);
    assertEquals(mix(50, target, color), evenly);
    assertEquals(mix(75, target, color), heavily);
    assertEquals(mix(100, target, color), fully);
  });
});

Deno.test("SPEC mix: can mix colors with alpha property", function () {
  assertEquals(mix(50, "#ce9ddaef", "#c91193"), "#cf67b6f7");
  assertEquals(mix(75, "#deaded", "#face"), "#e6ade5fb");
  assertEquals(mix(95, "#3ad9cfc5", "#cc911df9"), "#4dd6c8c8");
});

Deno.test("SPEC mix: can mix colors of any valid format", function () {
  const colors = [
    ["#c99faa", "#f05e56", "red"],
    ["rgb(118, 20, 250)", "rgb(194, 194, 169)", "yellow"],
    ["hsl(320, 70%, 31%)", "hsl(93, 38.462%, 51.569%)", "lime"],
    [
      "device-cmyk(0% 79% 32% 0%)",
      "device-cmyk(18.667% 12% 0% 11.765%)",
      "cyan",
    ],
    ["hwb(148 28% 38%)", "hwb(211 0% 17.647%)", "blue"],
    ["lab(46.48% -38 120)", "lab(55.959% 46.101 -25.021)", "magenta"],
    ["lch(89.311% 63 300)", "lch(80.57% 33.332 315.903)", "#deaded"],
    [
      "oklab(49% 0.3 78)",
      "oklab(78.6333% 0.11027189298674138 100.66588617825195)",
      "#c0ffee",
    ],
  ];

  colors.forEach(([color, blend, target]) =>
    assertEquals(mix(64, target, color), blend)
  );
});

Deno.test("EDGE mix: throws error when either color is invalid", function () {
  assertThrows(
    () => {
      throw mix(40, "invalid", "#c0ffee");
    },
    undefined,
    "not a valid CSS color",
  );
  assertThrows(
    () => {
      throw mix(40, "#deaded", "c0ffee");
    },
    undefined,
    "not a valid CSS color",
  );
  assertThrows(
    () => {
      throw mix(40, "invalid", "c0ffee");
    },
    undefined,
    "not a valid CSS color",
  );
});
#+END_SRC

****** Color Mixing Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/color_mix_test.js)
#+END_SRC

#+NAME: mix-test
#+begin_src shell
running 4 tests
test SPEC mix: can mix colors freely ... ok (90ms)
test SPEC mix: can mix colors with alpha property ... ok (3ms)
test SPEC mix: can mix colors of any valid format ... ok (11ms)
test EDGE mix: throws error when either color is invalid ... ok (3ms)

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (108ms)

#+end_src

**** Scheme Generation (=color_scheme.js=)

Color schemes are a way of adding more visual interest and tension to a design. The primary scheme
configurations used in digital design include:

+ Monochromatic: a single color scheme consisting of a base color and palette variants (tints,
  tones, and/or shades) of that color
+ Analogous: a multi-color scheme consisting of a base color and a selection of hues directly next
  to it on the color wheel. Examples: red, orange, yellow or red, magenta-red, magenta
+ Complementary: a two color scheme consisting of a base color and its complement (opposite) on the
  color wheel. Examples: red and cyan or green and magenta
+ Split-Complementary: A three color scheme consisting of a base color and two hues on either side
  of its complement. Example: red, cyan-blue, green-cyan
+ Triadic: a color scheme consisting of three colors equally spaced around the color wheel. Example:
  red, green, blue
+ Tetradic/Dual: a four color scheme consisting of a base color, its complement, and a rotational
  offset of both points; creating a rectangle
+ Square: a color scheme consisting of four colors equally spaced around the color wheel

Besides providing functions for each of the basic color schemes, Quarks System Core also provides
a function for generating custom schemes.

Compared with QuarkSuite 1, QSC eliminates scheme boilerplate and leaves calculation and offset
adjustments for the custom function.

***** complementary

+ =complementary: (color: string) => [string, string]=
+ =color: string=: the base color to generate from

#+BEGIN_SRC js :tangle "./color_scheme.js" :comments link
import { hue } from "./color_adjust.js";

/**
 * Creates a complementary color scheme from any valid CSS color.
 *
 * @example Creating a complementary scheme
 *
 * ```ts
 * complementary("coral");
 * ```
 *
 * @remarks
 * A complementary color scheme is composed of a base color and its
 * opposite on the color wheel. It is a scheme with the highest possible
 * warm/cool color contrast.
 *
 * @param {string} color - the base color to generate from
 * @returns {[string, string]} The base hues for a complementary color scheme
 */
export const complementary = (color) => [hue(0, color), hue(180, color)];
#+END_SRC

***** analogous

+ =analogous: (color: string) => [string, string, string]=
+ =color: string=: the base color to generate from

#+BEGIN_SRC js :tangle "./color_scheme.js" :comments link
/**
 * Creates an analogous color scheme from any valid CSS color.
 *
 * @example Creating an analogous color scheme
 *
 * ```ts
 * analogous("coral");
 * ```
 *
 * @remarks
 * An analogous color scheme is composed of a color and its directly
 * adjacent counterparts on the color wheel; hues about 30° apart from
 * the origin.
 *
 * @param {string} color - the base color to generate from
 * @returns {[string, string, string]} The base hues for a analogous color scheme
 */
export const analogous = (color) => [
  hue(0, color),
  hue(-30, color),
  hue(30, color),
];
#+END_SRC

***** splitComplementary

+ =splitComplementary: (color: string) => [string, string, string]=
+ =color: string=: the base color to generate from

#+BEGIN_SRC js :tangle "./color_scheme.js" :comments link
/**
 * Creates a split complementary color scheme from any valid CSS color.
 *
 * @example Creaing a split complementary scheme
 *
 * ```ts
 * splitComplementary("coral");
 * ```
 *
 * @remarks
 * A split complementary scheme is composed of a base color and a bisection
 * of colors directly next to its opposite; hues about 30° apart.
 *
 * @param {string} color - the base color to generate from
 * @returns {[string, string, string]} The base hues for a split complementary color scheme
 */
export const splitComplementary = (color) => [
  hue(0, color),
  hue(30, hue(180, color)),
  hue(-30, hue(180, color)),
];
#+END_SRC

***** triadic

+ =triadic: (color: string) => [string, string, string]=
+ =color: string=: the base color to generate from

#+BEGIN_SRC js :tangle "./color_scheme.js" :comments link
/**
 * Creates a triadic color scheme from any valid CSS color.
 *
 * @example Creating a triadic color scheme
 *
 * ```ts
 * triadic("coral");
 * ```
 *
 * @remarks
 * A triadic color scheme is composed of three colors evenly spaced around
 * the color wheel; 120° apart.
 *
 * @param {string} color - the base color to generate from
 * @returns {[string, string, string]} The base hues for a triadic color scheme
 */
export const triadic = (color) => [
  hue(0, color),
  hue(120, color),
  hue(240, color),
];
#+END_SRC

***** tetradic

+ =tetradic/dualComplementary: (color: string) => [string, string, string, string]=
+ =color: string=: the base color to generate from

#+BEGIN_SRC js :tangle "./color_scheme.js" :comments link
/**
 * Creates a tetradic color scheme from any valid CSS color.
 *
 * @example Creating a tetradic color scheme
 *
 * ```ts
 * tetradic("coral");
 * ```
 *
 * @remarks
 * A tetradic color scheme consists of a color, its opposite, and a
 * second complementary pair of colors. They are also called dual
 * complementary schemes.
 *
 * @param {string} color - the base color to generate from
 * @returns {[string, string, string, string]} The base hues for a tetradic color scheme
 */
export const tetradic = (color) => [
  hue(0, color),
  hue(60, color),
  hue(180, color),
  hue(60, hue(180, color)),
];

/** An alias for `tetradic()` */
export const dualComplementary = tetradic;
#+END_SRC

***** square

+ =square: (color: string) => [string, string, string, string]=
+ =color: string=: the base color to generate from

#+BEGIN_SRC js :tangle "./color_scheme.js" :comments link
/**
 * Creates a square color scheme from any valid CSS color.
 *
 * @example Creating a square color scheme
 *
 * ```ts
 * square("coral");
 * ```
 *
 * @remarks
 * A square color scheme consists of four colors positioned equally
 * around the color wheel; 90° apart.
 *
 * @param {string} color - the base color to generate from
 * @returns {[string, string, string, string]} The base hues for a square color scheme
 */
export const square = (color) => [
  hue(0, color),
  hue(90, color),
  hue(180, color),
  hue(270, color),
];
#+END_SRC

***** custom

+ =custom: (attrs: { hues: number, arc: number, offset?: number }, color: string) => string[]=
+ =attrs: { hues: number, arc: number, offset?: number }=
  - =hues: number=: the number of total hues to generate (minus values that overlap)
  - =arc: number=: the desired arc distance between each hue on the wheel
  - =offset?: number=: an optional rotation offset for generated hues (does not change origin)
+ =color: string=: the base color to generate custom scheme

#+BEGIN_SRC js :tangle "./color_scheme.js" :comments link
function generate({ hues, arc, offset = 0 }, color) {
  const values = Array(offset ? hues - 1 : hues + 1).fill(arc);
  const half = Math.ceil(values.length / 2);
  const [leftOfOrigin, rightOfOrigin] = [
    values.slice(0, half),
    values.slice(half, values.length),
  ];
  return offset
    ? [
      ...new Set([
        hue(0, color),
        ...leftOfOrigin.map((v, i) => hue(-(v * i) - offset, color)),
        ...rightOfOrigin.map((v, i) => hue(v * i + offset, color)),
      ]),
    ] // Must preserve the origin with offset
    : [
      ...new Set([
        ...leftOfOrigin.map((v, i) => hue(-(v * i) - offset, color)),
        ...rightOfOrigin.map((v, i) => hue(v * i + offset, color)),
      ]),
    ]; // Must add an extra hue to generate from origin
}

/**
 * A function for creating advanced schemes from any valid CSS color.
 *
 * @example Creating a five tone color scheme
 *
 * ```ts
 * custom({ hues: 5, arc: 72 }, "#e33a00");
 * ```
 *
 * @example Creating a six tone color scheme
 *
 * ```ts
 * custom({ hues: 6, arc: 60 }, "hsl(320grad, 75%, 50%)");
 * ```
 * @example  Creating an accented split complementary
 *
 * ```ts
 * custom({ hues: 4, arc: 30, offset: 150 }, "royalblue");
 * ```
 *
 * @remarks
 * This function is for generating schemes beyond basic configuration.
 *
 * It allows setting any number of hues but will only generate unique colors.
 * The arc is the distance between each color on the wheel. The offset defines
 * degree of rotation for the generated hues from the origin.
 *
 * @param {{ hues: number, arc: number, offset?: number }} attrs - A configuration object defining desired hues (minus overlapping values), arc distance between each hue from the origin, and optional rotation offset
 * @param {string} color - the base color to generate scheme
 * @returns {string[]} A collection of base hues for a custom scheme
 */
export const custom = (attrs, color) => generate(attrs, color);
#+END_SRC

***** Tests

****** Color Scheme Generation Assertions

#+BEGIN_SRC js :tangle "./tests/color_scheme_test.js" :comments link
import {
  analogous,
  complementary,
  custom,
  dualComplementary,
  splitComplementary,
  square,
  tetradic,
  triadic,
} from "../color_scheme.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

Deno.test(
  "SPEC complementary: generate base hues for complementary scheme",
  function () {
    assertEquals(complementary("red"), ["#ff0000", "#00a9db"]);
    assertEquals(complementary("lime"), ["#00ff00", "#ff7dff"]);
    assertEquals(complementary("blue"), ["#0000ff", "#a02000"]);
  },
);

Deno.test(
  "SPEC analogous: generate base hues for analogous scheme",
  function () {
    assertEquals(analogous("red"), ["#ff0000", "#f50084", "#ef4600"]);
    assertEquals(analogous("lime"), ["#00ff00", "#dbe100", "#00ffbe"]);
    assertEquals(analogous("blue"), ["#0000ff", "#0053e4", "#6e00ec"]);
  },
);

Deno.test(
  "SPEC splitComplementary: generate base hues for split complementary scheme",
  function () {
    assertEquals(splitComplementary("red"), ["#ff0000", "#649bec", "#00b2b8"]);
    assertEquals(splitComplementary("lime"), ["#00ff00", "#ff70b9", "#ca93ff"]);
    assertEquals(splitComplementary("blue"), ["#0000ff", "#943800", "#9c194e"]);
  },
);

Deno.test("SPEC triadic: generate base hues for triadic scheme", function () {
  assertEquals(triadic("red"), ["#ff0000", "#00ae00", "#4f6fff"]);
  assertEquals(triadic("cyan"), ["#00ffff", "#ffbfff", "#ffd05c"]);
});

Deno.test("SPEC tetradic: generate base hues for tetradic scheme", function () {
  assertEquals(tetradic("red"), ["#ff0000", "#c57500", "#00a9db", "#978be8"]);
  assertEquals(tetradic("lime"), ["#00ff00", "#00ffff", "#ff7dff", "#ff7366"]);
  assertEquals(tetradic("blue"), ["#0000ff", "#9e00b2", "#a02000", "#775100"]);
});

Deno.test("ALIAS dualComplementary of tetradic", function () {
  assertEquals(dualComplementary("cyan"), [
    "#00ffff",
    "#96e3ff",
    "#ffb3bf",
    "#f2c18b",
  ]);
});

Deno.test("SPEC square: generate base hues for square scheme", function () {
  assertEquals(square("red"), ["#ff0000", "#7b9900", "#00a9db", "#a34fff"]);
  assertEquals(square("lime"), ["#00ff00", "#00e9ff", "#ff7dff", "#ff8300"]);
  assertEquals(square("blue"), ["#0000ff", "#c00061", "#a02000", "#008048"]);
});

Deno.test("SPEC custom: simulate complementary", function () {
  assertEquals(custom({ hues: 2, arc: 180 }, "red"), ["#ff0000", "#00a9db"]);
});

Deno.test("SPEC custom: simulate analogous", function () {
  assertEquals(custom({ hues: 3, arc: 30 }, "red"), [
    "#ff0000",
    "#f50084",
    "#ef4600",
  ]);
});

Deno.test("SPEC custom: simulate triadic", function () {
  assertEquals(custom({ hues: 3, arc: 120 }, "red"), [
    "#ff0000",
    "#4f6fff",
    "#00ae00",
  ]);
});

Deno.test("SPEC custom: simulate square", function () {
  assertEquals(custom({ hues: 4, arc: 90 }, "red"), [
    "#ff0000",
    "#a34fff",
    "#00a9db",
    "#7b9900",
  ]);
});

Deno.test("SPEC custom: dyad", function () {
  assertEquals(custom({ hues: 2, arc: 60 }, "red"), ["#ff0000", "#d62fd2"]);
});

Deno.test("SPEC custom: extended analogous", function () {
  assertEquals(custom({ hues: 4, arc: 30 }, "red"), [
    "#ff0000",
    "#f50084",
    "#d62fd2",
    "#ef4600",
  ]);
});

Deno.test("SPEC custom: accented triad", function () {
  assertEquals(custom({ hues: 5, arc: 60, offset: 120 }, "red"), [
    "#ff0000",
    "#4f6fff",
    "#00a9db",
    "#00ae00",
  ]);
});

Deno.test("SPEC custom: accented split complementary", function () {
  assertEquals(custom({ hues: 4, arc: 30, offset: 150 }, "red"), [
    "#ff0000",
    "#0090ff",
    "#00a9db",
    "#00b48c",
  ]);
});

Deno.test("EDGE: rejects invalid color", function () {
  const fns = [
    complementary,
    analogous,
    splitComplementary,
    triadic,
    tetradic,
    square,
  ];

  fns.map((fn) =>
    assertThrows(
      () => {
        throw fn("invalid");
      },
      undefined,
      "not a valid CSS color",
    )
  );
  assertThrows(
    () => {
      throw custom({ hues: 2, arc: 180 }, "invalid");
    },
    undefined,
    "not a valid CSS color",
  );
});
#+END_SRC

****** Color Scheme Generation Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/color_scheme_test.js)
#+END_SRC

#+NAME: scheme-test
#+begin_src shell
running 16 tests
test SPEC complementary: generate base hues for complementary scheme ... ok (18ms)
test SPEC analogous: generate base hues for analogous scheme ... ok (6ms)
test SPEC splitComplementary: generate base hues for split complementary scheme ... ok (8ms)
test SPEC triadic: generate base hues for triadic scheme ... ok (4ms)
test SPEC tetradic: generate base hues for tetradic scheme ... ok (8ms)
test ALIAS dualComplementary of tetradic ... ok (4ms)
test SPEC square: generate base hues for square scheme ... ok (6ms)
test SPEC custom: simulate complementary ... ok (3ms)
test SPEC custom: simulate analogous ... ok (3ms)
test SPEC custom: simulate triadic ... ok (4ms)
test SPEC custom: simulate square ... ok (3ms)
test SPEC custom: dyad ... ok (2ms)
test SPEC custom: extended analogous ... ok (4ms)
test SPEC custom: accented triad ... ok (4ms)
test SPEC custom: accented split complementary ... ok (3ms)
test EDGE: rejects invalid color ... ok (4ms)

test result: ok. 16 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (86ms)

#+end_src

**** Palette Creation (=color_palette.js=)

A color palette isn't complete without contrast, so we'll finish with tints, tones, and shades.

+ Tints: any color mixed with pure white
+ Tones: any color mixed with pure gray
+ Shades: any color mixed with pure black

First, I'm setting up a helper for generating my variants.

#+BEGIN_SRC js :tangle "./color_palette.js" :comments link
import { mix } from "./color_mix.js";

const generate = (color, target, contrast, count) =>
  Array.from(Array(count).fill(color)).map((base, index) =>
    mix(contrast - (contrast / count) * index, target, base)
  );
#+END_SRC

***** tints

+ =tints: (count: number, contrast: number, color: string) => string[]=
+ =count: number=: number of tints to generate
+ =contrast: number=: contrast between generated values (as a percentage)
+ =color: string=: the base color to generate tints from

#+BEGIN_SRC js :tangle "./color_palette.js" :comments link
import { pipe } from "./utilities.js";
import { extract } from "./internals/color/format/hwb.js";
import { hwb } from "./color_convert.js";
import { preserve } from "./color_adjust.js";

/**
 * Generates tints from any valid CSS color.
 *
 * @example Generating 4 high contrast tints
 *
 * ```ts
 * tints(4, 98, "royalblue");
 * ```
 *
 * @remarks
 * A color mixed with pure white creates a tint of that color.
 *
 * @param {number} count - number of tints to generate
 * @param {number} contrast - contrast of palette (as a percentage)
 * @param {string} color - the base color to generate from
 * @returns {string[]} A generated scale of tints
 */
export const tints = (
  count,
  contrast,
  color,
) => [
  ...new Set([
    ...generate(color, "white", contrast, count)
      .map((color) => pipe(color, hwb, extract))
      .sort((a, b) => parseFloat(a[1]) - parseFloat(b[1]))
      .map(([H, W, B, A]) =>
        !A ? `hwb(${H} ${W} ${B})` : `hwb(${H} ${W} ${B} / ${A})`
      )
      .map((target) => preserve(target, color)),
  ]),
];
#+END_SRC

***** tones

+ =tones: (count: number, contrast: number, color: string) => string[]=
+ =count: number=: number of tones to generate
+ =contrast: number=: contrast between generated values (as a percentage)
+ =color: string=: the base color to generate tones from

#+BEGIN_SRC js :tangle "./color_palette.js" :comments link
/**
 * Generates tones from any valid CSS color.
 *
 * @example Generating 4 high contrast tones
 *
 * ```ts
 * tones(4, 98, "royalblue");
 * ```
 *
 * @remarks
 * A color mixed with pure gray creates a tone of that color.
 *
 * Be aware that tone is also another way of referring to the hue.
 *
 * @param {number} count - number of tones to generate
 * @param {number} contrast - contrast of palette (as a percentage)
 * @param {string} color - the base color to generate from
 * @returns {string[]} A generated scale of tones
 */
export const tones = (
  count,
  contrast,
  color,
) => [
  ...new Set([
    ...generate(color, "gray", contrast, count)
      .map((color) => pipe(color, hwb, extract))
      .sort(
        (a, b) =>
          parseFloat(a[1]) +
          parseFloat(a[2]) -
          (parseFloat(b[1]) + parseFloat(b[2])),
      )
      .map(([H, W, B, A]) =>
        !A ? `hwb(${H} ${W} ${B})` : `hwb(${H} ${W} ${B} / ${A})`
      )
      .map((target) => preserve(target, color)),
  ]),
];
#+END_SRC

***** shades

+ =shades: (count: number, contrast: number, color: string) => string[]=
+ =count: number=: number of shades to generate
+ =contrast: number=: contrast between generated values (as a percentage)
+ =color: string=: the base color to generate shades from

#+BEGIN_SRC js :tangle "./color_palette.js" :comments link
/**
 * Generates shades from any valid CSS color.
 *
 * @example Generating 4 high contrast shades
 *
 * ```ts
 * shades(4, 98, "royalblue");
 * ```
 *
 * @remarks
 * A color mixed with pure black creates a shade of that color.
 *
 * @param {number} count - number of shades to generate
 * @param {number} contrast - contrast of palette (as a percentage)
 * @param {string} color - the base color to generate from
 * @returns {string[]} A generated scale of shades
 */
export const shades = (
  count,
  contrast,
  color,
) => [
  ...new Set([
    ...generate(color, "black", contrast, count)
      .map((color) => pipe(color, hwb, extract))
      .sort((a, b) => parseFloat(a[2]) - parseFloat(b[2]))
      .map(([H, W, B, A]) =>
        !A ? `hwb(${H} ${W} ${B})` : `hwb(${H} ${W} ${B} / ${A})`
      )
      .map((target) => preserve(target, color)),
  ]),
];
#+END_SRC

***** Tests

****** Color Palette Assertions

#+BEGIN_SRC js :tangle "./tests/color_palette_test.js" :comments link
import { shades, tints, tones } from "../color_palette.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

Deno.test("SPEC tints: can generate tints", function () {
  assertEquals(tints(2, 100, "red"), ["#ffb4b4", "#ffffff"]);
  assertEquals(tints(3, 100, "lime"), ["#92ff92", "#d1ffd1", "#ffffff"]);
  assertEquals(tints(4, 100, "blue"), [
    "#8080ff",
    "#b4b4ff",
    "#ddddff",
    "#ffffff",
  ]);
});

Deno.test("SPEC tones: can generate tones", function () {
  assertEquals(tones(2, 100, "red"), ["#ca5b5b", "#808080"]);
  assertEquals(tones(3, 100, "lime"), ["#4add4a", "#69b469", "#808080"]);
  assertEquals(tones(4, 100, "blue"), [
    "#4040e6",
    "#5b5bca",
    "#6f6fa9",
    "#808080",
  ]);
});

Deno.test("SPEC shades: can generate shades", function () {
  assertEquals(shades(2, 100, "red"), ["#b40000", "#000000"]);
  assertEquals(shades(3, 100, "lime"), ["#00d100", "#009200", "#000000"]);
  assertEquals(shades(4, 100, "blue"), [
    "#0000dd",
    "#0000b4",
    "#000080",
    "#000000",
  ]);
});
#+END_SRC

****** Color Palette Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/color_palette_test.js)
#+END_SRC

#+NAME: palette-test
#+begin_src shell
running 3 tests
test SPEC tints: can generate tints ... ok (46ms)
test SPEC tones: can generate tones ... ok (10ms)
test SPEC shades: can generate shades ... ok (9ms)

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (67ms)

#+end_src

**** Accessibility (=color_a11y.js=)

Accessibility is a first-class concern for every modern web project. Quarks System Core
addresses this vital aspect of digital design with the following tools.

***** clrs

+ =clrs: (color: string) => string=
+ =color: string=: a valid name for a swatch in the Colors project

#+BEGIN_SRC js :tangle "./color_a11y.js" :comments link
import { ErrorTemplate } from "./internals/error.js";
import { A11yColors } from "./data/color/a11y.js";

const ColorUndefinedError = (output) =>
  ErrorTemplate({
    message: "color not defined in Colors",
    reason: `
This error triggers when the color does not match a defined color in
the Colors project.
`,
    suggestion: `
Pass in one of the below valid colors:

navy blue aqua teal
olive green lime
yellow orange red
maroon fuchsia purple
black
gray/grey silver
white
`,
    output,
  });

/**
 * A function for using better web defaults from the Colors project.
 *
 * @example Using a more accessible teal
 *
 * ```ts
 * clrs("teal");
 * ```
 *
 * @param { "navy" | "aqua" | "blue" | "teal" | "olive" | "green" | "lime" | "yellow" | "orange" | "red" | "maroon" | "fuchsia" | "purple" | "black" | "gray" | "grey" | "silver" | "white" } color - a valid color name in the Colors project
 * @returns {string} The targeted color from the Colors project
 */
export function clrs(color) {
  if (A11yColors.hasOwnProperty(color)) {
    return A11yColors[color];
  }

  return ColorUndefinedError(color);
}
#+END_SRC

A great base for accessible palettes is the Colors project. It provides a [[https://clrs.cc][curated collection of
better default colors]] optimized for high contrast interfaces.

***** contrast

+ =contrast: (opts: { rating: "AA" | "AAA", enhanced?: boolean }, color: string, targets: string[]) => string[]=
+ =opts: { rating: "AA" | "AAA", enhanced?: boolean }=: palette contrast filtering options
  - =rating: "AA" | "AAA"=: the desired minimum WCAG color contrast accessibility rating to process a palette
  - =enhanced?: boolean=: a flag to toggle the enhanced WCAG recommendations
+ =background: string=: the background color to check against
+ =palette: string[]=: the palette to filter

QSC allows a hefty degree of flexibility in defining and generating your palettes. It also provides
a necessary guardrail to keep color choices from running afoul of usability.

#+BEGIN_SRC js :tangle "./color_a11y.js" :comments link
import {
  calcFractionFromChannel,
  significant,
} from "./internals/color/convert/setup.js";
import { extract } from "./internals/color/format/rgb.js";
import { pipe } from "./utilities.js";
import { rgb } from "./color_convert.js";

const precision = significant.bind(null, 3);

function calcRelativeLuminance(color) {
  const [R, G, B] = pipe(color, rgb, extract)
    .map((V) => pipe(V, parseFloat, calcFractionFromChannel))
    .map((V) => (V <= 0.03928 ? V / 12.92 : ((V + 0.055) / 1.055) ** 2.4));

  return R * 0.2126 + 0.7152 * G + B * 0.0722;
}

function calcRatio(a, b) {
  const [L1, L2] = [a, b]
    .sort((a, b) => calcRelativeLuminance(b) - calcRelativeLuminance(a))
    .map((V) => calcRelativeLuminance(V));

  return precision((L1 + 0.05) / (L2 + 0.05));
}

/**
 * A function that filters a palette by the colors usable with a given background.
 *
 * Colors match only if they meet the WCAG color accessibility rating defined in opts.
 *
 * @example Filtering a palette to only contain the colors that can safely be
 * used with coral while satisfying the AA contrast rating.
 *
 * ```ts
 * contrast({ rating: "AA" }, "coral", palette);
 * ```
 *
 * @example Filtering a palette to only contain the colors that can safely be
 * used with dodgerblue while satisfying the AAA rating.
 *
 * ```ts
 * contrast({ rating: "AAA" }, "dodgerblue", palette);
 * ```
 *
 * @example Using the enhanced recommendations flag
 *
 * ```ts
 * contrast({ rating: "AA", enhanced: true}, "aliceblue", palette);
 * ```
 *
 * @param {{ rating: "AA" | "AAA", enhanced?: boolean }} opts - options for filtering the palette
 * @param {string} background - the background color to check against
 * @param {string[]} palette - a palette of colors to filter
 * @returns {string[]} A new palette of colors usable with the background while satisfying
 * accessibility standards
 */
export function contrast(opts, background, palette) {
  const { rating, enhanced = false } = opts;

  return palette.filter((foreground) => {
    const ratio = calcRatio(background, foreground);
    const max = ratio <= 21;

    if (rating === "AA") {
      return (enhanced ? ratio >= 4.5 : ratio >= 3.1) && max;
    }

    if (rating === "AAA") {
      return (enhanced ? ratio >= 7 : ratio >= 4.5) && max;
    }
  });
}
#+END_SRC

Now you can filter colors in your palette against another color. The main use of this function is to
ensure the usability of your palette against the actual context of how it'll be used.

***** Tests

****** Color Accessibility Assertions

#+BEGIN_SRC js :tangle "./tests/color_a11y_test.js" :comments link
import { clrs, contrast } from "../color_a11y.js";
import { shades, tints } from "../color_palette.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

const Colors = [
  ["navy", "#001f3f"],
  ["blue", "#0074d9"],
  ["aqua", "#7fdbff"],
  ["teal", "#39cccc"],
  ["olive", "#3d9970"],
  ["green", "#2ecc40"],
  ["lime", "#01ff70"],
  ["yellow", "#ffdc00"],
  ["orange", "#ff851b"],
  ["red", "#ff4136"],
  ["maroon", "#85144b"],
  ["fuchsia", "#f012be"],
  ["purple", "#b10dc9"],
  ["black", "#111111"],
  ["gray", "#aaaaaa"],
  ["grey", "#aaaaaa"],
  ["silver", "#dddddd"],
  ["white", "#ffffff"],
];

Colors.forEach(([name, value]) =>
  Deno.test(`SPEC clrs: ${value} matches ${name}`, function () {
    assertEquals(clrs(name), value);
  })
);

Deno.test("EDGE clrs: rejects undefined color", function () {
  assertThrows(
    () => {
      throw clrs("invalid");
    },
    undefined,
    "color not defined in Colors",
  );
});

Deno.test(
  "SPEC contrast: returns the colors from a palette that can be used with a background and satisfy AA usability",
  function () {
    const color = clrs("red");
    const [bg] = tints(5, 99, color).reverse();
    const dark = shades(5, 99, color);

    assertEquals(contrast({ rating: "AA" }, bg, dark), [
      "#e43930",
      "#c6322a",
      "#a32a23",
      "#751e19",
      "#1a0705",
    ]);
  },
);

Deno.test(
  "SPEC contrast: returns the colors that satisfy AAA usability",
  function () {
    const color = clrs("red");
    const [bg] = tints(5, 99, color).reverse();
    const dark = shades(5, 99, color);

    assertEquals(contrast({ rating: "AAA" }, bg, dark), [
      "#c6322a",
      "#a32a23",
      "#751e19",
      "#1a0705",
    ]);
  },
);

Deno.test(
  "SPEC contrast: respects the enhanced rating boolean property",
  function () {
    const color = clrs("red");
    const [bg] = tints(5, 99, color).reverse();
    const dark = shades(5, 99, color);

    assertEquals(contrast({ rating: "AA", enhanced: true }, bg, dark), [
      "#c6322a",
      "#a32a23",
      "#751e19",
      "#1a0705",
    ]);

    assertEquals(contrast({ rating: "AAA", enhanced: true }, bg, dark), [
      "#a32a23",
      "#751e19",
      "#1a0705",
    ]);
  },
);
#+END_SRC

****** Color Accessibility Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/color_a11y_test.js)
#+END_SRC

#+NAME: a11y-test
#+begin_src shell
running 22 tests
test SPEC clrs: #001f3f matches navy ... ok (7ms)
test SPEC clrs: #0074d9 matches blue ... ok (2ms)
test SPEC clrs: #7fdbff matches aqua ... ok (3ms)
test SPEC clrs: #39cccc matches teal ... ok (7ms)
test SPEC clrs: #3d9970 matches olive ... ok (2ms)
test SPEC clrs: #2ecc40 matches green ... ok (1ms)
test SPEC clrs: #01ff70 matches lime ... ok (10ms)
test SPEC clrs: #ffdc00 matches yellow ... ok (7ms)
test SPEC clrs: #ff851b matches orange ... ok (4ms)
test SPEC clrs: #ff4136 matches red ... ok (2ms)
test SPEC clrs: #85144b matches maroon ... ok (4ms)
test SPEC clrs: #f012be matches fuchsia ... ok (3ms)
test SPEC clrs: #b10dc9 matches purple ... ok (3ms)
test SPEC clrs: #111111 matches black ... ok (3ms)
test SPEC clrs: #aaaaaa matches gray ... ok (11ms)
test SPEC clrs: #aaaaaa matches grey ... ok (3ms)
test SPEC clrs: #dddddd matches silver ... ok (6ms)
test SPEC clrs: #ffffff matches white ... ok (6ms)
test EDGE clrs: rejects undefined color ... ok (6ms)
test SPEC contrast: returns the colors from a palette that can be used with a background and satisfy AA usability ... ok (77ms)
test SPEC contrast: returns the colors that satisfy AAA usability ... ok (31ms)
test SPEC contrast: respects the enhanced rating boolean property ... ok (37ms)

test result: ok. 22 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (239ms)

#+end_src

*** Typography (=typography.js=)

Quarks System Core isn't focused much on typography at this point, but it does provide a single
function =systemfonts()= to aid [[https://systemfontstack.com][prototyping with system font stacks]]. I'll expand this module as
needed in step with the project's growth.

**** systemfonts

+ =systemfonts: (...families: ("san-serif" | "serif" | "monospace")[]) => string[]=
+ =...families: ("sans-serif" | "serif" | "monospace")[]=: keywords matching the available system font
  stacks

#+BEGIN_SRC js :tangle "./typography.js" :comments link
import { SystemFontStacks } from "./data/typography/system.js";
import { ErrorTemplate } from "./internals/error.js";

const SystemFamilyError = (output) =>
  ErrorTemplate({
    message: "key is not a system font stack family",
    reason: `
This error is triggered when one or more of the keys passed into
systemfonts() is invalid.
`,
    suggestion: `
Pass in valid system font stack keywords as strings.

Examples:

systemfonts("sans-serif", "monospace");
systemfonts("sans-serif", "serif");
systemfonts("sans-serif");
systemfonts("sans-serif", "serif", "monospace");
`,
    output,
  });

/**
 * Outputs a collection of system font stacks.
 *
 * @example Outputting a single family
 *
 * ```ts
 * systemfonts("sans-serif");
 * ```
 *
 * @example Outputting multiple families
 *
 * ```ts
 * systemfonts("sans-serif", "serif");
 * ```
 *
 * @example Outputting all families
 *
 * ```ts
 * systemfonts("sans-serif", "serif", "monospace");
 * ```
 *
 * @param {("sans-serif" | "serif" | "monospace")[]} families - keyword(s) matching available system font stacks
 * @returns {string[]} An array of system font stacks
 */
export function systemfonts(...families) {
  if (
    families.every((family) =>
      family === "sans-serif" || family === "serif" || family === "monospace"
    )
  ) {
    return families.map((family) => SystemFontStacks[family]);
  }

  return SystemFamilyError(families);
}
#+END_SRC

**** Tests

***** Typography Assertions

#+BEGIN_SRC js :tangle "./tests/typography_test.js" :comments link
import { systemfonts } from "../typography.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

Deno.test("SPEC systemfonts: can output a collection of system font stacks for prototyping", function () {
  assertEquals(systemfonts("sans-serif"), [
    "-apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif",
  ]);
  assertEquals(systemfonts("sans-serif", "serif"), [
    "-apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif",
    "Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol",
  ]);
  assertEquals(systemfonts("sans-serif", "serif", "monospace"), [
    "-apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif",
    "Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol",
    "Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace",
  ]);
});

Deno.test("EGDE systemfonts: rejects invalid family keys", function () {
  assertThrows(
    () => {
      throw systemfonts("invalid");
    },
    undefined,
    "not a system font stack family",
  );
});
#+END_SRC

***** Typography Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/typography_test.js)
#+END_SRC

#+NAME: typography-test
#+begin_src shell
running 2 tests
test SPEC systemfonts: can output a collection of system font stacks for prototyping ... ok (6ms)
test EGDE systemfonts: rejects invalid family keys ... ok (3ms)

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (10ms)

#+end_src

*** Modular Scale (=modular_scale.js=)

Now that I'm all set for color, I can begin thinking about sizing and proportion. Modular scales are
the best way to manage consistency between values. They can be used for:

+ typographical hierarchy
+ spacing
+ sizing
+ border widths

The Quarks System Core scale module is more or less unchanged from QuarkSuite 1 with the addition of
error handling to catch bad input.

It begins with creating a scale as a collection of raw values that the remaining utilities consume
and modify before finally attaching units for output.

**** create

+ =create: (values: number, ratio: number, base: number) => number[]=
+ =values: number=: the number of values to include (output range)
+ =ratio: number=: the ratio maintained between each value in the scale
+ =base: number=: initial scale value

The formula to calculate each value in the scale is straightforward. The array is first filled with
the base value, then multiplied with ratio to the nth of the current index.

Example: when =base = 1=, =ratio = 2=, =index = 2=, then ~base * ratio ** index === 1 * 2 ** 2 === 1 * 4 === 4~

#+BEGIN_SRC js :tangle "./modular_scale.js" :comments link
/**
 * Create a new modular scale.
 *
 * @example Create a 6 value scale from base of 1 with ratio of 1.5
 *
 * ```ts
 * create(6, 1.5, 1);
 * ```
 *
 * @param {number} values - the number of values to include (output range)
 * @param {number} ratio - the ratio maintained between each value
 * @param {number} base - the initial scale value
 * @returns {number[]} An array of raw modular scale values
 */
export const create = (values, ratio, base) =>
  Array(values).fill(base).map((base, index) => base * ratio ** index);
#+END_SRC

**** update

+ =update: (calc: (n: number) => number, scale: number[]) => number[]=
+ =calc: (: number) => number=: the desired calculation to modify each scale value
+ =scale: number[]=: the scale to update

This utility updates the values in created scales with a user-defined recalculation and outputs a
new scale from the results.

#+BEGIN_SRC js :tangle "./modular_scale.js" :comments link
import { ErrorTemplate } from "./internals/error.js";

const ScaleError = (output) =>
  ErrorTemplate({
    message: "not a modular scale",
    reason: `
This error triggers when the value passed in as scale is not actually
a modular scale.
`,
    suggestion: `
Ensure that you only use scale modification functions on modular scales.
Create one with create()

Example:

create(8, 2, 1);

  `,
    output,
  });

function unlessMS(body, data) {
  if (
    Array.isArray(data) && data.length &&
    data.every((n) => typeof n === "number")
  ) {
    return body;
  }

  return ScaleError(data);
}

/**
 * Update a scale with a calculation mapping to each value.
 *
 * @example Add ten to each scale value
 *
 * ```ts
 * update(n => n + 10, create(4, 2, 1));
 * ```
 *
 * @param {(n: number) => number} calc - the desired calculation to modify each scale value
 * @param {number[]} scale - the scale to update
 * @returns {number[]} A new scale with updated values
 */
export const update = (calc, scale) =>
  unlessMS(scale.map((n) => calc(n)), scale);
#+END_SRC

For each function beyond this point, I'll need to ensure that data passed in is a raw modular
scale. I wrote a template function to tell the interpreter that nothing should be done unless the
data is a modular scale and throw an error reminding the user to =create()= one if they haven't.

**** merge

+ =merge: (...scales: number[][]) => number[]=
+ =...scales: number[][]=: any number of scales to merge

#+BEGIN_SRC js :tangle "./modular_scale.js" :comments link
/**
 * Merge two or more scales into a scale of their unique values.
 *
 * @example Merge scale a with scale b
 *
 * ```ts
 * merge(create(5, 1.5, 1), create(8, 1.25, 1));
 * ```
 *
 * @param {number[][]} scales - the scales to merge
 * @returns {number[]} A new scale of unique values
 */
export const merge = (...scales) =>
  scales.every((scale) => unlessMS(scale, scale)) && [
    ...new Set(scales.reduce((acc, scale) => [...acc, ...scale], [])),
  ].sort((a, b) => a - b);
#+END_SRC

Using a Set guarantees that the merge will only return the unique values in each scale.

**** chunk

+ =chunk: (size: number, scale: number[]) => number[][]=
+ =size: number=: number of values to capture in each chunk
+ =scale: number[]=: the scale you want to chunk

#+BEGIN_SRC js :tangle "./modular_scale.js" :comments link
/**
 * Splits a scale into smaller scales of a given size.
 *
 * @example Split a 30 value scale into 6 chunks of 5 values
 *
 * ```ts
 * chunk(6, create(30, 1.414, 1));
 * ```
 *
 * @param {number} size - the number of values in each chunk
 * @param {number[]} scale - the scale to chunk
 * @returns {number[][]} A new scale of chunked scale values
 */
export const chunk = (size, scale) =>
  unlessMS(
    Array.from(scale).reduceRight(
      (acc, _v, _i, arr) => [...acc, arr.splice(0, size)],
      [],
    ),
    scale,
  );
#+END_SRC

**** units

+ =units: (unit: string, scale: number[]) => string[]=
+ =unit: string=: any valid CSS relative or absolute unit
+ =scale: number[]=: raw value scale for processing

#+BEGIN_SRC js :tangle "./modular_scale.js" :comments link
import { significant } from "./internals/color/convert/setup.js";

const precision = significant.bind(null, 4);

/**
 * Attach units to a raw scale to create a CSS-ready modular scale.
 *
 * @example Output a scale as rems
 *
 * ```ts
 * units("rem", create(7, 1.25, 1));
 * ```
 *
 * @param { "cm" | "mm" | "Q" | "in" | "pc" | "pt" | "px" | "em" | "ex" | "ch" | "rem" | "lh" | "vw" | "vh" | "vmin" | "vmax" } unit - any valid relative or absolute CSS unit
 * @param {number[]} scale - the raw scale to generate from
 * @returns {string[]} A finished modular scale now ready to use
 */
export const units = (unit, scale) =>
  unlessMS(scale.map((n) => `${precision(n)}${unit}`), scale);
#+END_SRC

**** Tests

***** Modular Scale Assertions

Alright. Time to test the scale creation flow and error handling.

#+BEGIN_SRC js :tangle "./tests/modular_scale_test.js" :comments link
import { chunk, create, merge, units, update } from "../modular_scale.js";

import {
  assertEquals,
  assertThrows,
} from "https://deno.land/std@0.86.0/testing/asserts.ts";

Deno.test("SPEC create: can generate raw modular scales", function () {
  assertEquals(create(6, 1.25, 1), [
    1,
    1.25,
    1.5625,
    1.953125,
    2.44140625,
    3.0517578125,
  ]);
  assertEquals(create(8, 1.5, 1), [
    1,
    1.5,
    2.25,
    3.375,
    5.0625,
    7.59375,
    11.390625,
    17.0859375,
  ]);
  assertEquals(create(10, 2, 1), [
    1,
    2,
    4,
    8,
    16,
    32,
    64,
    128,
    256,
    512,
  ]);
});

Deno.test("SPEC update: can update values with an in-place recalculation", function () {
  const scale = create(8, 2, 1);

  assertEquals(update((n) => n + 16, scale), [
    17,
    18,
    20,
    24,
    32,
    48,
    80,
    144,
  ]);
  assertEquals(update((n) => n / 4, scale), [
    0.25,
    0.5,
    1,
    2,
    4,
    8,
    16,
    32,
  ]);
  assertEquals(update((n) => n * 2, scale), [
    2,
    4,
    8,
    16,
    32,
    64,
    128,
    256,
  ]);
});

Deno.test("SPEC merge: can combine values from multiple scales into one scale", function () {
  const a = create(8, 1.5, 1);
  const b = create(6, 1.25, 1);
  const c = create(4, 1.75, 1);

  assertEquals(merge(a, b), [
    1,
    1.25,
    1.5,
    1.5625,
    1.953125,
    2.25,
    2.44140625,
    3.0517578125,
    3.375,
    5.0625,
    7.59375,
    11.390625,
    17.0859375,
  ]);
  assertEquals(merge(a, c), [
    1,
    1.5,
    1.75,
    2.25,
    3.0625,
    3.375,
    5.0625,
    5.359375,
    7.59375,
    11.390625,
    17.0859375,
  ]);
  assertEquals(merge(b, c), [
    1,
    1.25,
    1.5625,
    1.75,
    1.953125,
    2.44140625,
    3.0517578125,
    3.0625,
    5.359375,
  ]);
});

Deno.test("SPEC chunk: can split a larger set of scale values into multiple scales of a given size", function () {
  const [first, second, third, ...rest] = chunk(5, create(24, 1.5, 1));

  assertEquals(first, [1, 1.5, 2.25, 3.375, 5.0625]);
  assertEquals(second, [
    7.59375,
    11.390625,
    17.0859375,
    25.62890625,
    38.443359375,
  ]);
  assertEquals(third, [
    57.6650390625,
    86.49755859375,
    129.746337890625,
    194.6195068359375,
    291.92926025390625,
  ]);
  assertEquals(rest, [
    [
      437.8938903808594,
      656.8408355712891,
      985.2612533569336,
      1477.8918800354004,
      2216.8378200531006,
    ],
    [
      3325.256730079651,
      4987.885095119476,
      7481.8276426792145,
      11222.741464018822,
    ],
  ]);
});

Deno.test("SPEC units: can attach units and output CSS-ready modular scales", function () {
  assertEquals(units("rem", create(6, 1.5, 1)), [
    "1rem",
    "1.5rem",
    "2.25rem",
    "3.375rem",
    "5.063rem",
    "7.594rem",
  ]);
  assertEquals(units("ex", create(4, 2, 1)), [
    "1ex",
    "2ex",
    "4ex",
    "8ex",
  ]);
  assertEquals(units("pt", create(5, 1.25, 12)), [
    "12pt",
    "15pt",
    "18.75pt",
    "23.44pt",
    "29.3pt",
  ]);
});

Deno.test("EDGE: scale modifiers (update, merge, chunk, units) reject empty scales", function () {
  assertThrows(
    () => {
      throw update((n) => n, []);
    },
    undefined,
    "not a modular scale",
  );
  assertThrows(
    () => {
      throw merge([], []);
    },
    undefined,
    "not a modular scale",
  );
  assertThrows(
    () => {
      throw chunk(3, []);
    },
    undefined,
    "not a modular scale",
  );
  assertThrows(
    () => {
      throw units("rem", []);
    },
    undefined,
    "not a modular scale",
  );
});
#+END_SRC

***** Modular Scale Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/modular_scale_test.js)
#+END_SRC

#+NAME: scale-test
#+begin_src shell
running 6 tests
test SPEC create: can generate raw modular scales ... ok (6ms)
test SPEC update: can update values with an in-place recalculation ... ok (2ms)
test SPEC merge: can combine values from multiple scales into one scale ... ok (1ms)
test SPEC chunk: can split a larger set of scale values into multiple scales of a given size ... ok (2ms)
test SPEC units: can attach units and output CSS-ready modular scales ... ok (3ms)
test EDGE: scale modifiers (update, merge, chunk, units) reject empty scales ... ok (3ms)

test result: ok. 6 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (18ms)

#+end_src

*** Design Token Output Formats (=design_tokens.js=)

All the modules necessary to create a design system foundation are in place, but it wouldn't be very
useful or portable in its current form. Data has to be packaged as a Quarks System Dictionary
object and then transformed into design tokens with the below build functions.

#+BEGIN_QUOTE
Quarks System Core is the barest metal component and has no need for filesystem read/write
access. Therefore, the build functions limit themselves to formatting data to a /file-ready/ state.

If you want to /write/ the tokens to your filesystem, use the native filesystem API provided by your
JavaScript environment or a filesystem library of your choice.
#+END_QUOTE

#+BEGIN_SRC js :tangle "./design_tokens.js" :comments link
export * from "./output_css.js";
export * from "./export_data.js";
export * from "./transform_data.js";
#+END_SRC

**** CSS (=output_css.js=)

QuarkSuite is made from web technologies for the web platform, so CSS format support is
essential. Whether you like it vanilla or swear by preprocessors, it's covered.

The output has mostly cosmetic differences between the formats, so I'll set up a general
design token construction helper.

#+BEGIN_SRC js :tangle "./output_css.js" :comments link
const formatter = ({
  padding = "",
  prefix = "--",
  operator = ": ",
  suffix = ";",
  eol = "\n",
}) =>
  (collector, key, value) =>
    collector.concat(padding, prefix, key, operator, value, suffix, eol);

const variable = (collected, current, delimiter) =>
  current === "base"
    ? collected
    : collected
    ? [collected, current].join(delimiter)
    : current;

function construct(opts, dict) {
  const aggregator = (head, node) =>
    Object.entries(node).reduce((product, [key, value]) => {
      const format = formatter(opts);
      const delimiter = "-";

      return typeof value === "object"
        ? product.concat(aggregator(variable(head, key, delimiter), value))
        : format(product, variable(head, key, delimiter), value);
    }, "");

  return "".concat("\n", aggregator("", dict));
}
#+END_SRC

The =formatter= queues up any syntax options that need to change between formats before assembling
the token itself. The =variable= is constructed by recursively walking the Quarks System Dictionary
object passed in, only returning when the value is found at the end of the chain.

***** css

+ =css: (dict: object) => string=
+ =dict: object=: the dictionary to process

#+BEGIN_SRC js :tangle "./output_css.js" :comments link
/**
 * Transforms Quark System Dictionaries into CSS custom properties.
 *
 * @example
 *
 * ```ts
 * css(dict);
 * ```
 *
 * @remarks
 * This function does not actually build the files as the core has no need
 * for read/write access.
 *
 * You'll want to use the native API or filesystem library of your choice in
 * your JavaScript environment to output the files.
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as CSS custom properties (file-ready)
 */
export const css = (dict) => `\n:root {${construct({ padding: "  " }, dict)}}`;
#+END_SRC

***** sass

+ =sass: (dict: object) => string=
+ =dict: object=: the dictionary to process

#+BEGIN_SRC js :tangle "./output_css.js" :comments link
/**
 * Transforms Quark System Dictionaries into Sass variables.
 *
 * @example
 *
 * ```ts
 * sass(dict);
 * ```
 *
 * @remarks
 * This function does not actually write files as the core has no need
 * for read/write access.
 *
 * You'll want to use the native API or filesystem library of your choice in
 * your JavaScript environment to output the files.
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as Sass variables (file-ready)
 */
export const sass = (dict) => construct({ prefix: "$" }, dict);
#+END_SRC

***** less

+ =less: (dict: object) => string=
+ =dict: object=: the dictionary to process

#+BEGIN_SRC js :tangle "./output_css.js" :comments link
/**
 * Transforms Quark System Dictionaries into Less variables.
 *
 * @example
 *
 * ```ts
 * less(dict);
 * ```
 *
 * @remarks
 * This function does not actually write files as the core has no need
 * for read/write access.
 *
 * You'll want to use the native API or filesystem library of your choice in
 * your JavaScript environment to output the files.
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as Less variables (file-ready)
 */
export const less = (dict) => construct({ prefix: "@" }, dict);
#+END_SRC

***** styl

+ =styl: (dict: object) => string=
+ =dict: object=: the dictionary to process

#+BEGIN_SRC js :tangle "./output_css.js" :comments link
/**
 * Transforms Quark System Dictionaries into Stylus variables.
 *
 * @example
 *
 * ```ts
 * styl(dict);
 * ```
 *
 * @remarks
 * This function does not actually write files as the core has no need
 * for read/write access.
 *
 * You'll want to use the native API or filesystem library of your choice in
 * your JavaScript environment to output the files.
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as Stylus variables (file-ready)
 */
export const styl = (dict) =>
  construct({ prefix: "", operator: " = ", suffix: "" }, dict);
#+END_SRC

***** Tests

****** CSS Format Assertions

#+BEGIN_SRC js :tangle "./tests/output_css_test.js" :comments link
import { css, less, sass, styl } from "../output_css.js";
import { clrs } from "../color_a11y.js";
import { triadic } from "../color_scheme.js";
import { shades, tints } from "../color_palette.js";

import { assertStrictEquals } from "https://deno.land/std@0.86.0/testing/asserts.ts";

const swatch = clrs("red");
const [main, accent, highlight] = triadic(swatch);
const light = tints.bind(null, 3, 99);
const dark = shades.bind(null, 2, 99);

const dict = {
  color: {
    main: {
      base: main,
      light: light(main),
      dark: dark(main),
    },
    accent: {
      base: accent,
      dark: dark(accent),
    },
    highlight,
  },
};

Deno.test(
  "SPEC css: can process dictionary into CSS custom properties",
  function () {
    assertStrictEquals(
      css(dict),
      `
:root {
  --color-main: #ff4036;
  --color-main-light-0: #ff9d99;
  --color-main-light-1: #ffd3d2;
  --color-main-light-2: #fffefe;
  --color-main-dark-0: #b42d26;
  --color-main-dark-1: #1a0605;
  --color-accent: #4036ff;
  --color-accent-dark-0: #2d26b4;
  --color-accent-dark-1: #06051a;
  --color-highlight: #36ff40;
}`,
    );
  },
);

Deno.test(
  "SPEC sass: can process dictionary into Sass variables",
  function () {
    assertStrictEquals(
      sass(dict),
      `
$color-main: #ff4036;
$color-main-light-0: #ff9d99;
$color-main-light-1: #ffd3d2;
$color-main-light-2: #fffefe;
$color-main-dark-0: #b42d26;
$color-main-dark-1: #1a0605;
$color-accent: #4036ff;
$color-accent-dark-0: #2d26b4;
$color-accent-dark-1: #06051a;
$color-highlight: #36ff40;
`,
    );
  },
);

Deno.test(
  "SPEC less: can process dictionary into Less variables",
  function () {
    assertStrictEquals(
      less(dict),
      `
@color-main: #ff4036;
@color-main-light-0: #ff9d99;
@color-main-light-1: #ffd3d2;
@color-main-light-2: #fffefe;
@color-main-dark-0: #b42d26;
@color-main-dark-1: #1a0605;
@color-accent: #4036ff;
@color-accent-dark-0: #2d26b4;
@color-accent-dark-1: #06051a;
@color-highlight: #36ff40;
`,
    );
  },
);

Deno.test(
  "SPEC styl: can process dictionary into Stylus variables",
  function () {
    assertStrictEquals(
      styl(dict),
      `
color-main = #ff4036
color-main-light-0 = #ff9d99
color-main-light-1 = #ffd3d2
color-main-light-2 = #fffefe
color-main-dark-0 = #b42d26
color-main-dark-1 = #1a0605
color-accent = #4036ff
color-accent-dark-0 = #2d26b4
color-accent-dark-1 = #06051a
color-highlight = #36ff40
`,
    );
  },
);
#+END_SRC

****** CSS Format Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/output_css_test.js)
#+END_SRC

#+NAME: css-test
#+begin_src shell
running 4 tests
test SPEC css: can process dictionary into CSS custom properties ... ok (5ms)
test SPEC sass: can process dictionary into Sass variables ... ok (2ms)
test SPEC less: can process dictionary into Less variables ... ok (2ms)
test SPEC styl: can process dictionary into Stylus variables ... ok (2ms)

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (12ms)

#+end_src

**** Data Export (=export_data.js=)

Quarks System Core also supports exporting tokens in general data formats (raw JSON and YAML
supported as of this writing). This allows complete detachment from the core and the portability to
use system data outside of JavaScript environments.

***** raw

+ =raw: (dict: object) => object=
+ =dict: object=: the dictionary to process

#+BEGIN_SRC js :tangle "./export_data.js" :comments link
/**
 * Transforms Quark System Dictionaries into raw JSON data.
 *
 * @example
 *
 * ```ts
 * raw(dict);
 * ```
 *
 * @remarks
 * This function does not actually write files as the core has no need
 * for read/write access.
 *
 * You'll want to use the native API or filesystem library of your choice in
 * your JavaScript environment to output the files.
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as raw JSON data (file-ready)
 */
export const raw = (dict) => JSON.stringify(dict, null, 2);
#+END_SRC

***** yaml

+ =yaml: (dict: object) => string=
+ =dict: object=: the dictionary to process

YAML is a whitespace-dependent data format, so I kept that in mind when constructing the helper
bits. The way it works: specific data builders execute when the function encounters the right kind
of data.

And then the main function recursively walks through the dictionary to completion.

#+BEGIN_SRC js :tangle "./export_data.js" :comments link
const whitespace = 2;

const value = (level, str, key, value) =>
  str.concat("".padStart(level), key, ": ", value, "\n");

const scale = (level, str, key, value) =>
  str.concat(
    "".padStart(level),
    key,
    ":\n",
    value.reduce(
      (s, v) => s.concat("".padStart(level + whitespace), "- ", v, "\n"),
      "",
    ),
  );

const subcategory = (level, data) =>
  Object.entries(data).reduce((str, [key, v]) => {
    if (Array.isArray(v)) return scale(level, str, key, v);
    return value(level, str, key, v);
  }, "");

const assemble = (level, tree) =>
  Object.entries(tree).reduce((str, [key, data]) => {
    if (typeof data === "string") return value(level, str, key, data);
    if (Array.isArray(data)) return scale(level, str, key, data);
    if (key === "base") return subcategory(level, data);
    return str.concat(
      "".padStart(level),
      key,
      ":\n",
      assemble(level + whitespace, data),
    );
  }, "");

/**
 * Transforms Quark System Dictionaries into YAML data.
 *
 * @example
 *
 * ```ts
 * yaml(dict);
 * ```
 *
 * @remarks
 * This function does not actually write files as the core has no need
 * for read/write access.
 *
 * You'll want to use the native API or filesystem library of your choice in
 * your JavaScript environment to output the files.
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as yaml data (file-ready)
 */
export const yaml = (dict) =>
  Object.entries(dict)
    .reduce((str, [key, data]) => {
      if (typeof data === "string") return value(0, str, key, data);
      if (Array.isArray(data)) return scale(0, str, key, data);
      if (key === "base") return subcategory(0, data);
      return str.concat("\n", key, ":\n", assemble(whitespace, data));
    }, "")
    .trimEnd();
#+END_SRC

***** Tests

****** Data Export Assertions

#+BEGIN_SRC js :tangle "./tests/export_data_test.js" :comments link
import { raw, yaml } from "../export_data.js";
import { clrs } from "../color_a11y.js";
import { triadic } from "../color_scheme.js";
import { shades, tints } from "../color_palette.js";

import { assertStrictEquals } from "https://deno.land/std@0.86.0/testing/asserts.ts";

const swatch = clrs("red");
const [main, accent, highlight] = triadic(swatch);
const light = tints.bind(null, 3, 99);
const dark = shades.bind(null, 2, 99);

const dict = {
  color: {
    main: {
      base: main,
      light: light(main),
      dark: dark(main),
    },
    accent: {
      base: accent,
      dark: dark(accent),
    },
    highlight,
  },
};

Deno.test(
  "SPEC raw: exports dictionary data as raw JSON",
  function () {
    assertStrictEquals(
      raw(dict),
      `{
  "color": {
    "main": {
      "base": "#ff4036",
      "light": [
        "#ff9d99",
        "#ffd3d2",
        "#fffefe"
      ],
      "dark": [
        "#b42d26",
        "#1a0605"
      ]
    },
    "accent": {
      "base": "#4036ff",
      "dark": [
        "#2d26b4",
        "#06051a"
      ]
    },
    "highlight": "#36ff40"
  }
}`,
    );
  },
);

Deno.test(
  "SPEC yaml: exports dictionary data as YAML",
  function () {
    assertStrictEquals(
      yaml(dict),
      `
color:
  main:
    base: #ff4036
    light:
      - #ff9d99
      - #ffd3d2
      - #fffefe
    dark:
      - #b42d26
      - #1a0605
  accent:
    base: #4036ff
    dark:
      - #2d26b4
      - #06051a
  highlight: #36ff40`,
    );
  },
);
#+END_SRC

****** Data Export Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/export_data_test.js)
#+END_SRC

#+NAME: export-test
#+begin_src shell
running 2 tests
test SPEC raw: transforms a dictionary into its raw JSON data ... ok (3ms)
test SPEC yaml: transforms a dictionary to YAML formatted data ... ok (2ms)

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (6ms)

#+end_src

**** Data Transforms (=transform_data.js=)

The final set of token formats are reserved for integrating with other tools that use and transform
design data. Currently, it supports tools that I use regularly in my own projects (TailwindCSS and
Style Dictionary), but more will be added as the project grows.

***** tailwind

+ =tailwind: (dict: object) => string=
+ =dict: object=: the dictionary to process

#+BEGIN_SRC js :tangle "./transform_data.js" :comments link
/**
 * Reformats Quark System Dictionaries as TailwindCSS theme data.
 *
 * @example
 *
 * ```ts
 * tailwind(dict);
 * ```
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as TailwindCSS theme data (file-ready)
 */
export const tailwind = (dict) =>
  Object.entries(dict).reduce((acc, [key, data]) => {
    if (key === "base") return { ...acc, DEFAULT: data };
    if (Array.isArray(data)) {
      return {
        ...acc,
        ...{
          ...data.reduce((a, v, i) => {
            return { ...a, [[key, i + 2].join("")]: v };
          }, {}),
        },
      };
    }
    if (typeof data === "object") return { ...acc, [key]: tailwind(data) };
    return { ...acc, [key]: data };
  }, {});
#+END_SRC

***** styledict

+ =styledict: (dict: object) => string=
+ =dict: object=: the dictionary to process

#+BEGIN_SRC js :tangle "./transform_data.js" :comments link
/**
 * Reformats Quark System Dictionaries as Style Dictionary properties.
 *
 * @example
 *
 * ```ts
 * styledict(dict);
 * ```
 *
 * @remarks
 * This function does not actually write files as the core has no need
 * for read/write access.
 *
 * You'll want to use the native API or filesystem library of your choice in
 * your JavaScript environment to output the files.
 *
 * @param {object} dict - the dictionary data to process
 * @returns {string} The transformed dictionary as Style Dictionary properties (file-ready)
 */
export const styledict = (dict) =>
  Object.entries(dict).reduce((acc, [key, data]) => {
    if (typeof data === "object") {
      return { ...acc, [key]: styledict(data) };
    }
    return { ...acc, [key]: { value: String(data) } };
  }, {});
#+END_SRC

***** Tests

****** Data Transform Assertions

#+BEGIN_SRC js :tangle "./tests/transform_data_test.js" :comments link
import { styledict, tailwind } from "../transform_data.js";
import { clrs } from "../color_a11y.js";
import { triadic } from "../color_scheme.js";
import { shades, tints } from "../color_palette.js";

import { assertEquals } from "https://deno.land/std@0.86.0/testing/asserts.ts";

const swatch = clrs("red");
const [main, accent, highlight] = triadic(swatch);
const light = tints.bind(null, 3, 99);
const dark = shades.bind(null, 2, 99);

const dict = {
  color: {
    main: {
      base: main,
      light: light(main)[0],
      lighter: light(main)[1],
      lightest: light(main)[2],
      dark: dark(main)[0],
      darker: dark(main)[1],
    },
    accent: {
      base: accent,
      dark: dark(accent)[0],
      darker: dark(accent)[1],
    },
    highlight,
  },
};

Deno.test(
  "SPEC tailwind: transforms dictionary data into TailwindCSS theme",
  function () {
    assertEquals(tailwind(dict), {
      color: {
        main: {
          DEFAULT: "#ff4036",
          light: "#ff9d99",
          lighter: "#ffd3d2",
          lightest: "#fffefe",
          dark: "#b42d26",
          darker: "#1a0605",
        },
        accent: { DEFAULT: "#4036ff", dark: "#2d26b4", darker: "#06051a" },
        highlight: "#36ff40",
      },
    });
  },
);

Deno.test(
  "SPEC styledict: transforms dictionary data into Style Dictionary properties",
  function () {
    assertEquals(styledict(dict), {
      color: {
        main: {
          base: {
            value: "#ff4036",
          },
          dark: {
            value: "#b42d26",
          },
          darker: {
            value: "#1a0605",
          },
          light: {
            value: "#ff9d99",
          },
          lighter: {
            value: "#ffd3d2",
          },
          lightest: {
            value: "#fffefe",
          },
        },
        accent: {
          base: {
            value: "#4036ff",
          },
          dark: {
            value: "#2d26b4",
          },
          darker: {
            value: "#06051a",
          },
        },
        highlight: {
          value: "#36ff40",
        },
      },
    });
  },
);
#+END_SRC

****** Data Transform Results

#+BEGIN_SRC shell
printf '%s\n' (NO_COLOR=true deno test ./tests/data_transform_test.js)
#+END_SRC

#+NAME: transform-test
#+begin_src shell
running 2 tests
test SPEC tailwind: can reformat a dictionary as Tailwind theme data ... ok (6ms)
test SPEC styledict: can reformat a dictionary as Style Dictionary properties ... ok (13ms)

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out (19ms)

#+end_src

** Internals

This section documents and implements useful internal functions that aid in developing the core
itself. They are not publicly accessible. The only reason you'd want to read this section is if
you're interested in the nuts and bolts of this project.

*** Error Handling (=internals/error.js=)

#+BEGIN_SRC js :tangle "./internals/error.js" :comments link
/** Error message template */
export function ErrorTemplate(
  { message, reason, suggestion, output } = {
    message: "something went wrong",
    reason: "here's why",
    suggestion: "try this",
    output: undefined,
  },
) {
  throw new Error(`
ERROR: ${message.trimEnd()}
${"=".repeat(60)}
REASON: ${reason.trimEnd()}
TRY: ${suggestion.trimEnd()}
${"-".repeat(60)}
OUTPUT: ${output};
`);
}
#+END_SRC

I believe in the power of good error messages in helping developers solve their own problems. Human-readable errors also decrease the likelihood that you'll need to consult documentation during your workflow.

The format of error messages thrown by the core is straightforward.

#+BEGIN_SRC text
ERROR: something went wrong
============================================================
REASON: here's why
TRY: troubleshooting suggestions
------------------------------------------------------------
OUTPUT: "and what actually happened";
#+END_SRC

*** Color
**** Formats (=internals/color/format/index.js=)

QuarkSuite is designed primarily for web technologies and handles all current (and upcoming) CSS color
formats. This section documents how the QSC validates colors and extracts color values.

It also includes a pseudo-implementation of a non-standard format for special purposes: Oklab.

#+BEGIN_SRC js :tangle "./internals/color/format/index.js" :comments link
/** Internal format validation/extraction utilities */

// Currently supported CSS formats
export * as hex from "./hex.js";
export * as named from "./named.js";
export * as rgb from "./rgb.js";
export * as hsl from "./hsl.js";

// Proposed future formats
export * as cmyk from "./device-cmyk.js";
export * as hwb from "./hwb.js";
export * as lab from "./lab.js";
export * as lch from "./lch.js";

// Non-standard
export * as oklab from "./oklab.js";
#+END_SRC

From the format index, you can see at a glance which color formats are currently supported.

***** RGB Hex (=internals/color/format/hex.js=)

Hexadecimal colors are the most common format on the web. Below is a table showing the acceptable
formats in CSS and some examples. I also think of them as color primitives, because hex /begins/ the
conversion chain to other formats.

#+NAME: hex-samples
| Color   | Value     |
|---------+-----------|
| Black   | =#000000=   |
| Gray    | =#808080=   |
| White   | =#ffffff=   |
| Red     | =#ff0000=   |
| Yellow  | =#ffff00=   |
| Green   | =#00ff00=   |
| Cyan    | =#00ffff=   |
| Blue    | =#0000ff=   |
| Magenta | =#ff00ff=   |
| Etc.    | =#ace=      |
|         | =#bea=      |
|         | =#fed=      |
|         | =#face=     |
|         | =#cafe=     |
|         | =#deaded=   |
|         | =#c0ffee=   |
|         | =#4991ccaa= |
|         | =#abcdef68=  |

****** Hex Validator

The regular expression to validate a hex color is short.

#+BEGIN_SRC js :tangle "./internals/color/format/hex.js" :comments link
/** Validate: hex color */
export const validate = (color) => /^#([\da-f]{3,4}){1,2}$/i.test(color);
#+END_SRC

Let's see if all the colors defined in the format table pass:

#+BEGIN_SRC js :results output code replace :allow read :var hexTable=hex-samples
const hex = await import(`${Deno.cwd()}/internals/color/format/hex.js`);
const colors = hexTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => hex.validate(color)))
#+END_SRC

#+NAME: valid-hex
#+begin_src js
const colors = [
  "#000000",   "#808080",
  "#ffffff",   "#ff0000",
  "#ffff00",   "#00ff00",
  "#00ffff",   "#0000ff",
  "#ff00ff",   "#ace",
  "#bea",      "#fed",
  "#face",     "#cafe",
  "#deaded",   "#c0ffee",
  "#4991ccaa", "#abcdef68"
]
#+end_src

****** Hex Value Extractor

Now, that I know I have valid hex colors, I need to be able to extract their RGB(A) channels.

The first step is enforcing uniformity. To prevent any surprises, I'm going to simply expand hex
color shorthand =#RGB(A)= to a full hex color =#RRGGBB(AA)=.

#+BEGIN_SRC js :tangle "./internals/color/format/hex.js" :comments link
/** Expand hex shorthand into full hex color */
function expander(color) {
  const [, ...values] = color;

  if (values.length === 3 || values.length === 4) {
    return `#${values.map((channel) => channel.repeat(2)).join("")}`;
  }

  return color;
}
#+END_SRC

Having secured uniform input, I'm ready to extract the channel values for processing.

The only thing to do here is remove the =#= and match the channel values with a regular expression.

#+BEGIN_SRC js :tangle "./internals/color/format/hex.js" :comments link
/** Extract: hex channel values */
export const extract = (hex) => expander(hex).match(/[\da-f]{2}/g);
#+END_SRC

Then, I'm going to test that the channel values are plucked as =[R, G, B, A]=:

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const hex = await import (`${Deno.cwd()}/internals/color/format/hex.js`);

<<valid-hex>>

console.log("const colors =", colors.map((color) => ({color, values: hex.extract(color)})));
#+END_SRC

#+NAME: hex-values
#+begin_src js
const colors = [
  { color: "#000000", values: [ "00", "00", "00" ] },
  { color: "#808080", values: [ "80", "80", "80" ] },
  { color: "#ffffff", values: [ "ff", "ff", "ff" ] },
  { color: "#ff0000", values: [ "ff", "00", "00" ] },
  { color: "#ffff00", values: [ "ff", "ff", "00" ] },
  { color: "#00ff00", values: [ "00", "ff", "00" ] },
  { color: "#00ffff", values: [ "00", "ff", "ff" ] },
  { color: "#0000ff", values: [ "00", "00", "ff" ] },
  { color: "#ff00ff", values: [ "ff", "00", "ff" ] },
  { color: "#ace", values: [ "aa", "cc", "ee" ] },
  { color: "#bea", values: [ "bb", "ee", "aa" ] },
  { color: "#fed", values: [ "ff", "ee", "dd" ] },
  { color: "#face", values: [ "ff", "aa", "cc", "ee" ] },
  { color: "#cafe", values: [ "cc", "aa", "ff", "ee" ] },
  { color: "#deaded", values: [ "de", "ad", "ed" ] },
  { color: "#c0ffee", values: [ "c0", "ff", "ee" ] },
  { color: "#4991ccaa", values: [ "49", "91", "cc", "aa" ] },
  { color: "#abcdef68", values: [ "ab", "cd", "ef", "68" ] }
]
#+end_src

***** W3C-X11 (=internals/color/format/named.js=)

Named colors are simple to validate. It's a matter of matching the name with its hex value in the
=X11Colors= lookup table as a boolean.

#+BEGIN_SRC js :tangle "./internals/color/format/named.js" :comments link
import { X11Colors } from "../../../data/color/w3c-x11.js";

/** Validate: W3C X11 named colors */
export const validate = (color) => !!X11Colors[color];
#+END_SRC

***** Functional RGB (=internals/color/format/rgb.js=)

The functional RGB syntax is more complex and allows for more variation in the format. Quarks System
Core supports the legacy format as well as the newer space-separated ones.

#+NAME: rgb-samples
| Color   | Value                    |
|---------+--------------------------|
| Black   | =rgb(0, 0, 0)=             |
| Gray    | =rgb(128, 128, 128)=       |
| White   | =rgb(255, 255, 255)=       |
| Red     | =rgb(255, 0, 0)=           |
| Yellow  | =rgb(255, 255, 0)=         |
| Green   | =rgb(0, 255, 0)=           |
| Cyan    | =rgb(0, 255, 255)=         |
| Blue    | =rgb(0, 0, 255)=           |
| Magenta | =rgb(255, 0, 255)=         |
| Etc.    | =rgb(33, 199, 95)=         |
|         | =rgb(19, 114, 220)=        |
|         | =rgb(10%, 40.4%, 49.9%)=   |
|         | =rgb(200 138 39)=          |
|         | =rgb(31 88 49 / 0.8)=      |
|         | =rgba(110, 33, 110, 0.75)= |
|         | =rgba(10, 119, 30, 30%)=   |

****** RGB Validator

Validating the functional RGB is similarly complex, but the regular expression can be broken down to
its unique and repeating parts and then assembled with the =RegExp.source= property as a new =RegExp=
object.

#+BEGIN_SRC js :tangle "./internals/color/format/rgb.js" :comments link
/** Validate: functional RGB format */
export function validate(color) {
  // RGB regexp

  // prefix: "rgb(" || "rgba("
  // R && G && B: float<0-100>% || int<0-255>
  let R, G, B;
  R = G = B =
    /(?:(?:100%|(?:\d\.?\d?){1,}%)|(?:25[0-5]|24[0-4][0-9]|1[0-9]{2}|\d{1,}|0))/;
  // transparency: float<0-1> || float<0-100>%
  const alpha = /(?:(?:0|0\.\d+|1)|(?:100|(?:\d\.?\d?){1,}%))/;
  // separators: ", " || " " || " /"
  const channelSep = /(?:[\s,]+)/;
  const alphaSep = /(?:[,\s/]+)/;
  // suffix: ")"

  return new RegExp(
    [
      "(?:^rgba?\\(",
      R.source,
      channelSep.source,
      G.source,
      channelSep.source,
      B.source,
      "(?:",
      alphaSep.source,
      alpha.source,
      ")?\\))$",
    ].join(""),
  ).test(color);
}
#+END_SRC

Next up is seeing if the format tests pass.

#+BEGIN_SRC js :results output code replace :allow read :var rgbTable=rgb-samples
const rgb = await import(`${Deno.cwd()}/internals/color/format/rgb.js`);
const colors = rgbTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => rgb.validate(color)))
#+END_SRC

#+NAME: valid-rgb
#+begin_src js
const colors = [
  "rgb(0, 0, 0)",
  "rgb(128, 128, 128)",
  "rgb(255, 255, 255)",
  "rgb(255, 0, 0)",
  "rgb(255, 255, 0)",
  "rgb(0, 255, 0)",
  "rgb(0, 255, 255)",
  "rgb(0, 0, 255)",
  "rgb(255, 0, 255)",
  "rgb(33, 199, 95)",
  "rgb(19, 114, 220)",
  "rgb(10%, 40.4%, 49.9%)",
  "rgb(200 138 39)",
  "rgb(31 88 49 / 0.8)",
  "rgba(110, 33, 110, 0.75)",
  "rgba(10, 119, 30, 30%)"
]
#+end_src

All clear!

****** RGB Extractor

The next step is ensuring the channel/alpha values can be extracted.

#+BEGIN_SRC js :tangle "./internals/color/format/rgb.js" :comments link
/** Extract: RGB channel/alpha values */
export const extract = (rgb) => rgb.match(/([\d.]%?)+/g);
#+END_SRC

The extractor preserves the =%= because it will be properly converted to a fraction for later
calculations. Since the extractor is only used with valid RGB colors, the match pattern does not
need to be intensive.

Now, I'll test that the values are properly pulled.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const rgb = await import(`${Deno.cwd()}/internals/color/format/rgb.js`);

<<valid-rgb>>

console.log("const colors =", colors.map((color) => ({ color, values: rgb.extract(color) })));
#+END_SRC

#+NAME: rgb-values
#+begin_src js
const colors = [
  { color: "rgb(0, 0, 0)", values: [ "0", "0", "0" ] },
  { color: "rgb(128, 128, 128)", values: [ "128", "128", "128" ] },
  { color: "rgb(255, 255, 255)", values: [ "255", "255", "255" ] },
  { color: "rgb(255, 0, 0)", values: [ "255", "0", "0" ] },
  { color: "rgb(255, 255, 0)", values: [ "255", "255", "0" ] },
  { color: "rgb(0, 255, 0)", values: [ "0", "255", "0" ] },
  { color: "rgb(0, 255, 255)", values: [ "0", "255", "255" ] },
  { color: "rgb(0, 0, 255)", values: [ "0", "0", "255" ] },
  { color: "rgb(255, 0, 255)", values: [ "255", "0", "255" ] },
  { color: "rgb(33, 199, 95)", values: [ "33", "199", "95" ] },
  { color: "rgb(19, 114, 220)", values: [ "19", "114", "220" ] },
  { color: "rgb(10%, 40.4%, 49.9%)", values: [ "10%", "40.4%", "49.9%" ] },
  { color: "rgb(200 138 39)", values: [ "200", "138", "39" ] },
  { color: "rgb(31 88 49 / 0.8)", values: [ "31", "88", "49", "0.8" ] },
  { color: "rgba(110, 33, 110, 0.75)", values: [ "110", "33", "110", "0.75" ] },
  { color: "rgba(10, 119, 30, 30%)", values: [ "10", "119", "30", "30%" ] }
]
#+end_src

***** Functional HSL (=internals/color/format/hsl.js=)

HSL is well-loved by designers for being a lot more intuitive than RGB. It explicitly allows
setting:

+ Hue (H): An angle corresponding to a color's position on an RGB color wheel. =0= degrees
  means red, green sits at =120= degrees, and blue sits at =240=
+ Saturation (S): A percentage value corresponding to a color's vibrance or chroma. =0%= indicates a
  fully unsaturated color (yielding gray). =100%= indicates a fully saturated color
+ Lightness/Luminance (L): A percentage value corresponding to a color's brightness. At =50%= a color
  is normalized. =0%= yields pure black and =100%= yields pure white

CSS also defines several angle units for the hue. All of which QuarkSuite supports.

#+NAME: hsl-samples
| Color   | Value                         |
|---------+-------------------------------|
| Black   | =hsl(0, 0%, 0%)=                |
| Gray    | =hsl(0, 0%, 50%)=               |
| White   | =hsl(0, 0%, 100%)=              |
| Red     | =hsl(0, 100%, 50%)=             |
| Yellow  | =hsl(60, 100%, 50%)=            |
| Green   | =hsl(120, 100%, 50%)=           |
| Cyan    | =hsl(180, 100%, 50%)=           |
| Blue    | =hsl(240, 100%, 50%)=           |
| Magenta | =hsl(300, 100%, 50%)=           |
| Etc.    | =hsl(38, 78%, 40%)=             |
|         | =hsl(3 88% 70%)=                |
|         | =hsl(189 63% 85% / 0.71)=       |
|         | =hsla(1.5rad, 73%, 10%, 0.831)= |
|         | =hsl(320grad 89% 36% / 79%)=    |
|         | =hsl(0.36turn 83% 90%)=       |

****** HSL Validator

From here, you'll start seeing a lot of repetition in the validation expressions.

Validating HSL has a similar pattern to validating RGB. In fact, many of the regular expression
fragments are the same.

#+BEGIN_SRC js :tangle "./internals/color/format/hsl.js" :comments link
/** Validate: functional HSL format */
export function validate(color) {
  // HSL regexp

  // prefix: "hsl(" || "hsla("
  // hue: -?float<0->deg? || -?float<0->rad || -?float<0->grad || -?float<0->turn
  const hue = /(?:-?(?:(?:\d\.?\d?)(?:deg|g?rad|turn)?)+)/;
  // saturation && lightness: float<0-100>%
  const saturation = /(?:(?:100%|(?:\d\.?\d?){1,}%))/;
  const lightness = saturation;
  // transparency: float<0-1> || float<0-100>%
  const alpha = /(?:(?:0|0\.\d+|1)|(?:100|(?:\d\.?\d?){1,}%))/;
  // separators: ", " || " " || " /"
  const valueSep = /(?:[\s,]+)/;
  const alphaSep = /(?:[,\s/]+)/;
  // suffix: ")"

  return new RegExp(
    [
      "(?:^hsla?\\(",
      hue.source,
      valueSep.source,
      saturation.source,
      valueSep.source,
      lightness.source,
      "(?:",
      alphaSep.source,
      alpha.source,
      ")?\\))$",
    ].join(""),
  ).test(color);
}
#+END_SRC

Now, I'll perform the tests:

#+BEGIN_SRC js :results output code replace :allow read :var hslTable=hsl-samples
const hsl = await import(`${Deno.cwd()}/internals/color/format/hsl.js`);
const colors = hslTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => hsl.validate(color)))
#+END_SRC

#+NAME: valid-hsl
#+begin_src js
const colors = [
  "hsl(0, 0%, 0%)",
  "hsl(0, 0%, 50%)",
  "hsl(0, 0%, 100%)",
  "hsl(0, 100%, 50%)",
  "hsl(60, 100%, 50%)",
  "hsl(120, 100%, 50%)",
  "hsl(180, 100%, 50%)",
  "hsl(240, 100%, 50%)",
  "hsl(300, 100%, 50%)",
  "hsl(38, 78%, 40%)",
  "hsl(3 88% 70%)",
  "hsl(189 63% 85% / 0.71)",
  "hsla(1.5rad, 73%, 10%, 0.831)",
  "hsl(320grad 89% 36% / 79%)",
  "hsl(0.36turn 83% 90%)"
]
#+end_src

****** HSL Extractor

Next, I need to be able extract HSL values.

#+BEGIN_SRC js :tangle "./internals/color/format/hsl.js" :comments link
/** Extract: HSL values */
export const extract = (hsl) => hsl.match(/(-?[\d.](%|deg|g?rad|turn)?)+/g);
#+END_SRC

Again, the HSL extractor is very similar to the RGB extractor. The only difference being that I'm
extracting the hue units along with percentages.

Finally, I'll test that the values are extracted.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const hsl = await import(`${Deno.cwd()}/internals/color/format/hsl.js`);

<<valid-hsl>>

console.log("const colors =", colors.map((color) => ({ color, values: hsl.extract(color) })));
#+END_SRC

#+NAME: hsl-values
#+begin_src js
const colors = [
  { color: "hsl(0, 0%, 0%)", values: [ "0", "0%", "0%" ] },
  { color: "hsl(0, 0%, 50%)", values: [ "0", "0%", "50%" ] },
  { color: "hsl(0, 0%, 100%)", values: [ "0", "0%", "100%" ] },
  { color: "hsl(0, 100%, 50%)", values: [ "0", "100%", "50%" ] },
  { color: "hsl(60, 100%, 50%)", values: [ "60", "100%", "50%" ] },
  { color: "hsl(120, 100%, 50%)", values: [ "120", "100%", "50%" ] },
  { color: "hsl(180, 100%, 50%)", values: [ "180", "100%", "50%" ] },
  { color: "hsl(240, 100%, 50%)", values: [ "240", "100%", "50%" ] },
  { color: "hsl(300, 100%, 50%)", values: [ "300", "100%", "50%" ] },
  { color: "hsl(38, 78%, 40%)", values: [ "38", "78%", "40%" ] },
  { color: "hsl(3 88% 70%)", values: [ "3", "88%", "70%" ] },
  { color: "hsl(189 63% 85% / 0.71)", values: [ "189", "63%", "85%", "0.71" ] },
  {
    color: "hsla(1.5rad, 73%, 10%, 0.831)",
    values: [ "1.5rad", "73%", "10%", "0.831" ]
  },
  { color: "hsl(320grad 89% 36% / 79%)", values: [ "320grad", "89%", "36%", "79%" ] },
  { color: "hsl(0.36turn 83% 90%)", values: [ "0.36turn", "83%", "90%" ] }
]
#+end_src

The formats documented beyond this point are brand new territory for the core module and unsupported
in QuarkSuite 1.

***** Device CMYK (=internals/color/format/device-cmyk.js=)

=device-cmyk()= is a prospective format documented in the [[https://www.w3.org/TR/css-color-4/#device-cmyk][current CSS Color Module 4 draft]]. CMYK in
general is a color space typically calibrated for printed media.

+ Cyan (C): the amount of cyan ink in the color
+ Magenta (M): the amount of magenta ink in the color
+ Yellow (Y): the amount of yellow ink in the color
+ BlacK (K): the amount of black ink in the color

It's important to note: as a newer CSS color functional format, =device-cmyk()= doesn't bother with
the older comma-separated syntax, so neither does the Quarks System Core. The same carries for all
color formats beyond this point.

#+NAME: cmyk-samples
| Color   | Value                             |
|---------+-----------------------------------|
| Black   | =device-cmyk(0% 0% 0% 100%)=        |
| Gray    | =device-cmyk(0% 0% 0% 50%)=         |
| White   | =device-cmyk(0% 0% 0% 0%)=          |
| Red     | =device-cmyk(0% 100% 100% 0%)=      |
| Yellow  | =device-cmyk(0% 0% 100% 0%)=        |
| Green   | =device-cmyk(100% 0% 100% 0%)=      |
| Cyan    | =device-cmyk(100% 0% 0% 0%)=        |
| Blue    | =device-cmyk(100% 100% 0% 0%)=      |
| Magenta | =device-cmyk(0% 100% 0% 0%)=        |
| Etc.    | =device-cmyk(37% 63% 0 0)=          |
|         | =device-cmyk(50% 25% 10% 0)=        |
|         | =device-cmyk(0.77 0.33 0 0)=        |
|         | =device-cmyk(0.8 0 0.4 0.13 / 0.8)= |
|         | =device-cmyk(25% 75% 8% 3% / 81.3%)= |

****** CMYK Validator

The validation for CMYK in CSS is thankfully simple.

#+BEGIN_SRC js :tangle "./internals/color/format/device-cmyk.js" :comments link
/** Validate: CMYK format */
export function validate(color) {
  // CMYK regexp

  // prefix: "device-cymk("
  // c & m & y & k & a: float<0-1> || float<0-100>%
  let c, m, y, k, alpha;
  c = m = y = k = alpha = /(?:(?:0|0\.\d+|1)|(?:100|(?:\d\.?\d?){1,}%))/;
  // separators: " " || " /"
  const valueSep = /(?:[\s]+)/;
  const alphaSep = /(?:[\s/]+)/;
  // suffix: ")"

  return new RegExp(
    [
      "(?:^device-cmyk\\(",
      c.source,
      valueSep.source,
      m.source,
      valueSep.source,
      y.source,
      valueSep.source,
      k.source,
      "(?:",
      alphaSep.source,
      alpha.source,
      ")?\\))$",
    ].join(""),
  ).test(color);
}
#+END_SRC

Now, on to the format tests.

#+BEGIN_SRC js :results output code replace :allow read :var cmykTable=cmyk-samples
const cmyk = await import(`${Deno.cwd()}/internals/color/format/device-cmyk.js`);
const colors = cmykTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => cmyk.validate(color)));
#+END_SRC

#+NAME: valid-cmyk
#+begin_src js
const colors = [
  "device-cmyk(0% 0% 0% 100%)",
  "device-cmyk(0% 0% 0% 50%)",
  "device-cmyk(0% 0% 0% 0%)",
  "device-cmyk(0% 100% 100% 0%)",
  "device-cmyk(0% 0% 100% 0%)",
  "device-cmyk(100% 0% 100% 0%)",
  "device-cmyk(100% 0% 0% 0%)",
  "device-cmyk(100% 100% 0% 0%)",
  "device-cmyk(0% 100% 0% 0%)",
  "device-cmyk(37% 63% 0 0)",
  "device-cmyk(50% 25% 10% 0)",
  "device-cmyk(0.77 0.33 0 0)",
  "device-cmyk(0.8 0 0.4 0.13 / 0.8)",
  "device-cmyk(25% 75% 8% 3% / 81.3%)"
]
#+end_src

****** CMYK Extractor

From here, the extractor is another one-liner.

#+BEGIN_SRC js :tangle "./internals/color/format/device-cmyk.js" :comments link
/** Extract: CMYK values */
export const extract = (cmyk) => cmyk.match(/([\d.]+)%?/g);
#+END_SRC

Finally, the extraction tests:

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const cmyk = await import(`${Deno.cwd()}/internals/color/format/device-cmyk.js`);

<<valid-cmyk>>

console.log("const colors =", colors.map((color) => ({ color, values: cmyk.extract(color) })));
#+END_SRC

#+NAME: cmyk-values
#+begin_src js
const colors = [
  { color: "device-cmyk(0% 0% 0% 100%)", values: [ "0%", "0%", "0%", "100%" ] },
  { color: "device-cmyk(0% 0% 0% 50%)", values: [ "0%", "0%", "0%", "50%" ] },
  { color: "device-cmyk(0% 0% 0% 0%)", values: [ "0%", "0%", "0%", "0%" ] },
  { color: "device-cmyk(0% 100% 100% 0%)", values: [ "0%", "100%", "100%", "0%" ] },
  { color: "device-cmyk(0% 0% 100% 0%)", values: [ "0%", "0%", "100%", "0%" ] },
  { color: "device-cmyk(100% 0% 100% 0%)", values: [ "100%", "0%", "100%", "0%" ] },
  { color: "device-cmyk(100% 0% 0% 0%)", values: [ "100%", "0%", "0%", "0%" ] },
  { color: "device-cmyk(100% 100% 0% 0%)", values: [ "100%", "100%", "0%", "0%" ] },
  { color: "device-cmyk(0% 100% 0% 0%)", values: [ "0%", "100%", "0%", "0%" ] },
  { color: "device-cmyk(37% 63% 0 0)", values: [ "37%", "63%", "0", "0" ] },
  { color: "device-cmyk(50% 25% 10% 0)", values: [ "50%", "25%", "10%", "0" ] },
  { color: "device-cmyk(0.77 0.33 0 0)", values: [ "0.77", "0.33", "0", "0" ] },
  {
    color: "device-cmyk(0.8 0 0.4 0.13 / 0.8)",
    values: [ "0.8", "0", "0.4", "0.13", "0.8" ]
  },
  {
    color: "device-cmyk(25% 75% 8% 3% / 81.3%)",
    values: [ "25%", "75%", "8%", "3%", "81.3%" ]
  }
]
#+end_src

And now it's on to the next one.

***** Functional HWB (=internals/color/format/hwb.js=)

HWB is short for Hue-Whiteness-Blackness. It's an [[https://www.w3.org/TR/css-color-4/#the-hwb-notation][upcoming color format similar to HSL]] but even
easier to use. It's the format of choice for a variety of browser color picker implementations.

+ Hue (H): works the same as it does in the HSL format
+ Whiteness (W): a percentage value corresponding with how much white to mix with the hue
+ Blackness (B): a percentage value corresponding with how much black to mix with the hue

When W and B are mixed equal amounts, they yield gray. When both are =100%=, the color is achromatic.

#+NAME: hwb-samples
| Color   | Value                     |
|---------+---------------------------|
| Black   | =hwb(0 0% 100%)=            |
| Gray    | =hwb(0 100% 100%)=          |
| White   | =hwb(0 100% 0%)=            |
| Red     | =hwb(0 0% 0%)=              |
| Yellow  | =hwb(60 0% 0%)=             |
| Green   | =hwb(120 0% 0%)=            |
| Cyan    | =hwb(180 0% 0%)=            |
| Blue    | =hwb(240 0% 0%)=            |
| Magenta | =hwb(300 0% 0%)=            |
| Etc.    | =hwb(188 20% 3%)=           |
|         | =hwb(3.1rad 50% 0%)=        |
|         | =hwb(183grad 5% 15% / 0.5)= |
|         | =hwb(0.8turn 38% 99%)=      |

****** HWB Validator

The HWB validator expressions are nearly identical to the HSL validator.

#+BEGIN_SRC js :tangle "./internals/color/format/hwb.js" :comments link
/** Validate: functional HWB format */
export function validate(color) {
  // HWB regexp

  // prefix: "hwb("
  // hue: -?float<0->deg? || -?float<0->rad || -?float<0->grad || -?float<0->turn
  const hue = /(?:-?(?:(?:\d\.?\d?)(?:deg|g?rad|turn)?)+)/;
  // whitness && blackness: float<0-100>%
  const whiteness = /(?:(?:100%|(?:\d\.?\d?){1,}%))/;
  const blackness = whiteness;
  // transparency: float<0-1> || float<0-100>%
  const alpha = /(?:(?:0|0\.\d+|1)|(?:100|(?:\d\.?\d?){1,}%))/;
  // separators: " " || " /"
  const valueSep = /(?:[\s,]+)/;
  const alphaSep = /(?:[,\s/]+)/;
  // suffix: ")"

  return new RegExp(
    [
      "(?:^hwb\\(",
      hue.source,
      valueSep.source,
      whiteness.source,
      valueSep.source,
      blackness.source,
      "(?:",
      alphaSep.source,
      alpha.source,
      ")?\\))$",
    ].join(""),
  ).test(color);
}
#+END_SRC

Alright, now the format tests.

#+BEGIN_SRC js :results output code replace :allow read :var hwbTable=hwb-samples
const hwb = await import(`${Deno.cwd()}/internals/color/format/hwb.js`);
const colors = hwbTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => hwb.validate(color)))
#+END_SRC

#+NAME: valid-hwb
#+begin_src js
const colors = [
  "hwb(0 0% 100%)",
  "hwb(0 100% 100%)",
  "hwb(0 100% 0%)",
  "hwb(0 0% 0%)",
  "hwb(60 0% 0%)",
  "hwb(120 0% 0%)",
  "hwb(180 0% 0%)",
  "hwb(240 0% 0%)",
  "hwb(300 0% 0%)",
  "hwb(188 20% 3%)",
  "hwb(3.1rad 50% 0%)",
  "hwb(183grad 5% 15% / 0.5)",
  "hwb(0.8turn 38% 99%)"
]
#+end_src

****** HWB Extractor

The value extractor for HWB is identical to the one for HSL.

#+BEGIN_SRC js :tangle "./internals/color/format/hwb.js" :comments link
/** Extract: HWB values */
export const extract = (hwb) => hwb.match(/(-?[\d.](%|deg|g?rad|turn)?)+/g);
#+END_SRC

Finally, the tests for value extraction.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const hwb = await import(`${Deno.cwd()}/internals/color/format/hwb.js`);

<<valid-hwb>>

console.log("const colors =", colors.map((color) => ({ color, values: hwb.extract(color) })));
#+END_SRC

#+NAME: hwb-values
#+begin_src js
const colors = [
  { color: "hwb(0 0% 100%)", values: [ "0", "0%", "100%" ] },
  { color: "hwb(0 100% 100%)", values: [ "0", "100%", "100%" ] },
  { color: "hwb(0 100% 0%)", values: [ "0", "100%", "0%" ] },
  { color: "hwb(0 0% 0%)", values: [ "0", "0%", "0%" ] },
  { color: "hwb(60 0% 0%)", values: [ "60", "0%", "0%" ] },
  { color: "hwb(120 0% 0%)", values: [ "120", "0%", "0%" ] },
  { color: "hwb(180 0% 0%)", values: [ "180", "0%", "0%" ] },
  { color: "hwb(240 0% 0%)", values: [ "240", "0%", "0%" ] },
  { color: "hwb(300 0% 0%)", values: [ "300", "0%", "0%" ] },
  { color: "hwb(188 20% 3%)", values: [ "188", "20%", "3%" ] },
  { color: "hwb(3.1rad 50% 0%)", values: [ "3.1rad", "50%", "0%" ] },
  { color: "hwb(183grad 5% 15% / 0.5)", values: [ "183grad", "5%", "15%", "0.5" ] },
  { color: "hwb(0.8turn 38% 99%)", values: [ "0.8turn", "38%", "99%" ] }
]
#+end_src

***** Functional CIELAB (=internals/color/format/lab.js=)

The CSS Color Module Level 4 is currently drafting [[https://www.w3.org/TR/css-color-4/#lab-colors][support for device-independent color
formats]]. Quarks System Core supports both.

First up is the CIELAB (often called Lab for short) color format. The format specification is better
explained on the linked W3C page above, but I'll summarize the components:

+ Lightness (L): a percentage value which, unlike HSL, is /not/ capped at =100%= for this space
+ hues (*a): magenta-red when positive, its complement when negative
+ hues (*b): yellow when positive, its complement when negative

The hue axes are unbound, but for use with the RGB space /must/ cap at =±128=.

#+NAME: lab-samples
| Color   | Value                           |
|---------+---------------------------------|
| Black   | =lab(0% 0 0)=                     |
| Gray    | =lab(53.59% 0 0)=                 |
| White   | =lab(100% 0 0)=                   |
| Red     | =lab(54.29% 80.81 69.89)=         |
| Yellow  | =lab(97.6% -15.75 93.39)=         |
| Green   | =lab(87.82% -79.29 80.99)=        |
| Cyan    | =lab(90.67% -50.67 -14.96)=       |
| Blue    | =lab(29.57% 68.3 -112.03)=        |
| Magenta | =lab(60.17% 93.55 -60.5)=         |
| Etc.    | =lab(49.18% 38.1 -110.33)=        |
|         | =lab(91.3% -93 14)=               |
|         | =lab(83.119% 49.34 -3.99 / 0.75)= |
|         | =lab(199% 38 13 / 78%)=         |

****** CIELAB Validator

The Lab validator is not complex. It reuses the alpha validation expression and modifies the RGB
channel validation expression slightly.

#+BEGIN_SRC js :tangle "./internals/color/format/lab.js" :comments link
/** Validate: functional CIELAB format */
export function validate(color) {
  // CIELAB regexp

  // prefix: "lab("
  // L: float<0->%
  const L = /(?:(?:\d\.?\d?){1,}%)/;
  // a && b: -?int<0-128>
  let a, b;
  a = b = /(?:-?(?:128|(?:1[0-2][0-8]|(?:\d.?\d?){1,})))/;
  // transparency: float<0-1> || float<0-100>%
  const alpha = /(?:(?:0|0\.\d+|1)|(?:100|(?:\d\.?\d?){1,}%))/;
  // separators: " " || " /"
  const valueSep = /(?:[\s]+)/;
  const alphaSep = /(?:[\s/]+)/;
  // suffix: ")"

  return new RegExp(
    [
      "(?:^lab\\(",
      L.source,
      valueSep.source,
      a.source,
      valueSep.source,
      b.source,
      "(?:",
      alphaSep.source,
      alpha.source,
      ")?\\))$",
    ].join(""),
  ).test(color);
}
#+END_SRC

Now, it's validator testing time.

#+BEGIN_SRC js :results output code replace :allow read :var labTable=lab-samples
const lab = await import(`${Deno.cwd()}/internals/color/format/lab.js`);
const colors = labTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => lab.validate(color)))
#+END_SRC

#+NAME: valid-lab
#+begin_src js
const colors = [
  "lab(0% 0 0)",
  "lab(53.59% 0 0)",
  "lab(100% 0 0)",
  "lab(54.29% 80.81 69.89)",
  "lab(97.6% -15.75 93.39)",
  "lab(87.82% -79.29 80.99)",
  "lab(90.67% -50.67 -14.96)",
  "lab(29.57% 68.3 -112.03)",
  "lab(60.17% 93.55 -60.5)",
  "lab(49.18% 38.1 -110.33)",
  "lab(91.3% -93 14)",
  "lab(83.119% 49.34 -3.99 / 0.75)",
  "lab(199% 38 13 / 78%)"
]
#+end_src

Good to go.

****** CIELAB Extractor

The CIELAB value extractor is a slight modification from the HSL extractor. The CIELAB extractor
needs to be able to capture negative and positive values as well as percentages.

#+BEGIN_SRC js :tangle "./internals/color/format/lab.js" :comments link
/** Extract: CIELAB values */
export const extract = (lab) => lab.match(/(-?[\d.]%?)+/g);
#+END_SRC

Time to test it.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const lab = await import(`${Deno.cwd()}/internals/color/format/lab.js`);

<<valid-lab>>

console.log("const colors =", colors.map((color) => ({ color, values: lab.extract(color) })));
#+END_SRC

#+NAME: lab-values
#+begin_src js
const colors = [
  { color: "lab(0% 0 0)", values: [ "0%", "0", "0" ] },
  { color: "lab(53.59% 0 0)", values: [ "53.59%", "0", "0" ] },
  { color: "lab(100% 0 0)", values: [ "100%", "0", "0" ] },
  { color: "lab(54.29% 80.81 69.89)", values: [ "54.29%", "80.81", "69.89" ] },
  { color: "lab(97.6% -15.75 93.39)", values: [ "97.6%", "-15.75", "93.39" ] },
  { color: "lab(87.82% -79.29 80.99)", values: [ "87.82%", "-79.29", "80.99" ] },
  { color: "lab(90.67% -50.67 -14.96)", values: [ "90.67%", "-50.67", "-14.96" ] },
  { color: "lab(29.57% 68.3 -112.03)", values: [ "29.57%", "68.3", "-112.03" ] },
  { color: "lab(60.17% 93.55 -60.5)", values: [ "60.17%", "93.55", "-60.5" ] },
  { color: "lab(49.18% 38.1 -110.33)", values: [ "49.18%", "38.1", "-110.33" ] },
  { color: "lab(91.3% -93 14)", values: [ "91.3%", "-93", "14" ] },
  {
    color: "lab(83.119% 49.34 -3.99 / 0.75)",
    values: [ "83.119%", "49.34", "-3.99", "0.75" ]
  },
  { color: "lab(199% 38 13 / 78%)", values: [ "199%", "38", "13", "78%" ] }
]
#+end_src

***** Functional CIELCh(ab) (=internals/color/format/lch.js=)

The CIELCh(ab) color space is another device-independent color format with added support in the CSS
Color Module Level 4 spec. It's CIELAB converted directly to polar coordinates. It consists of:

+ Lightness (L): a percentage value interpreted identically to CIELAB lightness
+ Chroma (C): a value corresponding to the amount of color desired
+ Hue (h): interpreted similar to HSL, but the angles map to the *a/*b axes

The chroma is theoretically boundless, but in everyday use caps at =230=. The hues at =0deg= and =180deg=
map to magenta-red and green-cyan, respectively. The hues at =90deg= and =270deg= map to a mustard
yellow and sky blue, respectively.

#+NAME: lch-samples
| Color   | Value                              |
|---------+------------------------------------|
| Black   | =lch(0% 0 0)=                        |
| Gray    | =lch(53.59% 0 0)=                    |
| White   | =lch(100% 0 0)=                      |
| Red     | =lch(54.29% 106.84 40.855)=          |
| Yellow  | =lch(97.6% 94.709 99.573)=           |
| Green   | =lch(87.82% 113.34 134.39)=          |
| Cyan    | =lch(90.67% 52.832 196.45)=          |
| Blue    | =lch(29.57% 131.21 301.369)=         |
| Magenta | =lch(60.17% 111.41 327.109)=         |
| Etc.    | =lch(53.31% 89.31 200)=              |
|         | =lch(89.1% 167.34 3.6rad / 0.99)=    |
|         | =lch(24.494% 74.9 193grad)=          |
|         | =lch(47.39% 111.193 0.62turn / 75%)= |

****** CIELCh(ab) Validator

As a polar conversion of CIELAB, the CIELCh(ab) validator is a slightly modified implementation. It reuses the
CIELAB lightness expression but also pulls in the HSL hue expression. They accept the same input
even if they don't function the same way.

#+BEGIN_SRC js :tangle "./internals/color/format/lch.js" :comments link
/** Validate: functional CIELCh(ab) format */
export function validate(color) {
  // CIELCh(ab) regexp

  // prefix: "lch("
  // lightness: float<0->%
  const lightness = /(?:(?:\d\.?\d?){1,}%)/;
  // chroma: int<0-230>
  const chroma = /(?:(?:230|(?:2[0-2][0-9]|1[0-9][0-9])|(?:\d.?\d?){1,}))/;
  // hue: -?float<0->deg? || -?float<0->rad || -?float<0->grad || -?float<0->turn
  const hue = /(?:-?(?:(?:\d\.?\d?)(?:deg|g?rad|turn)?)+)/;
  // transparency: float<0-1> || float<0-100>%
  const alpha = /(?:(?:0|0\.\d+|1)|(?:100|(?:\d\.?\d?){1,}%))/;
  // separators: " " || " /"
  const valueSep = /(?:[\s]+)/;
  const alphaSep = /(?:[\s/]+)/;
  // suffix: ")"

  return new RegExp(
    [
      "(?:^lch\\(",
      lightness.source,
      valueSep.source,
      chroma.source,
      valueSep.source,
      hue.source,
      "(?:",
      alphaSep.source,
      alpha.source,
      ")?\\))$",
    ].join(""),
  ).test(color);
}
#+END_SRC

And it's format validation test time.

#+BEGIN_SRC js :results output code replace :allow read :var lchTable=lch-samples
const lch = await import(`${Deno.cwd()}/internals/color/format/lch.js`);
const colors = lchTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => lch.validate(color)))
#+END_SRC

#+NAME: valid-lch
#+begin_src js
const colors = [
  "lch(0% 0 0)",
  "lch(53.59% 0 0)",
  "lch(100% 0 0)",
  "lch(54.29% 106.84 40.855)",
  "lch(97.6% 94.709 99.573)",
  "lch(87.82% 113.34 134.39)",
  "lch(90.67% 52.832 196.45)",
  "lch(29.57% 131.21 301.369)",
  "lch(60.17% 111.41 327.109)",
  "lch(53.31% 89.31 200)",
  "lch(89.1% 167.34 3.6rad / 0.99)",
  "lch(24.494% 74.9 193grad)",
  "lch(47.39% 111.193 0.62turn / 75%)"
]
#+end_src

****** CIELCh(ab) Extractor

The CIELCh(ab) extractor is identical to the HSL extractor.

#+BEGIN_SRC js :tangle "./internals/color/format/lch.js" :comments link
/** Extract: CIELCh(ab) values */
export const extract = (lch) => lch.match(/(-?[\d.](%|deg|g?rad|turn)?)+/g);
#+END_SRC

Now, I'll set up some extraction tests.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const lch = await import(`${Deno.cwd()}/internals/color/format/lch.js`);

<<valid-lch>>

console.log("const colors =", colors.map((color) => ({ color, values: lch.extract(color) })));
#+END_SRC

#+NAME: lch-values
#+begin_src js
const colors = [
  { color: "lch(0% 0 0)", values: [ "0%", "0", "0" ] },
  { color: "lch(53.59% 0 0)", values: [ "53.59%", "0", "0" ] },
  { color: "lch(100% 0 0)", values: [ "100%", "0", "0" ] },
  { color: "lch(54.29% 106.84 40.855)", values: [ "54.29%", "106.84", "40.855" ] },
  { color: "lch(97.6% 94.709 99.573)", values: [ "97.6%", "94.709", "99.573" ] },
  { color: "lch(87.82% 113.34 134.39)", values: [ "87.82%", "113.34", "134.39" ] },
  { color: "lch(90.67% 52.832 196.45)", values: [ "90.67%", "52.832", "196.45" ] },
  { color: "lch(29.57% 131.21 301.369)", values: [ "29.57%", "131.21", "301.369" ] },
  { color: "lch(60.17% 111.41 327.109)", values: [ "60.17%", "111.41", "327.109" ] },
  { color: "lch(53.31% 89.31 200)", values: [ "53.31%", "89.31", "200" ] },
  {
    color: "lch(89.1% 167.34 3.6rad / 0.99)",
    values: [ "89.1%", "167.34", "3.6rad", "0.99" ]
  },
  { color: "lch(24.494% 74.9 193grad)", values: [ "24.494%", "74.9", "193grad" ] },
  {
    color: "lch(47.39% 111.193 0.62turn / 75%)",
    values: [ "47.39%", "111.193", "0.62turn", "75%" ]
  }
]
#+end_src

And that's it. Full support for validating and extracting the values of all current (and future) CSS
color formats. Not very useful  by itself, so I'm going to write functionality to convert between them.

***** Oklab (LCh) (=internals/color/format/oklab.js=)

Oklab is a non-standard perceptual color space created by Björn Ottosson. It's a derivative of
CIELAB that fixes some of its shortcomings in predicting hue and especially sudden hue shifting of
blues toward purple.

I decided to support it after realizing that HSL is a terrible space to make color adjustments in
and standard CIELCh(ab) fell just short of my expectations for color scheme and variant generation.

It was this [[https://observablehq.com/@joshdata/perceptually-valid-color-scales][demonstration of perceptually valid color scales]] that finally convinced me that Oklab
had that special sauce. As a bonus, it's simple to implement. Quarks System Core processes Oklab
colors in its polar coordinates form similar to CIELCh(ab) to ease value extraction and adjustment.

It behaves similarly to CIELCh(ab).

#+NAME: oklab-samples
| Color   | Value                       |
|---------+-----------------------------|
| Black   | =oklab(0% 0 0)=             |
| Gray    | =oklab(59.987% 0 0)=        |
| White   | =oklab(100% 0 0)=           |
| Red     | =oklab(62.795% 0.25768 29.234)= |
| Yellow  | =oklab(96.768% 0.21101 109.77)= |
| Green   | =oklab(86.644% 0.29483 142.5)= |
| Cyan    | =oklab(90.54% 0.15455 194.77)= |
| Blue    | =oklab(45.201% 0.31321 264.052)= |
| Magenta | =oklab(70.167% 0.32249 328.363)= |
| Etc.    | =oklab(37.119% 0.482 90)=   |
|         | =oklab(29.11% 0.25 180)=    |
|         | =oklab(53.33% 0.5 270)=     |
|         | =oklab(84% 0.1043 350.31)=  |
|         | =oklab(25.14% 0.44 60 / 0.8)= |

****** Oklab (LCh) Validator

The Oklab validator has a similar pattern to CIELCh(ab) but chroma is a range of =0-0.5=.

#+BEGIN_SRC js :tangle "./internals/color/format/oklab.js" :comments link
/** Validate: Oklab (LCh) format */
export function validate(color) {
  // OKlab (LCh) regexp

  // prefix: "oklab("
  // lightness: float<0->%
  const lightness = /(?:(?:\d\.?\d?){1,}%)/;
  // chroma: -?float<0-0.5>
  const chroma = /(?:-?(?:0|0\.\d+|0.5))/;
  // hue: float<0->
  const hue = /(?:(?:\d\.?\d?)+)/;
  // transparency: float<0-1> || float<0-100>%
  const alpha = /(?:(?:0|0\.\d+|1)|(?:100|(?:\d\.?\d?){1,}%))/;
  // separators: " " || " /"
  const valueSep = /(?:[\s]+)/;
  const alphaSep = /(?:[\s/]+)/;
  // suffix: ")"

  return new RegExp(
    [
      "(?:^oklab\\(",
      lightness.source,
      valueSep.source,
      chroma.source,
      valueSep.source,
      hue.source,
      "(?:",
      alphaSep.source,
      alpha.source,
      ")?\\))$",
    ].join(""),
  ).test(color);
}
#+END_SRC

Now for some tests.

#+BEGIN_SRC js :results output code replace :allow read :var oklabTable=oklab-samples
const oklab = await import(`${Deno.cwd()}/internals/color/format/oklab.js`);
const colors = oklabTable.map(([a, b]) => b.replace(/=/g, ""));

console.log("const colors =", colors.filter((color) => oklab.validate(color)))
#+END_SRC

#+NAME: valid-oklab
#+begin_src deno
const colors = [
  "oklab(0% 0 0)",
  "oklab(59.987% 0 0)",
  "oklab(100% 0 0)",
  "oklab(62.795% 0.25768 29.234)",
  "oklab(96.768% 0.21101 109.77)",
  "oklab(86.644% 0.29483 142.5)",
  "oklab(90.54% 0.15455 194.77)",
  "oklab(45.201% 0.31321 264.052)",
  "oklab(70.167% 0.32249 328.363)",
  "oklab(37.119% 0.482 90)",
  "oklab(29.11% 0.25 180)",
  "oklab(53.33% 0.5 270)",
  "oklab(84% 0.1043 350.31)",
  "oklab(25.14% 0.44 60 / 0.8)"
]
#+end_src

****** Oklab (LCh) Extractor

The Oklab extractor is a purely numeric extractor.

#+BEGIN_SRC js :tangle "./internals/color/format/oklab.js" :comments link
/** Extract: Oklab (LCh) values */
export const extract = (oklab) => oklab.match(/([\d.]%?)+/g);
#+END_SRC

Now, I'll make sure the values are properly extracted.

#+BEGIN_SRC deno :results output code replace :allow read :noweb yes
const oklab = await import(`${Deno.cwd()}/internals/color/format/oklab.js`);

<<valid-oklab>>

console.log("const colors =", colors.map((color) => ({ color, values: oklab.extract(color) })));
#+END_SRC

#+NAME: oklab-values
#+begin_src deno
const colors = [
  { color: "oklab(0% 0 0)", values: [ "0%", "0", "0" ] },
  { color: "oklab(59.987% 0 0)", values: [ "59.987%", "0", "0" ] },
  { color: "oklab(100% 0 0)", values: [ "100%", "0", "0" ] },
  {
    color: "oklab(62.795% 0.25768 29.234)",
    values: [ "62.795%", "0.25768", "29.234" ]
  },
  {
    color: "oklab(96.768% 0.21101 109.77)",
    values: [ "96.768%", "0.21101", "109.77" ]
  },
  {
    color: "oklab(86.644% 0.29483 142.5)",
    values: [ "86.644%", "0.29483", "142.5" ]
  },
  {
    color: "oklab(90.54% 0.15455 194.77)",
    values: [ "90.54%", "0.15455", "194.77" ]
  },
  {
    color: "oklab(45.201% 0.31321 264.052)",
    values: [ "45.201%", "0.31321", "264.052" ]
  },
  {
    color: "oklab(70.167% 0.32249 328.363)",
    values: [ "70.167%", "0.32249", "328.363" ]
  },
  { color: "oklab(37.119% 0.482 90)", values: [ "37.119%", "0.482", "90" ] },
  { color: "oklab(29.11% 0.25 180)", values: [ "29.11%", "0.25", "180" ] },
  { color: "oklab(53.33% 0.5 270)", values: [ "53.33%", "0.5", "270" ] },
  { color: "oklab(84% 0.1043 350.31)", values: [ "84%", "0.1043", "350.31" ] },
  { color: "oklab(25.14% 0.44 60 / 0.8)", values: [ "25.14%", "0.44", "60", "0.8" ] }
]
#+end_src

**** Conversion (=internals/color/convert/index.js=)

The internal color conversion functions are organized by format. They follow a convention of
=inputFormat.outputFormat(color)= this allows them to easily be composed in a logical order to create
the higher level color conversion utilities exposed in the public API.

Each implementation assumes extracted color values instead of a full color. This is to ensure color
formatting functions remain separate from conversion functions for the reasons demonstrated in the API.

#+BEGIN_SRC js :tangle "./internals/color/convert/index.js" :comments link
/** Internal color conversion utilities */

// Currently supported CSS formats
export * as hex from "./hex.js";
export * as named from "./named.js";
export * as rgb from "./rgb.js";
export * as hsl from "./hsl.js";

// Proposed future formats
export * as cmyk from "./device-cmyk.js";
export * as hwb from "./hwb.js";
export * as lab from "./lab.js";
export * as lch from "./lch.js";

// Non-standard
export * as oklab from "./oklab.js";
#+END_SRC

***** Setup (=internals/color/convert/setup.js=)

Before I write color conversion functions, I need some helpers to streamline the process.

****** Hex RGB Fragments

As I wrote earlier, I consider hex colors on the web color primitives. They're the starting point
of all conversions because hex colors can only be directly converted to functional RGB which begins
the conversion chain for other formats.

#+BEGIN_SRC js :tangle "./internals/color/convert/setup.js" :comments link
/** Helper for converting hex->int */
export const hexFragmentToChannel = (fragment) => parseInt(fragment, 16);

/** Helper for converting int->hex */
export const channelToHexFragment = (channel) =>
channel.toString(16).padStart(2, "0");
#+END_SRC

****** Math

Before I write the functions for actual conversion, I need to write some basic arithmetic helpers.

#+BEGIN_SRC js :tangle "./internals/color/convert/setup.js" :comments link
/** Helper to limit precision */
export const significant = (digits, value) => +value.toPrecision(digits);

/** x + y */
const sum = (y, x) => significant(6, x + y);

/** x ✕ y */
const product = (y, x) => significant(6, x * y);

/** x ÷ y */
const quotient = (y, x) => significant(6, x / y);

/** x % y */
const remainder = (y, x) => significant(6, x % y);

// Hrad, Hgrad, Hturn -> hue

/** Formula: n° = n㎭ ✕ 180∕π */
export const calcHueFromRad = (radians) =>
Math.round(product(quotient(Math.PI, 180), radians));

/** Formula: n° = nᵍ✕ 180∕200 */
export const calcHueFromGrad = (gradians) =>
Math.round(product(quotient(200, 180), gradians));

/** Formula: n° = n% ✕ 360 */
export const calcHueFromTurn = (turn) => Math.round(product(360, turn));

// Hue correction

/** Formula: n° = -n + 360 */
export const correctHueCounterClockwise = (hue) => sum(360, hue);

/** Formula: n° = n % 360 */
export const correctHueClockwise = (hue) => remainder(360, hue);

// Saturation, lightness

/** Formula: n = n%∕100 */
export const calcFractionFromPercent = (percentage) =>
quotient(100, percentage);

/** Formula: n = n ✕ 100 */
export const calcPercentFromFraction = (fraction) => product(100, fraction);

// RGB calculations

/** Formula: n = n ✕ 255 */
export const calcChannelFromFraction = (fraction) => product(255, fraction);

/** Formula: n = n∕255 */
export const calcFractionFromChannel = (channel) => quotient(255, channel);

/** Formula: n = n%∕100 ✕ 255 */
export const calcChannelFromPercent = (percentage) =>
Math.round(calcChannelFromFraction(calcFractionFromPercent(percentage)));

/** Normalization to define boundaries */
export const normalize = (a, x, b) => Math.round(Math.min(Math.max(x, a), b));

// Alpha

/** Helper to convert alpha value to hex fragment */
export const calcHexFragmentFromAlpha = (alpha) =>
channelToHexFragment(Math.round(calcChannelFromFraction(alpha)));

#+END_SRC

Now, I'm ready to write the conversion algorithms.

***** RGB Hex Conversion (=internals/color/convert/hex.js=)

To reiterate, a hex color is the primitive color value. They may convert up to another format,
but cannot convert down to anything but machine code.

****** RGB Hex -> Functional RGB (=hex.rgb=)

Converting RGB Hex to functional RGB is a matter of extracting each channel hex fragment and
converting them to their equivalent integers. And then converting the alpha channel /if/ it exists.

#+BEGIN_SRC js :tangle "./internals/color/convert/hex.js" :comments link
import {
  calcFractionFromChannel,
  hexFragmentToChannel,
  significant,
} from "./setup.js";

/** RGB Hex -> Functional RGB */
export function rgb(hex) {
  const [r, g, b, alpha] = hex;
  const [R, G, B] = [r, g, b].map((fragment) => hexFragmentToChannel(fragment));
  const A = significant(
    4,
    calcFractionFromChannel(hexFragmentToChannel(alpha ?? "ff")),
  );

  return A === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${A})`;
}
#+END_SRC

For testing my implementation, I'll reuse the extracted hex results above.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const hex = await import(`${Deno.cwd()}/internals/color/convert/hex.js`);

<<hex-values>>

console.log(colors.map(({color, values}) => ({hex: color, rgb: hex.rgb(values)})));
#+END_SRC

#+NAME: hex-to-rgb
#+begin_src js
[
  { hex: "#000000", rgb: "rgb(0, 0, 0)" },
  { hex: "#808080", rgb: "rgb(128, 128, 128)" },
  { hex: "#ffffff", rgb: "rgb(255, 255, 255)" },
  { hex: "#ff0000", rgb: "rgb(255, 0, 0)" },
  { hex: "#ffff00", rgb: "rgb(255, 255, 0)" },
  { hex: "#00ff00", rgb: "rgb(0, 255, 0)" },
  { hex: "#00ffff", rgb: "rgb(0, 255, 255)" },
  { hex: "#0000ff", rgb: "rgb(0, 0, 255)" },
  { hex: "#ff00ff", rgb: "rgb(255, 0, 255)" },
  { hex: "#ace", rgb: "rgb(170, 204, 238)" },
  { hex: "#bea", rgb: "rgb(187, 238, 170)" },
  { hex: "#fed", rgb: "rgb(255, 238, 221)" },
  { hex: "#face", rgb: "rgba(255, 170, 204, 0.9333)" },
  { hex: "#cafe", rgb: "rgba(204, 170, 255, 0.9333)" },
  { hex: "#deaded", rgb: "rgb(222, 173, 237)" },
  { hex: "#c0ffee", rgb: "rgb(192, 255, 238)" },
  { hex: "#4991ccaa", rgb: "rgba(73, 145, 204, 0.6667)" },
  { hex: "#abcdef68", rgb: "rgba(171, 205, 239, 0.4078)" }
]
#+end_src

Success!

***** W3C-X11 Conversion (=internals/color/convert/named.js=)

****** RGB Hex <- W3C-X11

After validation, the only possible conversion for a CSS named color is a query for its hex value.

#+BEGIN_SRC js :tangle "./internals/color/convert/named.js" :comments link
import { X11Colors } from "../../../data/color/w3c-x11.js";

/** RGB HEX <- W3C-X11 */
export const hex = (keyword) => X11Colors[keyword];
#+END_SRC

***** Functional RGB Conversion (=internals/color/convert/rgb.js=)

Functional RGB leads to the first progressive conversion fork and regression option.

+ =RGB Hex <- Functional RGB=: a regressive conversion to RGB Hex
+ =Functional RGB -> Functional HSL=: a progressive conversion to HSL
+ =Functional RGB -> Device CMYK=: a progressive conversion to CMYK
+ =Functional RGB -> Functional HWB=: a progressive conversion to HWB
+ =Functional RGB -> Functional CIELAB=: a progressive conversion to CIELAB
+ =Functional RGB  -> Oklab (LCh)=: a progressive conversion to [[https://bottosson.github.io/posts/oklab/][Oklab]]

****** RGB Conversion Setup

Functional RGB conversions are slightly more complex than RGB Hex conversions, so they require a bit
of extra math. Luckily, I defined those arithmetic helpers, so I'll pull in the necessary ones.

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
import {
  calcChannelFromPercent,
  calcFractionFromChannel,
  calcFractionFromPercent,
  calcHexFragmentFromAlpha,
  calcHueFromRad,
  calcPercentFromFraction,
  channelToHexFragment,
  correctHueCounterClockwise,
  normalize,
  significant,
} from "./setup.js";

const precision = significant.bind(null, 5);

/** A helper function to prep RGB values for calculations */
function parseRGB(rgb) {
  const [r, g, b, alpha] = rgb;
  const value = (s) => parseFloat(s);

  const [R, G, B] = [r, g, b].map((channel) =>
    channel.endsWith("%")
      ? precision(calcChannelFromPercent(value(channel)))
      : precision(value(channel))
  );

  const a = value(alpha);
  const A = a != null ? (a > 1 ? precision(calcFractionFromPercent(a)) : a) : 1;

  return A === 1 ? [R, G, B] : [R, G, B, A];
}
#+END_SRC

****** RGB Hex <- Functional RGB (=rgb.hex=)

A regressive conversion is one that breaks a color down. Since an RGB color begins the chain to
higher conversions, that leaves RGB Hex as the only possible regression.

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
/** RGB Hex <- Functional RGB */
export function hex(rgb) {
  const [r, g, b, alpha] = parseRGB(rgb);

  const [R, G, B] = [r, g, b].map((channel) => channelToHexFragment(channel));
  // Alpha is defined and not null
  const A = (alpha && calcHexFragmentFromAlpha(alpha ?? 1)) || "ff";

  return A === "ff" ? `#${R}${G}${B}` : `#${R}${G}${B}${A}`;
}
#+END_SRC

Now, I'll use the extracted RGB defined earlier to test my conversions for accuracy.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const rgb = await import(`${Deno.cwd()}/internals/color/convert/rgb.js`);

<<rgb-values>>

console.log(colors.map(({color, values}) => ({rgb: color, hex: rgb.hex(values)})));
#+END_SRC

#+NAME: rgb-to-hex
#+begin_src js
[
  { rgb: "rgb(0, 0, 0)", hex: "#000000" },
  { rgb: "rgb(128, 128, 128)", hex: "#808080" },
  { rgb: "rgb(255, 255, 255)", hex: "#ffffff" },
  { rgb: "rgb(255, 0, 0)", hex: "#ff0000" },
  { rgb: "rgb(255, 255, 0)", hex: "#ffff00" },
  { rgb: "rgb(0, 255, 0)", hex: "#00ff00" },
  { rgb: "rgb(0, 255, 255)", hex: "#00ffff" },
  { rgb: "rgb(0, 0, 255)", hex: "#0000ff" },
  { rgb: "rgb(255, 0, 255)", hex: "#ff00ff" },
  { rgb: "rgb(33, 199, 95)", hex: "#21c75f" },
  { rgb: "rgb(19, 114, 220)", hex: "#1372dc" },
  { rgb: "rgb(10%, 40.4%, 49.9%)", hex: "#1a677f" },
  { rgb: "rgb(200 138 39)", hex: "#c88a27" },
  { rgb: "rgb(31 88 49 / 0.8)", hex: "#1f5831cc" },
  { rgb: "rgba(110, 33, 110, 0.75)", hex: "#6e216ebf" },
  { rgb: "rgba(10, 119, 30, 30%)", hex: "#0a771e4d" }
]
#+end_src

****** Functional RGB -> Functional HSL (=rgb.hsl=)

Functional RGB to Functional HSL conversion was supported in QuarkSuite 1, so the algorithm hasn't
changed its implementation. First, it requires a little prep.

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
// https://www.rapidtables.com/convert/color/rgb-to-hsl.html
const calcHue = (R, G, B, cmax, delta) =>
  new Map([
    [0, delta === 0],
    [60 * (((G - B) / delta) % 6), cmax === R],
    [60 * ((B - R) / delta + 2), cmax === G],
    [60 * ((R - G) / delta + 4), cmax === B],
  ]);

const calcSat = (delta, L) =>
  delta === 0 ? 0 : delta / (1 - Math.abs(2 * L - 1));

const calcLightness = (cmin, cmax) => (cmax + cmin) / 2;

function calcHSL(r, g, b) {
  const [R, G, B] = [r, g, b].map((channel) =>
    calcFractionFromChannel(channel)
  );

  const cmin = Math.min(R, G, B);
  const cmax = Math.max(R, G, B);
  const delta = cmax - cmin;

  const [H] = Array.from(calcHue(R, G, B, cmax, delta))
    .filter(([, condition]) => condition)
    .flatMap(([value]) => Math.round(value));

  const L = calcLightness(cmin, cmax);

  const S = calcSat(delta, L);

  return [Math.sign(H) === -1 ? correctHueCounterClockwise(H) : H, S, L];
}
#+END_SRC

And now the actual conversion algorithm:

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
/** Functional RGB -> Functional HSL */
export function hsl(rgb) {
  const [r, g, b, alpha] = parseRGB(rgb);
  const [h, s, l] = calcHSL(r, g, b);

  const [H, S, L] = [
    h,
    precision(calcPercentFromFraction(s)),
    precision(calcPercentFromFraction(l)),
  ];
  const A = (alpha && (alpha ?? 1)) || 1;

  return A === 1 ? `hsl(${H}, ${S}%, ${L}%)` : `hsla(${H}, ${S}%, ${L}%, ${A})`;
}
#+END_SRC

Time for some color conversion tests!

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const rgb = await import(`${Deno.cwd()}/internals/color/convert/rgb.js`);

<<rgb-values>>

console.log(colors.map(({color, values}) => ({rgb: color, hsl: rgb.hsl(values)})));
#+END_SRC

#+NAME: rgb-to-hsl
#+begin_src js
[
  { rgb: "rgb(0, 0, 0)", hsl: "hsl(0, 0%, 0%)" },
  { rgb: "rgb(128, 128, 128)", hsl: "hsl(0, 0%, 50.196%)" },
  { rgb: "rgb(255, 255, 255)", hsl: "hsl(0, 0%, 100%)" },
  { rgb: "rgb(255, 0, 0)", hsl: "hsl(0, 100%, 50%)" },
  { rgb: "rgb(255, 255, 0)", hsl: "hsl(60, 100%, 50%)" },
  { rgb: "rgb(0, 255, 0)", hsl: "hsl(120, 100%, 50%)" },
  { rgb: "rgb(0, 255, 255)", hsl: "hsl(180, 100%, 50%)" },
  { rgb: "rgb(0, 0, 255)", hsl: "hsl(240, 100%, 50%)" },
  { rgb: "rgb(255, 0, 255)", hsl: "hsl(300, 100%, 50%)" },
  { rgb: "rgb(33, 199, 95)", hsl: "hsl(142, 71.552%, 45.49%)" },
  { rgb: "rgb(19, 114, 220)", hsl: "hsl(212, 84.1%, 46.863%)" },
  { rgb: "rgb(10%, 40.4%, 49.9%)", hsl: "hsl(194, 66.013%, 30%)" },
  { rgb: "rgb(200 138 39)", hsl: "hsl(37, 67.364%, 46.863%)" },
  { rgb: "rgb(31 88 49 / 0.8)", hsl: "hsla(139, 47.899%, 23.333%, 0.8)" },
  { rgb: "rgba(110, 33, 110, 0.75)", hsl: "hsla(300, 53.846%, 28.039%, 0.75)" },
  { rgb: "rgba(10, 119, 30, 30%)", hsl: "hsla(131, 84.496%, 25.294%, 0.3)" }
]
#+end_src

Booyah!

****** Functional RGB -> Device CMYK (=rgb.cmyk=)

And now I drift again into unfamiliar terrain, but RapidTables is there again to provide a map.

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
/** Functional RGB -> Device CMYK */
export function cmyk(rgb) {
  const [r, g, b, alpha] = parseRGB(rgb);
  const [R, G, B] = [r, g, b].map((channel) =>
    calcFractionFromChannel(channel)
  );

  // https://www.rapidtables.com/convert/color/rgb-to-cmyk.html
  const k = 1 - Math.max(R, G, B);
  const [c, m, y] = [R, G, B].map((channel) => (1 - channel - k) / (1 - k));
  const A = (alpha && (alpha ?? 1)) || 1;

  // Many examples in the CSS Color Module Level 4 use the percentage format,
  // so I'm assuming that's the preferred format in conversions.
  const [C, M, Y, K] = [c, m, y, k].map((component) =>
    isNaN(component) ? 0 : precision(calcPercentFromFraction(component))
  );

  return A === 1
    ? `device-cmyk(${C}% ${M}% ${Y}% ${K}%)`
    : `device-cmyk(${C}% ${M}% ${Y}% ${K}% / ${A})`;
}
#+END_SRC

Now, I'm checking the math.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const rgb = await import(`${Deno.cwd()}/internals/color/convert/rgb.js`);

<<rgb-values>>

console.log(colors.map(({color, values}) => ({rgb: color, cmyk: rgb.cmyk(values)})));
#+END_SRC

#+NAME: rgb-to-cmyk
#+begin_src js
[
  { rgb: "rgb(0, 0, 0)", cmyk: "device-cmyk(0% 0% 0% 100%)" },
  { rgb: "rgb(128, 128, 128)", cmyk: "device-cmyk(0% 0% 0% 49.804%)" },
  { rgb: "rgb(255, 255, 255)", cmyk: "device-cmyk(0% 0% 0% 0%)" },
  { rgb: "rgb(255, 0, 0)", cmyk: "device-cmyk(0% 100% 100% 0%)" },
  { rgb: "rgb(255, 255, 0)", cmyk: "device-cmyk(0% 0% 100% 0%)" },
  { rgb: "rgb(0, 255, 0)", cmyk: "device-cmyk(100% 0% 100% 0%)" },
  { rgb: "rgb(0, 255, 255)", cmyk: "device-cmyk(100% 0% 0% 0%)" },
  { rgb: "rgb(0, 0, 255)", cmyk: "device-cmyk(100% 100% 0% 0%)" },
  { rgb: "rgb(255, 0, 255)", cmyk: "device-cmyk(0% 100% 0% 0%)" },
  { rgb: "rgb(33, 199, 95)", cmyk: "device-cmyk(83.417% 0% 52.261% 21.961%)" },
  { rgb: "rgb(19, 114, 220)", cmyk: "device-cmyk(91.364% 48.182% 0% 13.726%)" },
  { rgb: "rgb(10%, 40.4%, 49.9%)", cmyk: "device-cmyk(79.528% 18.898% 0% 50.196%)" },
  { rgb: "rgb(200 138 39)", cmyk: "device-cmyk(0% 31% 80.5% 21.569%)" },
  {
    rgb: "rgb(31 88 49 / 0.8)",
    cmyk: "device-cmyk(64.773% 0% 44.318% 65.49% / 0.8)"
  },
  { rgb: "rgba(110, 33, 110, 0.75)", cmyk: "device-cmyk(0% 70% 0% 56.863% / 0.75)" },
  {
    rgb: "rgba(10, 119, 30, 30%)",
    cmyk: "device-cmyk(91.597% 0% 74.79% 53.333% / 0.3)"
  }
]
#+end_src

Seems to check out, but I'm going to implement some visual tests soon.

****** Functional RGB -> Functional HWB (=rgb.hwb=)

The conversion of RGB to HWB is a little unorthodox. It's technically a /composite/ conversion. The
hue is first calculated via partial HSL conversion, and then the amount of white and black is
calculated via a [[https://www.w3.org/TR/css-color-4/#rgb-to-hwb][modified formula from the spec itself]].

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
/** Functional RGB -> Functional HWB */
export function hwb(rgb) {
  const [r, g, b, alpha] = parseRGB(rgb);
  const [R, G, B] = [r, g, b].map((channel) =>
    calcFractionFromChannel(channel)
  );

  const [H] = calcHSL(r, g, b);
  const [W, BLK] = [
    precision(calcPercentFromFraction(Math.min(R, G, B))),
    precision(calcPercentFromFraction(1 - Math.max(R, G, B))),
  ];
  const A = (alpha && (alpha ?? 1)) || 1;

  return A === 1 ? `hwb(${H} ${W}% ${BLK}%)` : `hwb(${H} ${W}% ${BLK}% / ${A})`;
}
#+END_SRC

I'm suspicious of the math here, so let's see the proof.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const rgb = await import(`${Deno.cwd()}/internals/color/convert/rgb.js`);

<<rgb-values>>

console.log(colors.map(({color, values}) => ({rgb: color, hwb: rgb.hwb(values)})));
#+END_SRC

#+NAME: rgb-to-hwb
#+begin_src js
[
  { rgb: "rgb(0, 0, 0)", hwb: "hwb(0 0% 100%)" },
  { rgb: "rgb(128, 128, 128)", hwb: "hwb(0 50.196% 49.804%)" },
  { rgb: "rgb(255, 255, 255)", hwb: "hwb(0 100% 0%)" },
  { rgb: "rgb(255, 0, 0)", hwb: "hwb(0 0% 0%)" },
  { rgb: "rgb(255, 255, 0)", hwb: "hwb(60 0% 0%)" },
  { rgb: "rgb(0, 255, 0)", hwb: "hwb(120 0% 0%)" },
  { rgb: "rgb(0, 255, 255)", hwb: "hwb(180 0% 0%)" },
  { rgb: "rgb(0, 0, 255)", hwb: "hwb(240 0% 0%)" },
  { rgb: "rgb(255, 0, 255)", hwb: "hwb(300 0% 0%)" },
  { rgb: "rgb(33, 199, 95)", hwb: "hwb(142 12.941% 21.961%)" },
  { rgb: "rgb(19, 114, 220)", hwb: "hwb(212 7.451% 13.726%)" },
  { rgb: "rgb(10%, 40.4%, 49.9%)", hwb: "hwb(194 10.196% 50.196%)" },
  { rgb: "rgb(200 138 39)", hwb: "hwb(37 15.294% 21.569%)" },
  { rgb: "rgb(31 88 49 / 0.8)", hwb: "hwb(139 12.157% 65.49% / 0.8)" },
  { rgb: "rgba(110, 33, 110, 0.75)", hwb: "hwb(300 12.941% 56.863% / 0.75)" },
  { rgb: "rgba(10, 119, 30, 30%)", hwb: "hwb(131 3.9216% 53.333% / 0.3)" }
]
#+end_src

I'll test this more , but the results are about what I'd expect.

****** Functional RGB -> Functional CIELAB (=rgb.lab=)

Converting RGB to CIELAB is another multistep process. The chain is as follows:

1) =Functional RGB >-< Linear RGB=
2) =Linear RGB -> CIE XYZ=
3) =CIE XYZ -> Functional CIELAB=

The =>-<= indicates a lateral conversion. One that isn't a completely different format, but a
modification of the original format for some special purpose.

CIEXYZ is a necessary waypoint on the road to CIELAB conversion indicating a set of general
coordinates based on the range of colors perceptible by the human eye.

#+BEGIN_QUOTE
In some color conversion implementations, it would also be a waypoint in CIELCh(ab) conversion, but I
think it's easier to complete the =Functional RGB <-> Functional CIELAB= link and then allow
=Functional CIELAB <-> Functional CIELCh(ab)= to form its own separate link.
#+END_QUOTE

******* Functional RGB >-< Linear RGB

Linear RGB is RGB without the gamma function applied as that would throw off the calculation of
CIEXYZ.

You can [[https://www.image-engineering.de/library/technotes/958-how-to-convert-between-srgb-and-ciexyz][read more about the actual formula]] if you're curious.

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
/** Functional RGB >-< Linear RGB */
const removeGamma = (rgb) =>
  rgb.map((v) => {
    const V = calcFractionFromChannel(v);
    return V <= 0.04045 ? V / 12.92 : ((V + 0.055) / 1.055) ** 2.4;
  });
#+END_SRC

******* Linear RGB -> CIEXYZ

Now, to convert the ungamma-ed RGB to XYZ data, we have to pass it through a transformation matrix
of values representing the D65 reference white point defined in sRGB, which CSS uses.

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
/** Linear RGB -> CIE XYZ */
function calcXYZ(rgb) {
  const [R, G, B] = removeGamma(rgb);
  return [
    R * 0.4124564 + G * 0.3575761 + B * 0.1804375,
    R * 0.2126729 + G * 0.7151522 + B * 0.072175,
    R * 0.0193339 + G * 0.119192 + B * 0.9503041,
  ]; // [X, Y, Z]
}
#+END_SRC

******* CIEXYZ -> Functional CIELAB

First, I need to apply the [[http://www.brucelindbloom.com/Eqn_ChromAdapt.html][Bradford method of chromatic adaptation]] to convert from D65 to D50, which
CIELAB uses.

And then I need to apply the actual [[http://www.brucelindbloom.com/index.html?Equations.html][conversion formula]].

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
function calcD50XYZ(rgb) {
  const [X, Y, Z] = calcXYZ(rgb);
  /*
   * D50 matrix
   * =============================
   * 1.0478112  0.0228866 -0.0501270
   * 0.0295424  0.9904844 -0.0170491
   * -0.0092345  0.0150436  0.7521316
   * =============================
   */
  return [
    X * 1.0478112 + Y * 0.0228866 + Z * -0.050127,
    X * 0.0295424 + Y * 0.9904844 + Z * -0.0170491,
    X * -0.0092345 + Y * 0.0150436 + Z * 0.7521316,
  ];
}

/** Functional RGB -> Functional CIELAB */
export function lab(rgb) {
  const [r, g, b, alpha] = parseRGB(rgb);
  const [x, y, z] = calcD50XYZ([r, g, b]);

  // CIE standards
  const ε = 216 / 24389;
  const κ = 24389 / 27;
  const white = [0.96422, 1.0, 0.82521]; // D50 reference white

  // Calculating XYZ scaled relative to white
  const [X, Y, Z] = [x, y, z].map((v, i) => v / white[i]);
  // Calculating F for each value
  const [FX, FY, FZ] = [X, Y, Z].map((V) =>
    V > ε ? Math.cbrt(V) : (κ * V + 16) / 116
  );

  // Calculating Lab values and limiting the precision
  const [L, aHue, bHue] = [
    precision(116 * FY - 16),
    precision(500 * (FX - FY)),
    precision(200 * (FY - FZ)),
  ].map((V) => (Math.sign(Math.round(V)) === 0 ? 0 : V));
  const A = (alpha && (alpha ?? 1)) || 1;

  return A === 1
    ? `lab(${L}% ${aHue} ${bHue})`
    : `lab(${L}% ${aHue} ${bHue} / ${A})`;
}
#+END_SRC

That was a lot, so I'm going to run my tests now.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const rgb = await import(`${Deno.cwd()}/internals/color/convert/rgb.js`);

<<rgb-values>>

console.log(colors.map(({color, values}) => ({rgb: color, lab: rgb.lab(values)})));
#+END_SRC

#+NAME: rgb-to-lab
#+begin_src js
[
  { rgb: "rgb(0, 0, 0)", lab: "lab(0% 0 0)" },
  { rgb: "rgb(128, 128, 128)", lab: "lab(53.585% 0 0)" },
  { rgb: "rgb(255, 255, 255)", lab: "lab(100% 0 0)" },
  { rgb: "rgb(255, 0, 0)", lab: "lab(54.292% 80.812 69.885)" },
  { rgb: "rgb(255, 255, 0)", lab: "lab(97.607% -15.753 93.388)" },
  { rgb: "rgb(0, 255, 0)", lab: "lab(87.818% -79.287 80.99)" },
  { rgb: "rgb(0, 255, 255)", lab: "lab(90.665% -50.665 -14.962)" },
  { rgb: "rgb(0, 0, 255)", lab: "lab(29.568% 68.299 -112.03)" },
  { rgb: "rgb(255, 0, 255)", lab: "lab(60.17% 93.55 -60.499)" },
  { rgb: "rgb(33, 199, 95)", lab: "lab(70.854% -58.576 39.72)" },
  { rgb: "rgb(19, 114, 220)", lab: "lab(47.683% 5.8918 -62.494)" },
  { rgb: "rgb(10%, 40.4%, 49.9%)", lab: "lab(39.981% -16.954 -20.404)" },
  { rgb: "rgb(200 138 39)", lab: "lab(62.671% 18.464 58.572)" },
  { rgb: "rgb(31 88 49 / 0.8)", lab: "lab(32.891% -26.87 16.881 / 0.8)" },
  { rgb: "rgba(110, 33, 110, 0.75)", lab: "lab(28.127% 41.667 -27.612 / 0.75)" },
  { rgb: "rgba(10, 119, 30, 30%)", lab: "lab(43.317% -42.987 38.123 / 0.3)" }
]
#+end_src

Awesome.

****** Functional RGB -> Oklab (LCh) (=rgb.oklab=)

[[https://bottoson.github.io/posts/oklab][Oklab]] is a perceptual color space for image processing created by Björn Ottosson. It has all the
advantages of CIELAB but fewer of its drawbacks in hue shifting (especially with blues).

This makes it excellent for adjusting color properties and blending colors.

I specifically use the formulas for converting Linear RGB to/from Oklab to convert to Oklab (LCh)
and ensure the output stays within the sRGB gamut.

#+BEGIN_SRC js :tangle "./internals/color/convert/rgb.js" :comments link
function calcOklab(rgb) {
  const [r, g, b, alpha] = parseRGB(rgb);
  const [R, G, B] = removeGamma([r, g, b]);

  // Convert to LMS cone activations and apply non-linearity
  const [L, M, S] = [
    R * 0.4122214708 + G * 0.5363325363 + B * 0.0514459929,
    R * 0.2119034982 + G * 0.6806995451 + B * 0.1073969566,
    R * 0.0883024619 + G * 0.2817188376 + B * 0.6299787005,
  ].map((V) => Math.cbrt(V));

  // Calculate Oklab values
  return [
    L * 0.2104542553 + M * 0.793617785 - S * 0.0040720468,
    L * 1.9779984951 - M * 2.428592205 + S * 0.4505937099,
    L * 0.0259040371 + M * 0.7827717662 - S * 0.808675766,
    (alpha && (alpha ?? 1)) || 1, // slot in alpha
  ];
}

export function oklab(rgb) {
  const [l, a, b, alpha] = calcOklab(rgb);
  const truncate = significant.bind(null, 3);

  const L = `${precision(calcPercentFromFraction(l))}%`;
  const c = precision(Math.sqrt(a ** 2 + b ** 2));
  const h = precision(Math.atan2(b, a) * (180 / Math.PI));

  const C = +c.toFixed(5); // Ensure negative exponent is rendered as 0
  const H = Math.sign(h) === -1 ? correctHueCounterClockwise(h) : h;

  const A = (alpha && (alpha ?? 1)) || 1;

  return A === 1 ? `oklab(${L} ${C} ${H})` : `oklab(${L} ${C} ${H} / ${A})`;
}
#+END_SRC

Now, I'll do some quick tests.

#+BEGIN_SRC deno :results output code replace :allow read :noweb yes
const rgb = await import(`${Deno.cwd()}/internals/color/convert/rgb.js`);

<<rgb-values>>

console.log(colors.map(({color, values}) => ({rgb: color, oklab: rgb.oklab(values)})));
#+END_SRC

#+RESULTS:
#+begin_src deno
[
  { rgb: "rgb(0, 0, 0)", oklab: "oklab(0% 0 0)" },
  { rgb: "rgb(128, 128, 128)", oklab: "oklab(59.987% 0 89.876)" },
  { rgb: "rgb(255, 255, 255)", oklab: "oklab(100% 0 89.876)" },
  { rgb: "rgb(255, 0, 0)", oklab: "oklab(62.795% 0.25768 29.234)" },
  { rgb: "rgb(255, 255, 0)", oklab: "oklab(96.798% 0.21101 109.77)" },
  { rgb: "rgb(0, 255, 0)", oklab: "oklab(86.644% 0.29483 142.5)" },
  { rgb: "rgb(0, 255, 255)", oklab: "oklab(90.54% 0.15455 194.77)" },
  { rgb: "rgb(0, 0, 255)", oklab: "oklab(45.201% 0.31321 264.052)" },
  { rgb: "rgb(255, 0, 255)", oklab: "oklab(70.167% 0.32249 328.363)" },
  { rgb: "rgb(33, 199, 95)", oklab: "oklab(72.803% 0.19376 149.64)" },
  { rgb: "rgb(19, 114, 220)", oklab: "oklab(56.178% 0.18151 255.9)" },
  { rgb: "rgb(10%, 40.4%, 49.9%)", oklab: "oklab(47.981% 0.08068 223.7)" },
  { rgb: "rgb(200 138 39)", oklab: "oklab(67.957% 0.13135 73.667)" },
  { rgb: "rgb(31 88 49 / 0.8)", oklab: "oklab(41.183% 0.08802 150.97 / 0.8)" },
  { rgb: "rgba(110, 33, 110, 0.75)", oklab: "oklab(39.98% 0.14447 327.865 / 0.75)" },
  { rgb: "rgba(10, 119, 30, 30%)", oklab: "oklab(49.592% 0.15347 144.63 / 0.3)" }
]
#+end_src

The back conversion will confirm the correctness of this code.

***** Functional HSL Conversion (=internals/color/convert/hsl.js=)

HSL conversion sits like an island in the conversion algorithms, because even though it's easier for
humans to work with, RGB conversions are easier to /calculate/. And so, all conversions from this
point on convert to and from the RGB space.

****** Functional RGB <- Functional HSL (=hsl.rgb=)

The only unique HSL conversion is a regressive conversion to RGB which can be used as a jumping off
point for converting to all remaining formats.

First, the extracted values require some prepping before calculations are predictable.

#+BEGIN_SRC js :tangle "./internals/color/convert/hsl.js" :comments link
import {
  calcChannelFromFraction,
  calcFractionFromPercent,
  calcHueFromGrad,
  calcHueFromRad,
  calcHueFromTurn,
  correctHueClockwise,
  correctHueCounterClockwise,
} from "./setup.js";

// https://www.rapidtables.com/convert/color/hsl-to-rgb.html
const calcChannels = (C, X, H) =>
  new Map([
    [[C, X, 0], 0 <= H && H < 60],
    [[X, C, 0], 60 <= H && H < 120],
    [[0, C, X], 120 <= H && H < 180],
    [[0, X, C], 180 <= H && H < 240],
    [[X, 0, C], 240 <= H && H < 300],
    [[C, 0, X], 300 <= H && H < 360],
  ]);

export const parseHSL = (hsl) => {
  const [h, s, l, alpha] = hsl;

  const [H] = [h].map((value) => {
    const n = parseFloat(value);
    const isNegative = (n) => Math.sign(n) === -1;
    let hue;

    // Set hue based on unit
    if (value.endsWith("grad")) {
      hue = isNegative(n) ? calcHueFromGrad(n + 400) : calcHueFromGrad(n);
    } else if (value.endsWith("rad")) {
      hue = isNegative(n) ? calcHueFromRad(n + 6.28319) : calcHueFromRad(n);
    } else if (value.endsWith("turn")) {
      hue = isNegative(n) ? calcHueFromTurn(n + 1) : calcHueFromTurn(n);
    } else {
      hue = n;
    }

    // hue correction
    let degrees;
    if (hue >= 360) {
      degrees = correctHueClockwise(hue);
    } else if (isNegative(hue)) {
      degrees = correctHueClockwise(correctHueCounterClockwise(hue));
    } else {
      degrees = hue;
    }

    return degrees;
  });

  const [S, L] = [s, l].map((value) => {
    const n = parseFloat(value);
    return calcFractionFromPercent(n);
  });

  const a = parseFloat(alpha);
  const A = a != null ? (a > 1 ? calcFractionFromPercent(a) : a) : 1;

  return A === 1 ? [H, S, L] : [H, S, L, A];
};

export const calcRGB = (h, s, l) => {
  // Calculate chroma
  const C = (1 - Math.abs(2 * l - 1)) * s;
  const X = C * (1 - Math.abs(((h / 60) % 2) - 1));
  const m = l - C / 2;

  // Evaluate channels
  const [R, G, B] = Array.from(calcChannels(C, X, h))
    .filter(([, condition]) => condition)
    .flatMap(([evaluation]) => evaluation)
    .map((channel) => Math.round(calcChannelFromFraction(channel + m)));

  return [R, G, B];
};
#+END_SRC

Phew. Now for the actual conversion algorithm, it's a similar pattern to the RGB progressive
conversion to HSL.

#+BEGIN_SRC js :tangle "./internals/color/convert/hsl.js" :comments link
/** Functional RGB <- Functional HSL */
export function rgb(hsl) {
  const [h, s, l, alpha] = parseHSL(hsl);
  const [R, G, B] = calcRGB(h, s, l);

  const A = (alpha && (alpha ?? 1)) || 1;

  return A === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${A})`;
}
#+END_SRC

Now, the tests with my extracted HSL to verify that the math checks out.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const hsl = await import(`${Deno.cwd()}/internals/color/convert/hsl.js`);

<<hsl-values>>

console.log(colors.map(({color, values}) => ({hsl: color, rgb: hsl.rgb(values)})));
#+END_SRC

#+NAME: hsl-to-rgb
#+begin_src js
[
  { hsl: "hsl(0, 0%, 0%)", rgb: "rgb(0, 0, 0)" },
  { hsl: "hsl(0, 0%, 50%)", rgb: "rgb(128, 128, 128)" },
  { hsl: "hsl(0, 0%, 100%)", rgb: "rgb(255, 255, 255)" },
  { hsl: "hsl(0, 100%, 50%)", rgb: "rgb(255, 0, 0)" },
  { hsl: "hsl(60, 100%, 50%)", rgb: "rgb(255, 255, 0)" },
  { hsl: "hsl(120, 100%, 50%)", rgb: "rgb(0, 255, 0)" },
  { hsl: "hsl(180, 100%, 50%)", rgb: "rgb(0, 255, 255)" },
  { hsl: "hsl(240, 100%, 50%)", rgb: "rgb(0, 0, 255)" },
  { hsl: "hsl(300, 100%, 50%)", rgb: "rgb(255, 0, 255)" },
  { hsl: "hsl(38, 78%, 40%)", rgb: "rgb(182, 123, 22)" },
  { hsl: "hsl(3 88% 70%)", rgb: "rgb(246, 118, 111)" },
  { hsl: "hsl(189 63% 85% / 0.71)", rgb: "rgba(193, 234, 241, 0.71)" },
  { hsl: "hsla(1.5rad, 73%, 10%, 0.831)", rgb: "rgba(28, 44, 7, 0.831)" },
  { hsl: "hsl(320grad 89% 36% / 79%)", rgb: "rgba(141, 10, 174, 0.79)" },
  { hsl: "hsl(0.36turn 83% 90%)", rgb: "rgb(208, 251, 215)" }
]
#+end_src

***** Device CMYK Conversion (=internals/color/convert/device-cmyk.js=)

CMYK  conversion is like HSL in that it's more of an endpoint and needs to be regressively converted
to functional RGB before it can be included in a conversion chain.

****** Functional RGB <- Device CMYK (=cmyk.rgb=)

First, some minimal setup.

#+BEGIN_SRC js :tangle "./internals/color/convert/device-cmyk.js" :comments link
import { calcChannelFromFraction, calcFractionFromPercent } from "./setup.js";

function parseCMYK(cmyk) {
  const [c, m, y, k, alpha] = cmyk;
  const value = (s) => parseFloat(s);
  const [C, M, Y, K] = [c, m, y, k].map((component) =>
    component.endsWith("%")
      ? calcFractionFromPercent(value(component))
      : value(component)
  );

  const a = value(alpha);
  const A = a != null ? (a > 1 ? calcFractionFromPercent(a) : a) : 1;

  return A === 1 ? [C, M, Y, K] : [C, M, Y, K, A];
}
#+END_SRC

For the conversion algorithm, it's RapidTables coming again with the assist.

#+BEGIN_SRC js :tangle "./internals/color/convert/device-cmyk.js" :comments link
/** Functional RGB <- Device CMYK */
export function rgb(cmyk) {
  const [C, M, Y, K, alpha] = parseCMYK(cmyk);

  const [R, G, B] = [C, M, Y].map((component) =>
    Math.round(calcChannelFromFraction((1 - component) * (1 - K)))
  );
  const A = (alpha && (alpha ?? 1)) || 1;

  return A === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${A})`;
}
#+END_SRC

Time to see if the math stacks up.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const cmyk = await import(`${Deno.cwd()}/internals/color/convert/device-cmyk.js`);

<<cmyk-values>>

console.log(colors.map(({color, values}) => ({cmyk: color, rgb: cmyk.rgb(values)})));
#+END_SRC

#+NAME: cmyk-to-rgb
#+begin_src js
[
  { cmyk: "device-cmyk(0% 0% 0% 100%)", rgb: "rgb(0, 0, 0)" },
  { cmyk: "device-cmyk(0% 0% 0% 50%)", rgb: "rgb(128, 128, 128)" },
  { cmyk: "device-cmyk(0% 0% 0% 0%)", rgb: "rgb(255, 255, 255)" },
  { cmyk: "device-cmyk(0% 100% 100% 0%)", rgb: "rgb(255, 0, 0)" },
  { cmyk: "device-cmyk(0% 0% 100% 0%)", rgb: "rgb(255, 255, 0)" },
  { cmyk: "device-cmyk(100% 0% 100% 0%)", rgb: "rgb(0, 255, 0)" },
  { cmyk: "device-cmyk(100% 0% 0% 0%)", rgb: "rgb(0, 255, 255)" },
  { cmyk: "device-cmyk(100% 100% 0% 0%)", rgb: "rgb(0, 0, 255)" },
  { cmyk: "device-cmyk(0% 100% 0% 0%)", rgb: "rgb(255, 0, 255)" },
  { cmyk: "device-cmyk(37% 63% 0 0)", rgb: "rgb(161, 94, 255)" },
  { cmyk: "device-cmyk(50% 25% 10% 0)", rgb: "rgb(128, 191, 230)" },
  { cmyk: "device-cmyk(0.77 0.33 0 0)", rgb: "rgb(59, 171, 255)" },
  { cmyk: "device-cmyk(0.8 0 0.4 0.13 / 0.8)", rgb: "rgba(44, 222, 133, 0.8)" },
  { cmyk: "device-cmyk(25% 75% 8% 3% / 81.3%)", rgb: "rgba(186, 62, 228, 0.813)" }
]
#+end_src

***** Functional HWB Conversion (=internals/color/convert/hwb.js=)

The only possible conversion from HWB is a regressive conversion to RGB. This provides the necessary
bridge to other format conversions.

****** Functional RGB <- Functional HWB (=hwb.rgb=)

As with the progressive conversion, the regressive conversion is a composite. It first splits the
hue with a call to =calcRGB()= from the HSL conversion module, setting the saturation and lightness to
return a pure hue, then modifies the result with the given amount of white and black.

Again, the implementation uses [[https://www.w3.org/TR/css-color-4/#hwb-to-rgb][a formula ripped straight from the spec]] with some modifications.

First, setting up some helpers:

#+BEGIN_SRC js :tangle "./internals/color/convert/hwb.js" :comments link
import {
  calcChannelFromFraction,
  calcFractionFromChannel,
  calcFractionFromPercent,
} from "./setup.js";
import { calcRGB, parseHSL } from "./hsl.js";

function parseHWB(hwb) {
  const [h, w, blk, alpha] = hwb;
  const [H] = parseHSL([h, "100%", "50%", "1"]);
  const [W, BLK] = [w, blk].map((component) =>
    calcFractionFromPercent(parseFloat(component))
  );

  const a = parseFloat(alpha);
  const A = a != null ? (a > 1 ? calcFractionFromPercent(a) : a) : 1;

  return A === 1 ? [H, W, BLK] : [H, W, BLK, A];
}
#+END_SRC

And now for the conversion algorithm.

#+BEGIN_SRC js :tangle "./internals/color/convert/hwb.js" :comments link
/** Functional RGB <- Functional HWB */
export function rgb(hwb) {
  const [h, w, blk, alpha] = parseHWB(hwb);
  const [r, g, b] = calcRGB(h, 1, 0.5);

  const A = (alpha && (alpha ?? 1)) || 1;

  // Achromatic
  if (w + blk >= 1) {
    const GRAY = Math.round(calcChannelFromFraction(w / (w + blk)));
    return A === 1
      ? `rgb(${GRAY}, ${GRAY}, ${GRAY})`
      : `rgba(${GRAY}, ${GRAY}, ${GRAY}, ${A})`;
  }

  const [R, G, B] = [r, g, b].map((channel) =>
    Math.round(
      calcChannelFromFraction(
        calcFractionFromChannel(channel) * (1 - w - blk) + w,
      ),
    )
  );

  return A === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${A})`;
}
#+END_SRC

Now the fun part: seeing if anything breaks.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const hwb = await import(`${Deno.cwd()}/internals/color/convert/hwb.js`);

<<hwb-values>>

console.log(colors.map(({color, values}) => ({hwb: color, rgb: hwb.rgb(values)})));
#+END_SRC

#+NAME: hwb-to-rgb
#+begin_src js
[
  { hwb: "hwb(0 0% 100%)", rgb: "rgb(0, 0, 0)" },
  { hwb: "hwb(0 100% 100%)", rgb: "rgb(128, 128, 128)" },
  { hwb: "hwb(0 100% 0%)", rgb: "rgb(255, 255, 255)" },
  { hwb: "hwb(0 0% 0%)", rgb: "rgb(255, 0, 0)" },
  { hwb: "hwb(60 0% 0%)", rgb: "rgb(255, 255, 0)" },
  { hwb: "hwb(120 0% 0%)", rgb: "rgb(0, 255, 0)" },
  { hwb: "hwb(180 0% 0%)", rgb: "rgb(0, 255, 255)" },
  { hwb: "hwb(240 0% 0%)", rgb: "rgb(0, 0, 255)" },
  { hwb: "hwb(300 0% 0%)", rgb: "rgb(255, 0, 255)" },
  { hwb: "hwb(188 20% 3%)", rgb: "rgb(51, 221, 247)" },
  { hwb: "hwb(3.1rad 50% 0%)", rgb: "rgb(128, 255, 251)" },
  { hwb: "hwb(183grad 5% 15% / 0.5)", rgb: "rgba(13, 217, 166, 0.5)" },
  { hwb: "hwb(0.8turn 38% 99%)", rgb: "rgb(71, 71, 71)" }
]
#+end_src

Looks like we're golden.

***** Functional CIELAB Conversion (=internals/color/convert/lab.js=)

CIELAB requires a regressive conversion to Functional RGB. With this, the link is complete and CIE
Lab colors now have a bridge to other conversions.

****** CIELAB Conversion Setup

I'll have to grab the RGB channel conversion function from my math kit.

#+BEGIN_SRC js :tangle "./internals/color/convert/lab.js" :comments link
import {
  calcChannelFromFraction,
  calcFractionFromPercent,
  calcHueFromRad,
  correctHueCounterClockwise,
  normalize,
  significant,
} from "./setup.js";
#+END_SRC

****** Functional RGB <- Functional CIELAB (=lab.rgb=)

Now, I follow an inversion of the progressive conversion algorithm.

1) =CIE XYZ <- Functional CIELAB=
2) =Linear RGB <- CIE XYZ=
3) =Linear RGB >-< Functional RGB=

******* CIE XYZ <- Functonal CIELAB

The [[http://www.brucelindbloom.com/index.html?Equations.html][formula for regressing CIELAB to CIE XYZ]] is cleanly outlined. So, I'll follow that.

#+BEGIN_SRC js :tangle "./internals/color/convert/lab.js" :comments link
function calcXYZ(lab) {
  const [L, a, b] = lab.map((v) => parseFloat(v));

  // CIE standards
  const ε = 216 / 24389;
  const κ = 24389 / 27;
  const white = [0.96422, 1.0, 0.82521]; // D50 reference white

  // Compute the values of F
  const Fy = (L + 16) / 116;
  const Fx = a / 500 + Fy;
  const Fz = Fy - b / 200;

  // Calculate xyz
  const [x, y, z] = [
    Fx ** 3 > ε ? Fx ** 3 : (116 * Fx - 16) / κ,
    L > κ * ε ? Fy ** 3 : L / κ,
    Fz ** 3 > ε ? Fz ** 3 : (116 * Fz - 16) / κ,
  ];

  return [x, y, z].map((V, i) => V * white[i]);
}
#+END_SRC

******* CIE XYZ -> Linear RGB

The next step is converting the D50 XYZ to sRGB native D65 XYZ via chromatic adaptation.

And /then/ passing it through the inverse transformation matrix to get linear RGB.

#+BEGIN_SRC js :tangle "./internals/color/convert/lab.js" :comments link
function calcLinearRGB(lab) {
  const [x, y, z] = calcXYZ(lab);
  /**
   * D65 transformation matrix
   * =============================
   * 0.9555766 -0.0230393  0.0631636
   * -0.0282895  1.0099416  0.0210077
   * 0.0122982 -0.0204830  1.3299098
   * =============================
   */
  const [X, Y, Z] = [
    x * 0.9555766 + y * -0.0230393 + z * 0.0631636,
    x * -0.0282895 + y * 1.0099416 + z * 0.0210077,
    x * 0.0122982 + y * -0.020483 + z * 1.3299098,
  ];

  /**
   * linear sRGB transformation matrix (inverse)
   * =============================
   *  3.2404542 -1.5371385 -0.4985314
   * -0.9692660  1.8760108  0.0415560
   *  0.0556434 -0.2040259  1.0572252
   * =============================
   */
  return [
    X * 3.2404542 + Y * -1.5371385 + Z * -0.4985314,
    X * -0.969266 + Y * 1.8760108 + Z * 0.041556,
    X * 0.0556434 + Y * -0.2040259 + Z * 1.0572252,
  ];
}
#+END_SRC

******* Linear RGB >-< Functional RGB

Gamma application is the finishing touch before converting the channel values to the expected =0-255=
range.

#+BEGIN_SRC js :tangle "./internals/color/convert/lab.js" :comments link
const calcRGB = (lrgb) =>
  lrgb.map((V) => V <= 0.0031308 ? 12.92 * V : 1.055 * V ** (1 / 2.4) - 0.055);

/** Functional CIELAB <- Functional RGB */
export function rgb(lab) {
  const [l, a, b, alpha] = lab;

  const [R, G, B] = calcRGB(calcLinearRGB([l, a, b])).map((channel) =>
    normalize(0, calcChannelFromFraction(channel), 255)
  );
  const A = (alpha &&
    (alpha.endsWith("%")
      ? calcFractionFromPercent(parseFloat(alpha))
      : alpha)) ||
    1;

  return A === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${A})`;
}
#+END_SRC

That was a lot to parse. Time to see if the calculations check out.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const lab = await import(`${Deno.cwd()}/internals/color/convert/lab.js`);

<<lab-values>>

console.log(colors.map(({color, values}) => ({lab: color, rgb: lab.rgb(values)})));
#+END_SRC

#+NAME: lab-to-rgb
#+begin_src js
[
  { lab: "lab(0% 0 0)", rgb: "rgb(0, 0, 0)" },
  { lab: "lab(53.59% 0 0)", rgb: "rgb(128, 128, 128)" },
  { lab: "lab(100% 0 0)", rgb: "rgb(255, 255, 255)" },
  { lab: "lab(54.29% 80.81 69.89)", rgb: "rgb(255, 0, 0)" },
  { lab: "lab(97.6% -15.75 93.39)", rgb: "rgb(255, 255, 0)" },
  { lab: "lab(87.82% -79.29 80.99)", rgb: "rgb(0, 255, 0)" },
  { lab: "lab(90.67% -50.67 -14.96)", rgb: "rgb(0, 255, 255)" },
  { lab: "lab(29.57% 68.3 -112.03)", rgb: "rgb(0, 0, 255)" },
  { lab: "lab(60.17% 93.55 -60.5)", rgb: "rgb(255, 0, 255)" },
  { lab: "lab(49.18% 38.1 -110.33)", rgb: "rgb(0, 102, 255)" },
  { lab: "lab(91.3% -93 14)", rgb: "rgb(0, 255, 199)" },
  { lab: "lab(83.119% 49.34 -3.99 / 0.75)", rgb: "rgba(255, 169, 217, 0.75)" },
  { lab: "lab(199% 38 13 / 78%)", rgb: "rgba(255, 255, 255, 0.78)" }
]
#+end_src

I'll stamp this as Good Enough™.

****** Functional CIELAB -> Functional CIELCh(ab) (=lab.lch=)

The final bridge is a progressive conversion of CIELAB to CIELCh(ab). With this, all known and proposed
CSS color formats are supported by the Quarks System Core.

And thankfully, [[http://www.brucelindbloom.com/Eqn_Lab_to_LCH.html][the formula]] is a dead simple conversion of rectangle coordinates to polar coordinates.

#+BEGIN_SRC js :tangle "./internals/color/convert/lab.js" :comments link
const precision = significant.bind(null, 5);

/** Functional CIELAB -> Functional CIELCh(ab) */
export function lch(lab) {
  const [L, a, b, alpha] = lab;
  const [C, h] = [
    precision(Math.sqrt(parseFloat(a) ** 2 + parseFloat(b) ** 2)),
    precision(Math.atan2(parseFloat(b), parseFloat(a)) * (180 / Math.PI)),
  ];

  const H = Math.sign(h) === -1 ? h + 360 : h;

  const A = (alpha &&
    (alpha.endsWith("%")
      ? calcFractionFromPercent(parseFloat(alpha))
      : alpha)) ||
    1;

  return A === 1 ? `lch(${L} ${C} ${H})` : `lch(${L} ${C} ${H} / ${A})`;
}
#+END_SRC

Now to make sure it returns what I expect.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const lab = await import(`${Deno.cwd()}/internals/color/convert/lab.js`);

<<lab-values>>

console.log(colors.map(({color, values}) => ({lab: color, lch: lab.lch(values)})));
#+END_SRC

#+NAME: lab-to-lch
#+begin_src js
[
  { lab: "lab(0% 0 0)", lch: "lch(0% 0 0)" },
  { lab: "lab(53.59% 0 0)", lch: "lch(53.59% 0 0)" },
  { lab: "lab(100% 0 0)", lch: "lch(100% 0 0)" },
  { lab: "lab(54.29% 80.81 69.89)", lch: "lch(54.29% 106.84 40.855)" },
  { lab: "lab(97.6% -15.75 93.39)", lch: "lch(97.6% 94.709 99.573)" },
  { lab: "lab(87.82% -79.29 80.99)", lch: "lch(87.82% 113.34 134.39)" },
  { lab: "lab(90.67% -50.67 -14.96)", lch: "lch(90.67% 52.832 196.45)" },
  { lab: "lab(29.57% 68.3 -112.03)", lch: "lch(29.57% 131.21 301.369)" },
  { lab: "lab(60.17% 93.55 -60.5)", lch: "lch(60.17% 111.41 327.109)" },
  { lab: "lab(49.18% 38.1 -110.33)", lch: "lch(49.18% 116.72 289.051)" },
  { lab: "lab(91.3% -93 14)", lch: "lch(91.3% 94.048 171.44)" },
  {
    lab: "lab(83.119% 49.34 -3.99 / 0.75)",
    lch: "lch(83.119% 49.501 355.3767 / 0.75)"
  },
  { lab: "lab(199% 38 13 / 78%)", lch: "lch(199% 40.162 18.886 / 0.78)" }
]
#+end_src

That'll do it.

***** Functional CIELCh Conversion (=internals/color/convert/lch.js=)

Now, I need to calculate the regressive conversion of LCH back to Lab. This final algorithm closes
the conversion chain and allows any supported format to convert to and from any other supported
format.

****** Functional CIELAB <- Functional CIELCh(ab) (=lch.lab=)

First, a little setup.

It's necessary for the hue component of LCH to use the same possible hue inputs as HSL, because
that's what's allowed in the spec.

#+BEGIN_SRC js :tangle "./internals/color/convert/lch.js" :comments link
import { calcFractionFromPercent, normalize, significant } from "./setup.js";
import { parseHSL } from "./hsl.js";

const precision = significant.bind(null, 5);
#+END_SRC

The [[http://www.brucelindbloom.com/Eqn_LCH_to_Lab.html][conversion algorithm itself]] is short and sweet.

#+BEGIN_SRC js :tangle "./internals/color/convert/lch.js" :comments link
/** Functional CIELAB <- Functional CIELCh(ab) */
export function lab(lch) {
  const [L, c, h, alpha] = lch;
  const C = parseFloat(c);
  const [H] = parseHSL([h, "100%", "50%", "1"]);

  const [a, b] = [
    precision(C * Math.cos(H * (Math.PI / 180))),
    precision(C * Math.sin(H * (Math.PI / 180))),
  ];

  const A = (alpha &&
    (alpha.endsWith("%")
      ? calcFractionFromPercent(parseFloat(alpha))
      : alpha)) ||
    1;

  return A === 1 ? `lab(${L} ${a} ${b})` : `lab(${L} ${a} ${b} / ${A})`;
}
#+END_SRC

Alright, time to test the LCH color table.

#+BEGIN_SRC js :results output code replace :allow read :noweb yes
const lch = await import(`${Deno.cwd()}/internals/color/convert/lch.js`);

<<lch-values>>

console.log(colors.map(({color, values}) => ({lch: color, lab: lch.lab(values)})));
#+END_SRC

#+NAME: lch-to-lab
#+begin_src js
[
  { lch: "lch(0% 0 0)", lab: "lab(0% 0 0)" },
  { lch: "lch(53.59% 0 0)", lab: "lab(53.59% 0 0)" },
  { lch: "lch(100% 0 0)", lab: "lab(100% 0 0)" },
  { lch: "lch(54.29% 106.84 40.855)", lab: "lab(54.29% 80.81 69.889)" },
  { lch: "lch(97.6% 94.709 99.573)", lab: "lab(97.6% -15.75 93.39)" },
  { lch: "lch(87.82% 113.34 134.39)", lab: "lab(87.82% -79.286 80.992)" },
  { lch: "lch(90.67% 52.832 196.45)", lab: "lab(90.67% -50.669 -14.961)" },
  { lch: "lch(29.57% 131.21 301.369)", lab: "lab(29.57% 68.301 -112.03)" },
  { lch: "lch(60.17% 111.41 327.109)", lab: "lab(60.17% 93.552 -60.5)" },
  { lch: "lch(53.31% 89.31 200)", lab: "lab(53.31% -83.924 -30.546)" },
  { lch: "lch(89.1% 167.34 3.6rad / 0.99)", lab: "lab(89.1% -150.4 -73.357 / 0.99)" },
  { lch: "lch(24.494% 74.9 193grad)", lab: "lab(24.494% -74.49 7.8292)" },
  {
    lch: "lch(47.39% 111.193 0.62turn / 75%)",
    lab: "lab(47.39% -81.321 -75.833 / 0.75)"
  }
]
#+end_src

And that's it for color conversion.

***** Oklab (LCh) Conversion (=internals/color/convert/oklab.js=)

Now I need to allow for a regressive conversion of Oklab (LCh) back to sRGB. This creates a bridge
back to standard supported formats and closes the loop.

First, I'll need to convert Oklab (LCh) values back to raw Oklab values.

#+BEGIN_SRC js :tangle "./internals/color/convert/oklab.js" :comments link
import {
  calcChannelFromFraction,
  calcFractionFromChannel,
  calcFractionFromPercent,
  normalize,
} from "./setup.js";

function parseOklab(oklab) {
  const [l, c, h, alpha] = oklab;

  // Convert values back to their raw Oklab form
  const L = calcFractionFromPercent(parseFloat(l));
  const C = c;
  const H = 2 * Math.PI * (h / 360);

  // Calculate a, b
  const [a, b] = [C * Math.cos(H), C * Math.sin(H)];

  return [L, a, b, alpha];
}
#+END_SRC

Having done that, I can now use the conversion formula to convert to linear sRGB.

#+BEGIN_SRC js :tangle "./internals/color/convert/oklab.js" :comments link
function calcLinearRGB(oklab) {
  const [l, a, b, alpha] = parseOklab(oklab);

  // Calculate LMS cone activations
  const [L, M, S] = [
    l + a * 0.3963377774 + b * 0.2158037573,
    l - a * 0.1055613458 - b * 0.0638541728,
    l - a * 0.0894841775 - b * 1.291485548,
  ].map((V) => V ** 3);

  // Calculate linear RGB
  return [
    L * 4.076416621 - M * 3.3077115913 + S * 0.2309699292,
    L * -1.2684380046 + M * 2.6097574011 - S * 0.3413193965,
    L * -0.0041960863 - M * 0.7034186147 + S * 1.707614701,
    alpha, // slot in alpha
  ];
}
#+END_SRC

Next, I apply the gamma, normalize the channels, and return the color.

#+BEGIN_SRC js :tangle "./internals/color/convert/oklab.js" :comments link
export function rgb(oklab) {
  const [r, g, b, alpha] = calcLinearRGB(oklab);

  const [R, G, B] = [r, g, b]
        .map((V) => (V <= 0.0031308 ? 12.92 * V : 1.055 * V ** (1 / 2.4) - 0.055))
        .map((V) => normalize(0, calcChannelFromFraction(V), 255));

  const A = (alpha && (alpha ?? 1)) || 1;

  return A === 1 ? `rgb(${R}, ${G}, ${B})` : `rgba(${R}, ${G}, ${B}, ${A})`;
}
#+END_SRC

That was a straightforward process, but I'm going to check that it works.

#+BEGIN_SRC deno :results output code replace :allow read :noweb yes
const oklab = await import(`${Deno.cwd()}/internals/color/convert/oklab.js`);

<<oklab-values>>

console.log(colors.map(({color, values}) => ({oklab: color, rgb: oklab.rgb(values)})));
#+END_SRC

#+RESULTS:
#+begin_src deno
[
  { oklab: "oklab(0% 0 0)", rgb: "rgb(0, 0, 0)" },
  { oklab: "oklab(59.987% 0 0)", rgb: "rgb(128, 128, 128)" },
  { oklab: "oklab(100% 0 0)", rgb: "rgb(255, 255, 255)" },
  { oklab: "oklab(62.795% 0.25768 29.234)", rgb: "rgb(255, 0, 0)" },
  { oklab: "oklab(96.768% 0.21101 109.77)", rgb: "rgb(255, 255, 0)" },
  { oklab: "oklab(86.644% 0.29483 142.5)", rgb: "rgb(0, 255, 0)" },
  { oklab: "oklab(90.54% 0.15455 194.77)", rgb: "rgb(0, 255, 255)" },
  { oklab: "oklab(45.201% 0.31321 264.052)", rgb: "rgb(0, 0, 255)" },
  { oklab: "oklab(70.167% 0.32249 328.363)", rgb: "rgb(255, 0, 255)" },
  { oklab: "oklab(37.119% 0.482 90)", rgb: "rgb(150, 0, 0)" },
  { oklab: "oklab(29.11% 0.25 180)", rgb: "rgb(0, 72, 48)" },
  { oklab: "oklab(53.33% 0.5 270)", rgb: "rgb(87, 0, 255)" },
  { oklab: "oklab(84% 0.1043 350.31)", rgb: "rgb(255, 175, 212)" },
  { oklab: "oklab(25.14% 0.44 60 / 0.8)", rgb: "rgba(142, 0, 0, 0.8)" }
]
#+end_src

And that completes the implementation.

** Data

This section documents lookup tables and other hardcoded bits of data used by the core modules.

*** Color

**** W3C X11 Color Definitions (=data/color/w3c-x11.js=)

This is a lookup table for [[http://www.w3.org/TR/css3-color/#svg-color][all named CSS colors]] as of the CSS4 module updates.

#+BEGIN_SRC js :tangle "./data/color/w3c-x11.js" :comments link
/** X11 color names: https://www.w3.org/TR/css3-color/#svg-color */
export const X11Colors = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflower: "#6495ed",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  gold: "#ffd700",
  goldenrod: "#daa520",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  laserlemon: "#ffff54",
  lavender: "#e6e6fa",
  lavenderblush: "#fff0f5",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrod: "#fafad2",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  maroon2: "#7f0000",
  maroon3: "#b03060",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  purple2: "#7f007f",
  purple3: "#a020f0",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32",
};
#+END_SRC

**** Accesible Web Defaults (=data/color/a11y.js=)

This is a lookup table for [[http://clrs.cc][better web defaults]] optimized for accessibility.

#+BEGIN_SRC js :tangle "./data/color/a11y.js" :comments link
/** Better web default colors: http://clrs.cc */
export const A11yColors = {
  navy: "#001f3f",
  blue: "#0074d9",
  aqua: "#7fdbff",
  teal: "#39cccc",
  olive: "#3d9970",
  green: "#2ecc40",
  lime: "#01ff70",
  yellow: "#ffdc00",
  orange: "#ff851b",
  red: "#ff4136",
  maroon: "#85144b",
  fuchsia: "#f012be",
  purple: "#b10dc9",
  black: "#111111",
  gray: "#aaaaaa",
  grey: "#aaaaaa",
  silver: "#dddddd",
  white: "#ffffff",
};
#+END_SRC

*** Typography

**** System Font Stacks (=data/typography/system.js=)

This is a lookup table for [[https://systemfontstack.com][system font stacks]] for use by themselves or attached to the end of a font
stack to provide better fallbacks than =sans-serif=, =serif=, or =monospace=.

#+BEGIN_SRC js :tangle "./data/typography/system.js" :comments link
/** System font stacks: https://systemfontstack.com */
export const SystemFontStacks = {
  "sans-serif":
    "-apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, Ubuntu, roboto, noto, segoe ui, arial, sans-serif",
  serif:
    "Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol",
  monospace:
    "Menlo, Consolas, Monaco, Liberation Mono, Lucida Console, monospace",
};
#+END_SRC
