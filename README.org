#+TITLE: Quarks System Core (QSC)

* Table of Contents :TOC@4:
- [[#preface][Preface]]
- [[#introduction][Introduction]]
- [[#features][Features]]
  - [[#general-setup][General Setup]]
  - [[#developer-experience][Developer Experience]]
  - [[#design-tokens][Design Tokens]]
    - [[#output][Output]]
    - [[#color][Color]]
    - [[#typography][Typography]]
    - [[#modular-scales][Modular Scales]]
- [[#getting-started][Getting Started]]
  - [[#just-looking-around][Just Looking Around]]
  - [[#setup][Setup]]
    - [[#offline][Offline]]
    - [[#what-about-node][What About Node?]]

* Preface

Now that Quarks System Core is out of its exploratory stage, I've moved the literate source to its
own file and generate an annotated source file from it instead of cluttering the README.

I've also condensed all points of entry in the library to a single =mod.js= file to minimize HTTP
requests when using the library in its intended environment.

As a bonus, you can now =curl= the source right from GitHub and work offline.

The code remains unminified so you can view source from your browser like the good old days ;)

* Introduction

Quarks System Core is a workflow for creating, assembling, and distributing design tokens for and on
the web.

It's part of a growing toolkit called QuarkSuite which focuses on using modern web technologies to
spin up portable, reproducible baselines for web projects.

Think of it like a UI boilerplate generator you can use right in your browser.

Enhancements to the workflow include Quarks System UI (/WIP/): a tiny collection of web components
for visual development and documentation of Quarks System Dictionaries.

Future enhancements may appear based on community feedback or my own needs.

Quarks System Core is written in web standard JavaScript (ES2015+).

* Features

** General Setup

+ Nothing to install
+ Universal but web focused

** Developer Experience

+ Get started immediately with a single function
+ Power tools available as needed

** Design Tokens

*** Output

+ CSS custom properties
+ Preprocessor variables
+ General data exporting
+ Desktop app support (currently GIMP/Inkscape and Sketch)
+ Integration with TailwindCSS and Style Dictionary

*** Color

+ Robust premade palette configurations
+ Full support for current and emerging CSS formats
+ Wield color like a color scientist
+ Built-in Colors project defaults for rapid prototyping

*** Typography

+ System font stacks provided for native OS typography or just to have better fallbacks

*** Modular Scales

+ Enforce consistency in your values
+ Merge, modify, and chunk scales according to your needs
+ Attach units when you're ready to roll

* Getting Started

** Just Looking Around

If you just want to inspect what the library makes available and play around with it, load up your
console in a modern browser or run a =deno repl= and paste:

#+BEGIN_SRC js
const QSC = await import("https://x.nest.land/quarksuite:core@1.0.0/mod.js");
#+END_SRC

** Setup

When you're ready to start a real project with Quarks System Core, get situated with the following
code.

#+BEGIN_SRC js
import { Quarks } from "https://x.nest.land/quarksuite:core@1.0.0/mod.js";

Quarks(); // generates default option tokens
#+END_SRC

That's all you need in native ES Module environments.

*** Offline

For an offline workflow, you can =curl= the package source directly.

#+BEGIN_SRC shell
curl -o /path/to/your/local/copy.js https://raw.githubusercontent.com/quarksuite/core/main/main.js
#+END_SRC

*** What About Node?

Using Quarks System Core with Node requires a bit extra, because the runtime doesn't /natively/
support ES Module importing from URLs.

That said, plenty of modern build tools and dev environments in the Node ecosystem /do/. I highly
recommend native ESM dev servers ([[https://www.snowpack.dev/ ][Snowpack]], [[https://vitejs.dev/][Vite]], [[https://kit.svelte.dev/][SvelteKit]], [[https://modern-web.dev/docs/dev-server/overview/][Web Dev Server]], [[https://github.com/preactjs/wmr][WMR]]) when using QSC in
a Node environment.
