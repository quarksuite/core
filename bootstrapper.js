// [[file:Mod.org::*Importing the Bootstrapper Helpers][Importing the Bootstrapper Helpers:1]]
import {
  AnimationCubicBezier,
  AnimationDuration,
  BlendedPalette,
  FigureCalculations,
  GridDimensions,
  GridFractions,
  InterpolatedPalette,
  MaterialPalette,
  StandardPalette,
  TextLeading,
  TextMeasure,
  TextSize,
  TextStack,
  TextStyle,
  TextUnits,
  Viewport,
} from "./formulas.js";
import { ms_create } from "./utilities.js";
// Importing the Bootstrapper Helpers:1 ends here

// [[file:Mod.org::*Quarks System Dictionary Typedefs][Quarks System Dictionary Typedefs:1]]
/**
 * @typedef {object} QSDProject - Quarks System Dictionary project metadata (required by token exporters)
 * @property {string} name - project name (e.g. "Your Project Name")
 * @property {string} author - project author (e.g. "Ed N. Bacon", "Compucorp")
 * @property {string} version - project version (e.g. "0.0.0")
 * @property {"major" | "minor" | "patch" | "pre" | "build" } [bump] - optional autoversioning
 * @property {string} license - project license (e.g. "Unlicense")
 */

/**
 * @typedef {string | number} QSDValue - token value
 */

/**
 * @typedef {QSDValue[]} QSDScale - array of token values
 */

/**
 * @typedef {{base: QSDValue, [index: string]: QSDValue | QSDScale | QSDSubcategory }} QSDSubcategory - token subcategory (base represents default, any other properties are variants)
 */

/**
 * @typedef {{[index: string]: QSDValue | QSDScale | QSDSubcategory | object | QSDTokens }} QSDTokens - design tokens (consumed recursively by token exporters)
 */

/**
 * @typedef {{project?: QSDProject, [index: string]: QSDTokens }} QSD - Quarks System Dictionary design token spec
 */
// Quarks System Dictionary Typedefs:1 ends here

// [[file:Mod.org::*Quarks Bootstrapper Typedefs][Quarks Bootstrapper Typedefs:1]]
/**
 * @typedef {{base?: string, type?: "material" | "basic" | "interpolated" | "blended", [index: string]: string | number}} QuarksConfigColor - palette configuration (each type has its own options)
 */

/**
 * @typedef {{initial?: number, ratio?: number, limit?: number}} QuarksConfigScale - global modular scale configuration
 * @property {number} [base] - the initial/base value to generate from
 * @property {number} [ratio] - the ratio to use
 * @property {number} [limit] - the global limit of scale output
 */

/**
 * @typedef {object} QuarksConfigTextFamily - configuration for text families
 * @property {string} [family] - text family to prepend to system font stack
 * @property {(100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900)[]} [weight] - weights to generate with family
 */

/**
 * @typedef {object} QuarksConfigText - text configuration
 * @property {QuarksConfigTextFamily} [body] - body text config
 * @property {QuarksConfigTextFamily} [headings] - heading text config
 * @property {QuarksConfigTextFamily} [code] - source code text config
 * @property {{ min?: number, max?: number }} [measure] - measure/line length config (output in `ch` units)
 * @property {{normal?: number, tight?: number}} [leading] - leading/line height config (unitless)
 * @property {number} values - allows setting an individual limit instead of using the global scale's
 */

/**
 * @typedef {object} QuarksConfigGrid - CSS grid configuration
 * @property {number} [columns] - number of grid columns (rows autogenerated from modular scale ratio)
 * @property {number} [ratio] - individual ratio to calculate grid rows
 */

/**
 * @typedef {object} QuarksConfigViewport - viewport configuration
 * @property {number} [threshold] - viewport threshold
 * @property {number} [full] - full viewport value
 * @property {("w" | "h" | "min" | "max")[]} [context] - viewport contexts to generate tokens for
 */

/**
 * @typedef {object} QuarksConfigAnimation - animation configuration
 * @property {{ fastest?: number, slowest?: number}} [duration] - min and max duration (in milliseconds)
 * @property {{ floor?: number, ceiling?: number}} [easing] - min and max for cubic bezier values
 */

/**
 * @typedef {object} QuarksConfig - config for Quarks bootstrapper
 * @property {QuarksConfigColor} [color] - color config
 * @property {QuarksConfigScale} [scale] - global scale config
 * @property {QuarksConfigText} [text] - text config
 * @property {QuarksConfigGrid} [grid] - grid config
 * @property {QuarksConfigViewport} [viewport] - device viewport config
 * @property {QuarksConfigAnimation} [animation] - animation config
 */
// Quarks Bootstrapper Typedefs:1 ends here

// [[file:Mod.org::*Bootstrapper Implementation][Bootstrapper Implementation:1]]
/**
 * A bootstrapper for quickly generating a Quarks System Dictionary. You will
 * still need to attach the project metadata before using the token exporters.
 *
 * @param {QuarksConfig} config
 * @returns {QSDTokens} - Quarks System Dictionary tokens
 *
 * @remarks
 * `type` corresponds with a built-in palette formula, `modifiers` for its available options
 *
 * @see {@link MaterialPalette} for color.type "material"
 * @see {@link StandardPalette} for color.type "basic"
 * @see {@link InterpolatedPalette} for color.type "interpolated"
 * @see {@link BlendedPalette} for color.type blended
 *
 * @example
 * Generating the full collection of defaults.
 * ```ts
 * Quarks();
 * ```
 *
 * @example
 * Customizing the output
 * ```ts
 * Quarks({
 *   color: { base: "rebeccapurple", type: "basic", scheme: "triadic" }
 * });
 * ```
 *
 * @see {@link https://github.com/quarksuite/core/blob/main/api#quarks | Quarks() API documentation}
 */
export function Quarks(config = {}) {
  // Set default color options
  const { base = "gray", type = "material", ...modifiers } = config.color || {};

  // Set default global modular scale options
  const { initial = 1, ratio = 1.5, limit = 6 } = config.scale || {};

  // Set default text options
  const {
    body: { family: BODY = null, weights: BODY_WEIGHTS = [400, 700] } = {},
    headings: {
      family: HEADING = null,
      weights: HEADING_WEIGHTS = BODY_WEIGHTS,
    } = {},
    code: { family: CODE = null, weights: CODE_WEIGHTS = BODY_WEIGHTS } = {},
    measure: { min = 45, max = 75 } = {},
    leading: { normal = 1.5, tight = 1.125 } = {},
    values: TEXT_VALUES = limit,
  } = config.text || {};

  // Set default grid options
  const { columns: COLUMNS = limit, ratio: GRID_RATIO = ratio } = config.grid ||
    {};

  // Set default viewport options
  const {
    threshold = 10,
    full = 100,
    context = ["w", "h"],
    values: VP_VALUES = limit,
  } = config.viewport || {};

  // Set default animation options
  const {
    duration: { fastest = 250, slowest = 1000 } = {},
    easing: { floor = 0, ceiling = 1 } = {},
    values: ANIMATION_VALUES = limit,
  } = config.animation || {};

  // Create global modular scale
  const SCALE = ms_create({ ratio, values: limit }, initial);

  // If config has limits defined, use those instead of global
  const [TEXT, GRID, VP, ANIMATION] = [
    TEXT_VALUES,
    COLUMNS,
    VP_VALUES,
    ANIMATION_VALUES,
  ].map((values) => ms_create({ ratio, values }, initial));

  // Generate grid rows from ratio
  const ROWS = Math.round(COLUMNS / GRID_RATIO);

  return {
    color: paletteFromType(base, type, modifiers),
    text: {
      body: {
        family: TextStack("sans", BODY),
        weight: TextStyle(BODY_WEIGHTS),
      },
      headings: {
        family: TextStack("serif", HEADING),
        weight: TextStyle(HEADING_WEIGHTS),
      },
      code: {
        family: TextStack("monospace", CODE),
        weight: TextStyle(CODE_WEIGHTS),
      },
      size: TextSize(TEXT),
      measure: TextMeasure({ min, max }, TEXT),
      leading: TextLeading({ normal, tight }, TEXT),
      unit: TextUnits(TEXT),
    },
    grid: {
      columns: COLUMNS,
      rows: ROWS,
      fr: GridFractions(GRID),
      ...GridDimensions(COLUMNS, ROWS),
    },
    viewport: Viewport({ threshold, full, context }, VP),
    animation: {
      duration: AnimationDuration({ fastest, slowest }, ANIMATION),
      easing: AnimationCubicBezier({ floor, ceiling }, ANIMATION),
    },
    ms: FigureCalculations(SCALE),
  };
}
// Bootstrapper Implementation:1 ends here

// [[file:Mod.org::*Bootstrapper Palette Types][Bootstrapper Palette Types:1]]
function paletteFromType(base, type, modifiers = {}) {
  return {
    material: MaterialPalette(modifiers, base),
    basic: StandardPalette(modifiers, base),
    blended: BlendedPalette(modifiers, base),
    interpolated: InterpolatedPalette(modifiers, base),
  }[type];
}
// Bootstrapper Palette Types:1 ends here
